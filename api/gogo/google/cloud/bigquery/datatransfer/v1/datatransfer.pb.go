// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: google/cloud/bigquery/datatransfer/v1/datatransfer.proto

package google_cloud_bigquery_datatransfer_v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "go.pedge.io/pb/gogo/google/api"
import google_protobuf4 "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/types"
import google_protobuf6 "go.pedge.io/pb/gogo/google/protobuf"
import google_protobuf2 "github.com/gogo/protobuf/types"
import google_protobuf7 "github.com/gogo/protobuf/types"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Parameter type.
type DataSourceParameter_Type int32

const (
	// Type unspecified.
	DataSourceParameter_TYPE_UNSPECIFIED DataSourceParameter_Type = 0
	// String parameter.
	DataSourceParameter_STRING DataSourceParameter_Type = 1
	// Integer parameter (64-bits).
	// Will be serialized to json as string.
	DataSourceParameter_INTEGER DataSourceParameter_Type = 2
	// Double precision floating point parameter.
	DataSourceParameter_DOUBLE DataSourceParameter_Type = 3
	// Boolean parameter.
	DataSourceParameter_BOOLEAN DataSourceParameter_Type = 4
	// Record parameter.
	DataSourceParameter_RECORD DataSourceParameter_Type = 5
	// Page ID for a Google+ Page.
	DataSourceParameter_PLUS_PAGE DataSourceParameter_Type = 6
)

var DataSourceParameter_Type_name = map[int32]string{
	0: "TYPE_UNSPECIFIED",
	1: "STRING",
	2: "INTEGER",
	3: "DOUBLE",
	4: "BOOLEAN",
	5: "RECORD",
	6: "PLUS_PAGE",
}
var DataSourceParameter_Type_value = map[string]int32{
	"TYPE_UNSPECIFIED": 0,
	"STRING":           1,
	"INTEGER":          2,
	"DOUBLE":           3,
	"BOOLEAN":          4,
	"RECORD":           5,
	"PLUS_PAGE":        6,
}

func (x DataSourceParameter_Type) String() string {
	return proto.EnumName(DataSourceParameter_Type_name, int32(x))
}
func (DataSourceParameter_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorDatatransfer, []int{0, 0}
}

// The type of authorization needed for this data source.
type DataSource_AuthorizationType int32

const (
	// Type unspecified.
	DataSource_AUTHORIZATION_TYPE_UNSPECIFIED DataSource_AuthorizationType = 0
	// Use OAuth 2 authorization codes that can be exchanged
	// for a refresh token on the backend.
	DataSource_AUTHORIZATION_CODE DataSource_AuthorizationType = 1
	// Return an authorization code for a given Google+ page that can then be
	// exchanged for a refresh token on the backend.
	DataSource_GOOGLE_PLUS_AUTHORIZATION_CODE DataSource_AuthorizationType = 2
)

var DataSource_AuthorizationType_name = map[int32]string{
	0: "AUTHORIZATION_TYPE_UNSPECIFIED",
	1: "AUTHORIZATION_CODE",
	2: "GOOGLE_PLUS_AUTHORIZATION_CODE",
}
var DataSource_AuthorizationType_value = map[string]int32{
	"AUTHORIZATION_TYPE_UNSPECIFIED": 0,
	"AUTHORIZATION_CODE":             1,
	"GOOGLE_PLUS_AUTHORIZATION_CODE": 2,
}

func (x DataSource_AuthorizationType) String() string {
	return proto.EnumName(DataSource_AuthorizationType_name, int32(x))
}
func (DataSource_AuthorizationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorDatatransfer, []int{1, 0}
}

// Represents how the data source supports data auto refresh.
type DataSource_DataRefreshType int32

const (
	// The data source won't support data auto refresh, which is default value.
	DataSource_DATA_REFRESH_TYPE_UNSPECIFIED DataSource_DataRefreshType = 0
	// The data source supports data auto refresh, and runs will be scheduled
	// for the past few days. Does not allow custom values to be set for each
	// transfer config.
	DataSource_SLIDING_WINDOW DataSource_DataRefreshType = 1
	// The data source supports data auto refresh, and runs will be scheduled
	// for the past few days. Allows custom values to be set for each transfer
	// config.
	DataSource_CUSTOM_SLIDING_WINDOW DataSource_DataRefreshType = 2
)

var DataSource_DataRefreshType_name = map[int32]string{
	0: "DATA_REFRESH_TYPE_UNSPECIFIED",
	1: "SLIDING_WINDOW",
	2: "CUSTOM_SLIDING_WINDOW",
}
var DataSource_DataRefreshType_value = map[string]int32{
	"DATA_REFRESH_TYPE_UNSPECIFIED": 0,
	"SLIDING_WINDOW":                1,
	"CUSTOM_SLIDING_WINDOW":         2,
}

func (x DataSource_DataRefreshType) String() string {
	return proto.EnumName(DataSource_DataRefreshType_name, int32(x))
}
func (DataSource_DataRefreshType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorDatatransfer, []int{1, 1}
}

// Represents which runs should be pulled.
type ListTransferRunsRequest_RunAttempt int32

const (
	// All runs should be returned.
	ListTransferRunsRequest_RUN_ATTEMPT_UNSPECIFIED ListTransferRunsRequest_RunAttempt = 0
	// Only latest run per day should be returned.
	ListTransferRunsRequest_LATEST ListTransferRunsRequest_RunAttempt = 1
)

var ListTransferRunsRequest_RunAttempt_name = map[int32]string{
	0: "RUN_ATTEMPT_UNSPECIFIED",
	1: "LATEST",
}
var ListTransferRunsRequest_RunAttempt_value = map[string]int32{
	"RUN_ATTEMPT_UNSPECIFIED": 0,
	"LATEST":                  1,
}

func (x ListTransferRunsRequest_RunAttempt) String() string {
	return proto.EnumName(ListTransferRunsRequest_RunAttempt_name, int32(x))
}
func (ListTransferRunsRequest_RunAttempt) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorDatatransfer, []int{13, 0}
}

// Represents a data source parameter with validation rules, so that
// parameters can be rendered in the UI. These parameters are given to us by
// supported data sources, and include all needed information for rendering
// and validation.
// Thus, whoever uses this api can decide to generate either generic ui,
// or custom data source specific forms.
type DataSourceParameter struct {
	// Parameter identifier.
	ParamId string `protobuf:"bytes,1,opt,name=param_id,json=paramId,proto3" json:"param_id,omitempty"`
	// Parameter display name in the user interface.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Parameter description.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Parameter type.
	Type DataSourceParameter_Type `protobuf:"varint,4,opt,name=type,proto3,enum=google.cloud.bigquery.datatransfer.v1.DataSourceParameter_Type" json:"type,omitempty"`
	// Is parameter required.
	Required bool `protobuf:"varint,5,opt,name=required,proto3" json:"required,omitempty"`
	// Can parameter have multiple values.
	Repeated bool `protobuf:"varint,6,opt,name=repeated,proto3" json:"repeated,omitempty"`
	// Regular expression which can be used for parameter validation.
	ValidationRegex string `protobuf:"bytes,7,opt,name=validation_regex,json=validationRegex,proto3" json:"validation_regex,omitempty"`
	// All possible values for the parameter.
	AllowedValues []string `protobuf:"bytes,8,rep,name=allowed_values,json=allowedValues" json:"allowed_values,omitempty"`
	// For integer and double values specifies minimum allowed value.
	MinValue *google_protobuf7.DoubleValue `protobuf:"bytes,9,opt,name=min_value,json=minValue" json:"min_value,omitempty"`
	// For integer and double values specifies maxminum allowed value.
	MaxValue *google_protobuf7.DoubleValue `protobuf:"bytes,10,opt,name=max_value,json=maxValue" json:"max_value,omitempty"`
	// When parameter is a record, describes child fields.
	Fields []*DataSourceParameter `protobuf:"bytes,11,rep,name=fields" json:"fields,omitempty"`
	// Description of the requirements for this field, in case the user input does
	// not fulfill the regex pattern or min/max values.
	ValidationDescription string `protobuf:"bytes,12,opt,name=validation_description,json=validationDescription,proto3" json:"validation_description,omitempty"`
	// URL to a help document to further explain the naming requirements.
	ValidationHelpUrl string `protobuf:"bytes,13,opt,name=validation_help_url,json=validationHelpUrl,proto3" json:"validation_help_url,omitempty"`
	// Cannot be changed after initial creation.
	Immutable bool `protobuf:"varint,14,opt,name=immutable,proto3" json:"immutable,omitempty"`
	// If set to true, schema should be taken from the parent with the same
	// parameter_id. Only applicable when parameter type is RECORD.
	Recurse bool `protobuf:"varint,15,opt,name=recurse,proto3" json:"recurse,omitempty"`
}

func (m *DataSourceParameter) Reset()                    { *m = DataSourceParameter{} }
func (m *DataSourceParameter) String() string            { return proto.CompactTextString(m) }
func (*DataSourceParameter) ProtoMessage()               {}
func (*DataSourceParameter) Descriptor() ([]byte, []int) { return fileDescriptorDatatransfer, []int{0} }

func (m *DataSourceParameter) GetParamId() string {
	if m != nil {
		return m.ParamId
	}
	return ""
}

func (m *DataSourceParameter) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *DataSourceParameter) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *DataSourceParameter) GetType() DataSourceParameter_Type {
	if m != nil {
		return m.Type
	}
	return DataSourceParameter_TYPE_UNSPECIFIED
}

func (m *DataSourceParameter) GetRequired() bool {
	if m != nil {
		return m.Required
	}
	return false
}

func (m *DataSourceParameter) GetRepeated() bool {
	if m != nil {
		return m.Repeated
	}
	return false
}

func (m *DataSourceParameter) GetValidationRegex() string {
	if m != nil {
		return m.ValidationRegex
	}
	return ""
}

func (m *DataSourceParameter) GetAllowedValues() []string {
	if m != nil {
		return m.AllowedValues
	}
	return nil
}

func (m *DataSourceParameter) GetMinValue() *google_protobuf7.DoubleValue {
	if m != nil {
		return m.MinValue
	}
	return nil
}

func (m *DataSourceParameter) GetMaxValue() *google_protobuf7.DoubleValue {
	if m != nil {
		return m.MaxValue
	}
	return nil
}

func (m *DataSourceParameter) GetFields() []*DataSourceParameter {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *DataSourceParameter) GetValidationDescription() string {
	if m != nil {
		return m.ValidationDescription
	}
	return ""
}

func (m *DataSourceParameter) GetValidationHelpUrl() string {
	if m != nil {
		return m.ValidationHelpUrl
	}
	return ""
}

func (m *DataSourceParameter) GetImmutable() bool {
	if m != nil {
		return m.Immutable
	}
	return false
}

func (m *DataSourceParameter) GetRecurse() bool {
	if m != nil {
		return m.Recurse
	}
	return false
}

// Represents data source metadata. Metadata is sufficient to
// render UI and request proper OAuth tokens.
type DataSource struct {
	// Data source resource name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Data source id.
	DataSourceId string `protobuf:"bytes,2,opt,name=data_source_id,json=dataSourceId,proto3" json:"data_source_id,omitempty"`
	// User friendly data source name.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// User friendly data source description string.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Data source client id which should be used to receive refresh token.
	// When not supplied, no offline credentials are populated for data transfer.
	ClientId string `protobuf:"bytes,5,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// Api auth scopes for which refresh token needs to be obtained. Only valid
	// when `client_id` is specified. Ignored otherwise. These are scopes needed
	// by a data source to prepare data and ingest them into BigQuery,
	// e.g., https://www.googleapis.com/auth/bigquery
	Scopes []string `protobuf:"bytes,6,rep,name=scopes" json:"scopes,omitempty"`
	// Transfer type. Currently supports only batch transfers,
	// which are transfers that use the BigQuery batch APIs (load or
	// query) to ingest the data.
	TransferType TransferType `protobuf:"varint,7,opt,name=transfer_type,json=transferType,proto3,enum=google.cloud.bigquery.datatransfer.v1.TransferType" json:"transfer_type,omitempty"`
	// Indicates whether the data source supports multiple transfers
	// to different BigQuery targets.
	SupportsMultipleTransfers bool `protobuf:"varint,8,opt,name=supports_multiple_transfers,json=supportsMultipleTransfers,proto3" json:"supports_multiple_transfers,omitempty"`
	// The number of seconds to wait for an update from the data source
	// before BigQuery marks the transfer as failed.
	UpdateDeadlineSeconds int32 `protobuf:"varint,9,opt,name=update_deadline_seconds,json=updateDeadlineSeconds,proto3" json:"update_deadline_seconds,omitempty"`
	// Default data transfer schedule.
	// Examples of valid schedules include:
	// `1st,3rd monday of month 15:30`,
	// `every wed,fri of jan,jun 13:15`, and
	// `first sunday of quarter 00:00`.
	DefaultSchedule string `protobuf:"bytes,10,opt,name=default_schedule,json=defaultSchedule,proto3" json:"default_schedule,omitempty"`
	// Specifies whether the data source supports a user defined schedule, or
	// operates on the default schedule.
	// When set to `true`, user can override default schedule.
	SupportsCustomSchedule bool `protobuf:"varint,11,opt,name=supports_custom_schedule,json=supportsCustomSchedule,proto3" json:"supports_custom_schedule,omitempty"`
	// Data source parameters.
	Parameters []*DataSourceParameter `protobuf:"bytes,12,rep,name=parameters" json:"parameters,omitempty"`
	// Url for the help document for this data source.
	HelpUrl string `protobuf:"bytes,13,opt,name=help_url,json=helpUrl,proto3" json:"help_url,omitempty"`
	// Indicates the type of authorization.
	AuthorizationType DataSource_AuthorizationType `protobuf:"varint,14,opt,name=authorization_type,json=authorizationType,proto3,enum=google.cloud.bigquery.datatransfer.v1.DataSource_AuthorizationType" json:"authorization_type,omitempty"`
	// Specifies whether the data source supports automatic data refresh for the
	// past few days, and how it's supported.
	// For some data sources, data might not be complete until a few days later,
	// so it's useful to refresh data automatically.
	DataRefreshType DataSource_DataRefreshType `protobuf:"varint,15,opt,name=data_refresh_type,json=dataRefreshType,proto3,enum=google.cloud.bigquery.datatransfer.v1.DataSource_DataRefreshType" json:"data_refresh_type,omitempty"`
	// Default data refresh window on days.
	// Only meaningful when `data_refresh_type` = `SLIDING_WINDOW`.
	DefaultDataRefreshWindowDays int32 `protobuf:"varint,16,opt,name=default_data_refresh_window_days,json=defaultDataRefreshWindowDays,proto3" json:"default_data_refresh_window_days,omitempty"`
	// Disables backfilling and manual run scheduling
	// for the data source.
	ManualRunsDisabled bool `protobuf:"varint,17,opt,name=manual_runs_disabled,json=manualRunsDisabled,proto3" json:"manual_runs_disabled,omitempty"`
	// The minimum interval between two consecutive scheduled runs.
	MinimumScheduleInterval *google_protobuf4.Duration `protobuf:"bytes,18,opt,name=minimum_schedule_interval,json=minimumScheduleInterval" json:"minimum_schedule_interval,omitempty"`
}

func (m *DataSource) Reset()                    { *m = DataSource{} }
func (m *DataSource) String() string            { return proto.CompactTextString(m) }
func (*DataSource) ProtoMessage()               {}
func (*DataSource) Descriptor() ([]byte, []int) { return fileDescriptorDatatransfer, []int{1} }

func (m *DataSource) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DataSource) GetDataSourceId() string {
	if m != nil {
		return m.DataSourceId
	}
	return ""
}

func (m *DataSource) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *DataSource) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *DataSource) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *DataSource) GetScopes() []string {
	if m != nil {
		return m.Scopes
	}
	return nil
}

func (m *DataSource) GetTransferType() TransferType {
	if m != nil {
		return m.TransferType
	}
	return TransferType_TRANSFER_TYPE_UNSPECIFIED
}

func (m *DataSource) GetSupportsMultipleTransfers() bool {
	if m != nil {
		return m.SupportsMultipleTransfers
	}
	return false
}

func (m *DataSource) GetUpdateDeadlineSeconds() int32 {
	if m != nil {
		return m.UpdateDeadlineSeconds
	}
	return 0
}

func (m *DataSource) GetDefaultSchedule() string {
	if m != nil {
		return m.DefaultSchedule
	}
	return ""
}

func (m *DataSource) GetSupportsCustomSchedule() bool {
	if m != nil {
		return m.SupportsCustomSchedule
	}
	return false
}

func (m *DataSource) GetParameters() []*DataSourceParameter {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *DataSource) GetHelpUrl() string {
	if m != nil {
		return m.HelpUrl
	}
	return ""
}

func (m *DataSource) GetAuthorizationType() DataSource_AuthorizationType {
	if m != nil {
		return m.AuthorizationType
	}
	return DataSource_AUTHORIZATION_TYPE_UNSPECIFIED
}

func (m *DataSource) GetDataRefreshType() DataSource_DataRefreshType {
	if m != nil {
		return m.DataRefreshType
	}
	return DataSource_DATA_REFRESH_TYPE_UNSPECIFIED
}

func (m *DataSource) GetDefaultDataRefreshWindowDays() int32 {
	if m != nil {
		return m.DefaultDataRefreshWindowDays
	}
	return 0
}

func (m *DataSource) GetManualRunsDisabled() bool {
	if m != nil {
		return m.ManualRunsDisabled
	}
	return false
}

func (m *DataSource) GetMinimumScheduleInterval() *google_protobuf4.Duration {
	if m != nil {
		return m.MinimumScheduleInterval
	}
	return nil
}

// A request to get data source info.
type GetDataSourceRequest struct {
	// The field will contain name of the resource requested, for example:
	// `projects/{project_id}/dataSources/{data_source_id}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *GetDataSourceRequest) Reset()                    { *m = GetDataSourceRequest{} }
func (m *GetDataSourceRequest) String() string            { return proto.CompactTextString(m) }
func (*GetDataSourceRequest) ProtoMessage()               {}
func (*GetDataSourceRequest) Descriptor() ([]byte, []int) { return fileDescriptorDatatransfer, []int{2} }

func (m *GetDataSourceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Request to list supported data sources and their data transfer settings.
type ListDataSourcesRequest struct {
	// The BigQuery project id for which data sources should be returned.
	// Must be in the form: `projects/{project_id}`
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Pagination token, which can be used to request a specific page
	// of `ListDataSourcesRequest` list results. For multiple-page
	// results, `ListDataSourcesResponse` outputs
	// a `next_page` token, which can be used as the
	// `page_token` value to request the next page of list results.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Page size. The default page size is the maximum value of 1000 results.
	PageSize int32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (m *ListDataSourcesRequest) Reset()         { *m = ListDataSourcesRequest{} }
func (m *ListDataSourcesRequest) String() string { return proto.CompactTextString(m) }
func (*ListDataSourcesRequest) ProtoMessage()    {}
func (*ListDataSourcesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorDatatransfer, []int{3}
}

func (m *ListDataSourcesRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *ListDataSourcesRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *ListDataSourcesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

// Returns list of supported data sources and their metadata.
type ListDataSourcesResponse struct {
	// List of supported data sources and their transfer settings.
	DataSources []*DataSource `protobuf:"bytes,1,rep,name=data_sources,json=dataSources" json:"data_sources,omitempty"`
	// Output only. The next-pagination token. For multiple-page list results,
	// this token can be used as the
	// `ListDataSourcesRequest.page_token`
	// to request the next page of list results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (m *ListDataSourcesResponse) Reset()         { *m = ListDataSourcesResponse{} }
func (m *ListDataSourcesResponse) String() string { return proto.CompactTextString(m) }
func (*ListDataSourcesResponse) ProtoMessage()    {}
func (*ListDataSourcesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorDatatransfer, []int{4}
}

func (m *ListDataSourcesResponse) GetDataSources() []*DataSource {
	if m != nil {
		return m.DataSources
	}
	return nil
}

func (m *ListDataSourcesResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

// A request to create a data transfer configuration. If new credentials are
// needed for this transfer configuration, an authorization code must be
// provided. If an authorization code is provided, the transfer configuration
// will be associated with the user id corresponding to the
// authorization code. Otherwise, the transfer configuration will be associated
// with the calling user.
type CreateTransferConfigRequest struct {
	// The BigQuery project id where the transfer configuration should be created.
	// Must be in the format /projects/{project_id}/locations/{location_id}
	// or
	// /projects/{project_id}/locations/-
	// In case when '-' is specified as location_id, location is infered from
	// the destination dataset region.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Data transfer configuration to create.
	TransferConfig *TransferConfig `protobuf:"bytes,2,opt,name=transfer_config,json=transferConfig" json:"transfer_config,omitempty"`
	// Optional OAuth2 authorization code to use with this transfer configuration.
	// This is required if new credentials are needed, as indicated by
	// `CheckValidCreds`.
	// In order to obtain authorization_code, please make a
	// request to
	// https://www.gstatic.com/bigquerydatatransfer/oauthz/auth?client_id=<datatransferapiclientid>&scope=<data_source_scopes>&redirect_uri=<redirect_uri>
	//
	// * client_id should be OAuth client_id of BigQuery DTS API for the given
	//   data source returned by ListDataSources method.
	// * data_source_scopes are the scopes returned by ListDataSources method.
	// * redirect_uri is an optional parameter. If not specified, then
	//   authorization code is posted to the opener of authorization flow window.
	//   Otherwise it will be sent to the redirect uri. A special value of
	//   urn:ietf:wg:oauth:2.0:oob means that authorization code should be
	//   returned in the title bar of the browser, with the page text prompting
	//   the user to copy the code and paste it in the application.
	AuthorizationCode string `protobuf:"bytes,3,opt,name=authorization_code,json=authorizationCode,proto3" json:"authorization_code,omitempty"`
}

func (m *CreateTransferConfigRequest) Reset()         { *m = CreateTransferConfigRequest{} }
func (m *CreateTransferConfigRequest) String() string { return proto.CompactTextString(m) }
func (*CreateTransferConfigRequest) ProtoMessage()    {}
func (*CreateTransferConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorDatatransfer, []int{5}
}

func (m *CreateTransferConfigRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *CreateTransferConfigRequest) GetTransferConfig() *TransferConfig {
	if m != nil {
		return m.TransferConfig
	}
	return nil
}

func (m *CreateTransferConfigRequest) GetAuthorizationCode() string {
	if m != nil {
		return m.AuthorizationCode
	}
	return ""
}

// A request to update a transfer configuration. To update the user id of the
// transfer configuration, an authorization code needs to be provided.
type UpdateTransferConfigRequest struct {
	// Data transfer configuration to create.
	TransferConfig *TransferConfig `protobuf:"bytes,1,opt,name=transfer_config,json=transferConfig" json:"transfer_config,omitempty"`
	// Optional OAuth2 authorization code to use with this transfer configuration.
	// If it is provided, the transfer configuration will be associated with the
	// authorizing user.
	// In order to obtain authorization_code, please make a
	// request to
	// https://www.gstatic.com/bigquerydatatransfer/oauthz/auth?client_id=<datatransferapiclientid>&scope=<data_source_scopes>&redirect_uri=<redirect_uri>
	//
	// * client_id should be OAuth client_id of BigQuery DTS API for the given
	//   data source returned by ListDataSources method.
	// * data_source_scopes are the scopes returned by ListDataSources method.
	// * redirect_uri is an optional parameter. If not specified, then
	//   authorization code is posted to the opener of authorization flow window.
	//   Otherwise it will be sent to the redirect uri. A special value of
	//   urn:ietf:wg:oauth:2.0:oob means that authorization code should be
	//   returned in the title bar of the browser, with the page text prompting
	//   the user to copy the code and paste it in the application.
	AuthorizationCode string `protobuf:"bytes,3,opt,name=authorization_code,json=authorizationCode,proto3" json:"authorization_code,omitempty"`
	// Required list of fields to be updated in this request.
	UpdateMask *google_protobuf6.FieldMask `protobuf:"bytes,4,opt,name=update_mask,json=updateMask" json:"update_mask,omitempty"`
}

func (m *UpdateTransferConfigRequest) Reset()         { *m = UpdateTransferConfigRequest{} }
func (m *UpdateTransferConfigRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateTransferConfigRequest) ProtoMessage()    {}
func (*UpdateTransferConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorDatatransfer, []int{6}
}

func (m *UpdateTransferConfigRequest) GetTransferConfig() *TransferConfig {
	if m != nil {
		return m.TransferConfig
	}
	return nil
}

func (m *UpdateTransferConfigRequest) GetAuthorizationCode() string {
	if m != nil {
		return m.AuthorizationCode
	}
	return ""
}

func (m *UpdateTransferConfigRequest) GetUpdateMask() *google_protobuf6.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

// A request to get data transfer information.
type GetTransferConfigRequest struct {
	// The field will contain name of the resource requested, for example:
	// `projects/{project_id}/transferConfigs/{config_id}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *GetTransferConfigRequest) Reset()         { *m = GetTransferConfigRequest{} }
func (m *GetTransferConfigRequest) String() string { return proto.CompactTextString(m) }
func (*GetTransferConfigRequest) ProtoMessage()    {}
func (*GetTransferConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorDatatransfer, []int{7}
}

func (m *GetTransferConfigRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// A request to delete data transfer information. All associated transfer runs
// and log messages will be deleted as well.
type DeleteTransferConfigRequest struct {
	// The field will contain name of the resource requested, for example:
	// `projects/{project_id}/transferConfigs/{config_id}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *DeleteTransferConfigRequest) Reset()         { *m = DeleteTransferConfigRequest{} }
func (m *DeleteTransferConfigRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteTransferConfigRequest) ProtoMessage()    {}
func (*DeleteTransferConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorDatatransfer, []int{8}
}

func (m *DeleteTransferConfigRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// A request to get data transfer run information.
type GetTransferRunRequest struct {
	// The field will contain name of the resource requested, for example:
	// `projects/{project_id}/transferConfigs/{config_id}/runs/{run_id}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *GetTransferRunRequest) Reset()         { *m = GetTransferRunRequest{} }
func (m *GetTransferRunRequest) String() string { return proto.CompactTextString(m) }
func (*GetTransferRunRequest) ProtoMessage()    {}
func (*GetTransferRunRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorDatatransfer, []int{9}
}

func (m *GetTransferRunRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// A request to delete data transfer run information.
type DeleteTransferRunRequest struct {
	// The field will contain name of the resource requested, for example:
	// `projects/{project_id}/transferConfigs/{config_id}/runs/{run_id}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *DeleteTransferRunRequest) Reset()         { *m = DeleteTransferRunRequest{} }
func (m *DeleteTransferRunRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteTransferRunRequest) ProtoMessage()    {}
func (*DeleteTransferRunRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorDatatransfer, []int{10}
}

func (m *DeleteTransferRunRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// A request to list data transfers configured for a BigQuery project.
type ListTransferConfigsRequest struct {
	// The BigQuery project id for which data sources
	// should be returned: `projects/{project_id}`.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// When specified, only configurations of requested data sources are returned.
	DataSourceIds []string `protobuf:"bytes,2,rep,name=data_source_ids,json=dataSourceIds" json:"data_source_ids,omitempty"`
	// Pagination token, which can be used to request a specific page
	// of `ListTransfersRequest` list results. For multiple-page
	// results, `ListTransfersResponse` outputs
	// a `next_page` token, which can be used as the
	// `page_token` value to request the next page of list results.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Page size. The default page size is the maximum value of 1000 results.
	PageSize int32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (m *ListTransferConfigsRequest) Reset()         { *m = ListTransferConfigsRequest{} }
func (m *ListTransferConfigsRequest) String() string { return proto.CompactTextString(m) }
func (*ListTransferConfigsRequest) ProtoMessage()    {}
func (*ListTransferConfigsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorDatatransfer, []int{11}
}

func (m *ListTransferConfigsRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *ListTransferConfigsRequest) GetDataSourceIds() []string {
	if m != nil {
		return m.DataSourceIds
	}
	return nil
}

func (m *ListTransferConfigsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *ListTransferConfigsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

// The returned list of pipelines in the project.
type ListTransferConfigsResponse struct {
	// Output only. The stored pipeline transfer configurations.
	TransferConfigs []*TransferConfig `protobuf:"bytes,1,rep,name=transfer_configs,json=transferConfigs" json:"transfer_configs,omitempty"`
	// Output only. The next-pagination token. For multiple-page list results,
	// this token can be used as the
	// `ListTransferConfigsRequest.page_token`
	// to request the next page of list results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (m *ListTransferConfigsResponse) Reset()         { *m = ListTransferConfigsResponse{} }
func (m *ListTransferConfigsResponse) String() string { return proto.CompactTextString(m) }
func (*ListTransferConfigsResponse) ProtoMessage()    {}
func (*ListTransferConfigsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorDatatransfer, []int{12}
}

func (m *ListTransferConfigsResponse) GetTransferConfigs() []*TransferConfig {
	if m != nil {
		return m.TransferConfigs
	}
	return nil
}

func (m *ListTransferConfigsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

// A request to list data transfer runs. UI can use this method to show/filter
// specific data transfer runs. The data source can use this method to request
// all scheduled transfer runs.
type ListTransferRunsRequest struct {
	// Name of transfer configuration for which transfer runs should be retrieved.
	// Format of transfer configuration resource name is:
	// `projects/{project_id}/transferConfigs/{config_id}`.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// When specified, only transfer runs with requested states are returned.
	States []TransferState `protobuf:"varint,2,rep,packed,name=states,enum=google.cloud.bigquery.datatransfer.v1.TransferState" json:"states,omitempty"`
	// Pagination token, which can be used to request a specific page
	// of `ListTransferRunsRequest` list results. For multiple-page
	// results, `ListTransferRunsResponse` outputs
	// a `next_page` token, which can be used as the
	// `page_token` value to request the next page of list results.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Page size. The default page size is the maximum value of 1000 results.
	PageSize int32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Indicates how run attempts are to be pulled.
	RunAttempt ListTransferRunsRequest_RunAttempt `protobuf:"varint,5,opt,name=run_attempt,json=runAttempt,proto3,enum=google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest_RunAttempt" json:"run_attempt,omitempty"`
}

func (m *ListTransferRunsRequest) Reset()         { *m = ListTransferRunsRequest{} }
func (m *ListTransferRunsRequest) String() string { return proto.CompactTextString(m) }
func (*ListTransferRunsRequest) ProtoMessage()    {}
func (*ListTransferRunsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorDatatransfer, []int{13}
}

func (m *ListTransferRunsRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *ListTransferRunsRequest) GetStates() []TransferState {
	if m != nil {
		return m.States
	}
	return nil
}

func (m *ListTransferRunsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *ListTransferRunsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListTransferRunsRequest) GetRunAttempt() ListTransferRunsRequest_RunAttempt {
	if m != nil {
		return m.RunAttempt
	}
	return ListTransferRunsRequest_RUN_ATTEMPT_UNSPECIFIED
}

// The returned list of pipelines in the project.
type ListTransferRunsResponse struct {
	// Output only. The stored pipeline transfer runs.
	TransferRuns []*TransferRun `protobuf:"bytes,1,rep,name=transfer_runs,json=transferRuns" json:"transfer_runs,omitempty"`
	// Output only. The next-pagination token. For multiple-page list results,
	// this token can be used as the
	// `ListTransferRunsRequest.page_token`
	// to request the next page of list results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (m *ListTransferRunsResponse) Reset()         { *m = ListTransferRunsResponse{} }
func (m *ListTransferRunsResponse) String() string { return proto.CompactTextString(m) }
func (*ListTransferRunsResponse) ProtoMessage()    {}
func (*ListTransferRunsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorDatatransfer, []int{14}
}

func (m *ListTransferRunsResponse) GetTransferRuns() []*TransferRun {
	if m != nil {
		return m.TransferRuns
	}
	return nil
}

func (m *ListTransferRunsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

// A request to get user facing log messages associated with data transfer run.
type ListTransferLogsRequest struct {
	// Transfer run name in the form:
	// `projects/{project_id}/transferConfigs/{config_Id}/runs/{run_id}`.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Pagination token, which can be used to request a specific page
	// of `ListTransferLogsRequest` list results. For multiple-page
	// results, `ListTransferLogsResponse` outputs
	// a `next_page` token, which can be used as the
	// `page_token` value to request the next page of list results.
	PageToken string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Page size. The default page size is the maximum value of 1000 results.
	PageSize int32 `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Message types to return. If not populated - INFO, WARNING and ERROR
	// messages are returned.
	MessageTypes []TransferMessage_MessageSeverity `protobuf:"varint,6,rep,packed,name=message_types,json=messageTypes,enum=google.cloud.bigquery.datatransfer.v1.TransferMessage_MessageSeverity" json:"message_types,omitempty"`
}

func (m *ListTransferLogsRequest) Reset()         { *m = ListTransferLogsRequest{} }
func (m *ListTransferLogsRequest) String() string { return proto.CompactTextString(m) }
func (*ListTransferLogsRequest) ProtoMessage()    {}
func (*ListTransferLogsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorDatatransfer, []int{15}
}

func (m *ListTransferLogsRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *ListTransferLogsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *ListTransferLogsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListTransferLogsRequest) GetMessageTypes() []TransferMessage_MessageSeverity {
	if m != nil {
		return m.MessageTypes
	}
	return nil
}

// The returned list transfer run messages.
type ListTransferLogsResponse struct {
	// Output only. The stored pipeline transfer messages.
	TransferMessages []*TransferMessage `protobuf:"bytes,1,rep,name=transfer_messages,json=transferMessages" json:"transfer_messages,omitempty"`
	// Output only. The next-pagination token. For multiple-page list results,
	// this token can be used as the
	// `GetTransferRunLogRequest.page_token`
	// to request the next page of list results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (m *ListTransferLogsResponse) Reset()         { *m = ListTransferLogsResponse{} }
func (m *ListTransferLogsResponse) String() string { return proto.CompactTextString(m) }
func (*ListTransferLogsResponse) ProtoMessage()    {}
func (*ListTransferLogsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorDatatransfer, []int{16}
}

func (m *ListTransferLogsResponse) GetTransferMessages() []*TransferMessage {
	if m != nil {
		return m.TransferMessages
	}
	return nil
}

func (m *ListTransferLogsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

// A request to determine whether the user has valid credentials. This method
// is used to limit the number of OAuth popups in the user interface. The
// user id is inferred from the API call context.
// If the data source has the Google+ authorization type, this method
// returns false, as it cannot be determined whether the credentials are
// already valid merely based on the user id.
type CheckValidCredsRequest struct {
	// The data source in the form:
	// `projects/{project_id}/dataSources/{data_source_id}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *CheckValidCredsRequest) Reset()         { *m = CheckValidCredsRequest{} }
func (m *CheckValidCredsRequest) String() string { return proto.CompactTextString(m) }
func (*CheckValidCredsRequest) ProtoMessage()    {}
func (*CheckValidCredsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorDatatransfer, []int{17}
}

func (m *CheckValidCredsRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// A response indicating whether the credentials exist and are valid.
type CheckValidCredsResponse struct {
	// If set to `true`, the credentials exist and are valid.
	HasValidCreds bool `protobuf:"varint,1,opt,name=has_valid_creds,json=hasValidCreds,proto3" json:"has_valid_creds,omitempty"`
}

func (m *CheckValidCredsResponse) Reset()         { *m = CheckValidCredsResponse{} }
func (m *CheckValidCredsResponse) String() string { return proto.CompactTextString(m) }
func (*CheckValidCredsResponse) ProtoMessage()    {}
func (*CheckValidCredsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorDatatransfer, []int{18}
}

func (m *CheckValidCredsResponse) GetHasValidCreds() bool {
	if m != nil {
		return m.HasValidCreds
	}
	return false
}

// A request to schedule transfer runs for a time range.
type ScheduleTransferRunsRequest struct {
	// Transfer configuration name in the form:
	// `projects/{project_id}/transferConfigs/{config_id}`.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Start time of the range of transfer runs. For example,
	// `"2017-05-25T00:00:00+00:00"`.
	StartTime *google_protobuf2.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	// End time of the range of transfer runs. For example,
	// `"2017-05-30T00:00:00+00:00"`.
	EndTime *google_protobuf2.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
}

func (m *ScheduleTransferRunsRequest) Reset()         { *m = ScheduleTransferRunsRequest{} }
func (m *ScheduleTransferRunsRequest) String() string { return proto.CompactTextString(m) }
func (*ScheduleTransferRunsRequest) ProtoMessage()    {}
func (*ScheduleTransferRunsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorDatatransfer, []int{19}
}

func (m *ScheduleTransferRunsRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *ScheduleTransferRunsRequest) GetStartTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *ScheduleTransferRunsRequest) GetEndTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

// A response to schedule transfer runs for a time range.
type ScheduleTransferRunsResponse struct {
	// The transfer runs that were scheduled.
	Runs []*TransferRun `protobuf:"bytes,1,rep,name=runs" json:"runs,omitempty"`
}

func (m *ScheduleTransferRunsResponse) Reset()         { *m = ScheduleTransferRunsResponse{} }
func (m *ScheduleTransferRunsResponse) String() string { return proto.CompactTextString(m) }
func (*ScheduleTransferRunsResponse) ProtoMessage()    {}
func (*ScheduleTransferRunsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorDatatransfer, []int{20}
}

func (m *ScheduleTransferRunsResponse) GetRuns() []*TransferRun {
	if m != nil {
		return m.Runs
	}
	return nil
}

func init() {
	proto.RegisterType((*DataSourceParameter)(nil), "google.cloud.bigquery.datatransfer.v1.DataSourceParameter")
	proto.RegisterType((*DataSource)(nil), "google.cloud.bigquery.datatransfer.v1.DataSource")
	proto.RegisterType((*GetDataSourceRequest)(nil), "google.cloud.bigquery.datatransfer.v1.GetDataSourceRequest")
	proto.RegisterType((*ListDataSourcesRequest)(nil), "google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest")
	proto.RegisterType((*ListDataSourcesResponse)(nil), "google.cloud.bigquery.datatransfer.v1.ListDataSourcesResponse")
	proto.RegisterType((*CreateTransferConfigRequest)(nil), "google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest")
	proto.RegisterType((*UpdateTransferConfigRequest)(nil), "google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest")
	proto.RegisterType((*GetTransferConfigRequest)(nil), "google.cloud.bigquery.datatransfer.v1.GetTransferConfigRequest")
	proto.RegisterType((*DeleteTransferConfigRequest)(nil), "google.cloud.bigquery.datatransfer.v1.DeleteTransferConfigRequest")
	proto.RegisterType((*GetTransferRunRequest)(nil), "google.cloud.bigquery.datatransfer.v1.GetTransferRunRequest")
	proto.RegisterType((*DeleteTransferRunRequest)(nil), "google.cloud.bigquery.datatransfer.v1.DeleteTransferRunRequest")
	proto.RegisterType((*ListTransferConfigsRequest)(nil), "google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest")
	proto.RegisterType((*ListTransferConfigsResponse)(nil), "google.cloud.bigquery.datatransfer.v1.ListTransferConfigsResponse")
	proto.RegisterType((*ListTransferRunsRequest)(nil), "google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest")
	proto.RegisterType((*ListTransferRunsResponse)(nil), "google.cloud.bigquery.datatransfer.v1.ListTransferRunsResponse")
	proto.RegisterType((*ListTransferLogsRequest)(nil), "google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest")
	proto.RegisterType((*ListTransferLogsResponse)(nil), "google.cloud.bigquery.datatransfer.v1.ListTransferLogsResponse")
	proto.RegisterType((*CheckValidCredsRequest)(nil), "google.cloud.bigquery.datatransfer.v1.CheckValidCredsRequest")
	proto.RegisterType((*CheckValidCredsResponse)(nil), "google.cloud.bigquery.datatransfer.v1.CheckValidCredsResponse")
	proto.RegisterType((*ScheduleTransferRunsRequest)(nil), "google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest")
	proto.RegisterType((*ScheduleTransferRunsResponse)(nil), "google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsResponse")
	proto.RegisterEnum("google.cloud.bigquery.datatransfer.v1.DataSourceParameter_Type", DataSourceParameter_Type_name, DataSourceParameter_Type_value)
	proto.RegisterEnum("google.cloud.bigquery.datatransfer.v1.DataSource_AuthorizationType", DataSource_AuthorizationType_name, DataSource_AuthorizationType_value)
	proto.RegisterEnum("google.cloud.bigquery.datatransfer.v1.DataSource_DataRefreshType", DataSource_DataRefreshType_name, DataSource_DataRefreshType_value)
	proto.RegisterEnum("google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest_RunAttempt", ListTransferRunsRequest_RunAttempt_name, ListTransferRunsRequest_RunAttempt_value)
}

func init() {
	proto.RegisterFile("google/cloud/bigquery/datatransfer/v1/datatransfer.proto", fileDescriptorDatatransfer)
}

var fileDescriptorDatatransfer = []byte{
	// 2203 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0x4f, 0x73, 0x1b, 0x49,
	0x15, 0x67, 0xfc, 0x5f, 0x4f, 0xb6, 0x24, 0x77, 0x1c, 0x67, 0x22, 0x67, 0x17, 0xef, 0x14, 0x49,
	0x79, 0x0d, 0x48, 0x58, 0xd9, 0x2c, 0xbb, 0xce, 0x6e, 0x52, 0xb2, 0x24, 0x3b, 0x02, 0xdb, 0xf2,
	0x8e, 0xe4, 0x04, 0xb6, 0x52, 0x0c, 0x1d, 0x4d, 0xdb, 0x9e, 0xcd, 0xfc, 0xcb, 0xf4, 0x8c, 0x13,
	0x87, 0xca, 0x85, 0x4f, 0x40, 0x15, 0x07, 0xa8, 0xe2, 0x03, 0x40, 0x71, 0x81, 0x23, 0x1f, 0x80,
	0xa2, 0x80, 0x2b, 0x07, 0xfe, 0x14, 0x05, 0x17, 0x8a, 0x2a, 0x2e, 0xf0, 0x05, 0x38, 0x50, 0xdd,
	0xd3, 0x23, 0x8d, 0xa4, 0xb1, 0x2d, 0xc9, 0x54, 0xed, 0x49, 0xd3, 0xfd, 0xde, 0xeb, 0x7e, 0xbf,
	0x7e, 0x7f, 0xfa, 0xd7, 0x82, 0x0f, 0x8e, 0x1d, 0xe7, 0xd8, 0x24, 0xc5, 0xb6, 0xe9, 0x04, 0x7a,
	0xf1, 0x99, 0x71, 0xfc, 0x22, 0x20, 0xde, 0x59, 0x51, 0xc7, 0x3e, 0xf6, 0x3d, 0x6c, 0xd3, 0x23,
	0xe2, 0x15, 0x4f, 0x37, 0x7a, 0xc6, 0x05, 0xd7, 0x73, 0x7c, 0x07, 0xdd, 0x0e, 0x2d, 0x0b, 0xdc,
	0xb2, 0x10, 0x59, 0x16, 0x7a, 0x34, 0x4f, 0x37, 0xf2, 0xb7, 0xc4, 0x06, 0xd8, 0x35, 0x8a, 0xd8,
	0xb6, 0x1d, 0x1f, 0xfb, 0x86, 0x63, 0xd3, 0x70, 0x91, 0xfc, 0x7b, 0xc3, 0x6d, 0xdf, 0xbb, 0x75,
	0xfe, 0x6d, 0x61, 0xc5, 0x47, 0xcf, 0x82, 0xa3, 0xa2, 0x1e, 0x78, 0x7c, 0x59, 0x21, 0x5f, 0xe9,
	0x97, 0x13, 0xcb, 0xf5, 0xcf, 0x84, 0x70, 0xb5, 0x5f, 0x78, 0x64, 0x10, 0x53, 0xd7, 0x2c, 0x4c,
	0x9f, 0x0b, 0x8d, 0x2f, 0xf6, 0x6b, 0xf8, 0x86, 0x45, 0xa8, 0x8f, 0x2d, 0xf7, 0xbc, 0xfd, 0x5f,
	0x7a, 0xd8, 0x75, 0x89, 0x27, 0x50, 0x29, 0x3f, 0x9b, 0x81, 0x6b, 0x55, 0xec, 0xe3, 0xa6, 0x13,
	0x78, 0x6d, 0x72, 0x80, 0x3d, 0x6c, 0x11, 0x9f, 0x78, 0xe8, 0x26, 0xcc, 0xb9, 0x6c, 0xa0, 0x19,
	0xba, 0x2c, 0xad, 0x4a, 0x6b, 0x29, 0x75, 0x96, 0x8f, 0xeb, 0x3a, 0x7a, 0x07, 0xe6, 0x75, 0x83,
	0xba, 0x26, 0x3e, 0xd3, 0x6c, 0x6c, 0x11, 0x79, 0x82, 0x8b, 0xd3, 0x62, 0x6e, 0x1f, 0x5b, 0x04,
	0xad, 0x42, 0x5a, 0x27, 0xb4, 0xed, 0x19, 0x2e, 0x83, 0x2a, 0x4f, 0x0a, 0x8d, 0xee, 0x14, 0x6a,
	0xc2, 0x94, 0x7f, 0xe6, 0x12, 0x79, 0x6a, 0x55, 0x5a, 0xcb, 0x94, 0x1e, 0x16, 0x86, 0x8a, 0x50,
	0x21, 0xc1, 0xd3, 0x42, 0xeb, 0xcc, 0x25, 0x2a, 0x5f, 0x0c, 0xe5, 0x61, 0xce, 0x23, 0x2f, 0x02,
	0xc3, 0x23, 0xba, 0x3c, 0xbd, 0x2a, 0xad, 0xcd, 0xa9, 0x9d, 0x71, 0x28, 0x73, 0x09, 0xf6, 0x89,
	0x2e, 0xcf, 0x44, 0xb2, 0x70, 0x8c, 0xde, 0x85, 0xdc, 0x29, 0x36, 0x0d, 0x9d, 0x07, 0x46, 0xf3,
	0xc8, 0x31, 0x79, 0x25, 0xcf, 0x72, 0x9f, 0xb3, 0xdd, 0x79, 0x95, 0x4d, 0xa3, 0xdb, 0x90, 0xc1,
	0xa6, 0xe9, 0xbc, 0x24, 0xba, 0x76, 0x8a, 0xcd, 0x80, 0x50, 0x79, 0x6e, 0x75, 0x72, 0x2d, 0xa5,
	0x2e, 0x88, 0xd9, 0xc7, 0x7c, 0x12, 0x7d, 0x08, 0x29, 0xcb, 0xb0, 0x43, 0x15, 0x39, 0xb5, 0x2a,
	0xad, 0xa5, 0x4b, 0xb7, 0x22, 0x8c, 0x51, 0x28, 0x0a, 0x55, 0x27, 0x78, 0x66, 0x12, 0x6e, 0xa1,
	0xce, 0x59, 0x86, 0xcd, 0xbf, 0xb8, 0x29, 0x7e, 0x25, 0x4c, 0x61, 0x28, 0x53, 0xfc, 0x2a, 0x34,
	0x55, 0x61, 0x86, 0x67, 0x08, 0x95, 0xd3, 0xab, 0x93, 0x6b, 0xe9, 0xd2, 0xe6, 0xf8, 0xc7, 0xaa,
	0x8a, 0x95, 0xd0, 0x3d, 0x58, 0x8e, 0x9d, 0x4d, 0x3c, 0xaa, 0xf3, 0xfc, 0x84, 0xae, 0x77, 0xa5,
	0xd5, 0x58, 0x7c, 0x0b, 0x70, 0x2d, 0x66, 0x76, 0x42, 0x4c, 0x57, 0x0b, 0x3c, 0x53, 0x5e, 0xe0,
	0x36, 0x8b, 0x5d, 0xd1, 0x23, 0x62, 0xba, 0x87, 0x9e, 0x89, 0x6e, 0x41, 0xca, 0xb0, 0xac, 0xc0,
	0xc7, 0xcf, 0x4c, 0x22, 0x67, 0x78, 0x7c, 0xba, 0x13, 0x48, 0x86, 0x59, 0x8f, 0xb4, 0x03, 0x8f,
	0x12, 0x39, 0xcb, 0x65, 0xd1, 0x50, 0x31, 0x60, 0x8a, 0x25, 0x00, 0x5a, 0x82, 0x5c, 0xeb, 0xdb,
	0x07, 0x35, 0xed, 0x70, 0xbf, 0x79, 0x50, 0xab, 0xd4, 0xb7, 0xeb, 0xb5, 0x6a, 0xee, 0x0b, 0x08,
	0x60, 0xa6, 0xd9, 0x52, 0xeb, 0xfb, 0x3b, 0x39, 0x09, 0xa5, 0x61, 0xb6, 0xbe, 0xdf, 0xaa, 0xed,
	0xd4, 0xd4, 0xdc, 0x04, 0x13, 0x54, 0x1b, 0x87, 0x5b, 0xbb, 0xb5, 0xdc, 0x24, 0x13, 0x6c, 0x35,
	0x1a, 0xbb, 0xb5, 0xf2, 0x7e, 0x6e, 0x8a, 0x09, 0xd4, 0x5a, 0xa5, 0xa1, 0x56, 0x73, 0xd3, 0x68,
	0x01, 0x52, 0x07, 0xbb, 0x87, 0x4d, 0xed, 0xa0, 0xbc, 0x53, 0xcb, 0xcd, 0x28, 0xff, 0x4d, 0x01,
	0x74, 0x4f, 0x0a, 0x21, 0x98, 0xe2, 0xe9, 0x1f, 0x56, 0x07, 0xff, 0x46, 0x5f, 0x82, 0x0c, 0x3b,
	0x5b, 0x8d, 0x72, 0x15, 0x56, 0x3b, 0x61, 0x71, 0xcc, 0xeb, 0x1d, 0xbb, 0x84, 0x02, 0x9a, 0xbc,
	0xb4, 0x80, 0xa6, 0x06, 0x0b, 0x68, 0x05, 0x52, 0x6d, 0xd3, 0x20, 0xb6, 0xcf, 0x76, 0x99, 0xe6,
	0xf2, 0xb9, 0x70, 0xa2, 0xae, 0xa3, 0x65, 0x98, 0xa1, 0x6d, 0xc7, 0x25, 0x54, 0x9e, 0xe1, 0xd9,
	0x29, 0x46, 0xe8, 0x5b, 0xb0, 0x10, 0xc5, 0x5d, 0xe3, 0xe5, 0x37, 0xcb, 0xcb, 0xef, 0xee, 0x90,
	0x79, 0xd2, 0x12, 0xdf, 0xbc, 0xe4, 0xe6, 0xfd, 0xd8, 0x08, 0x3d, 0x80, 0x15, 0x1a, 0xb8, 0xae,
	0xe3, 0xf9, 0x54, 0xb3, 0x02, 0xd3, 0x37, 0x5c, 0x93, 0x68, 0x91, 0x06, 0x2b, 0x12, 0x16, 0xb5,
	0x9b, 0x91, 0xca, 0x9e, 0xd0, 0x88, 0x16, 0xa4, 0xe8, 0x7d, 0xb8, 0x11, 0xb8, 0x3a, 0xf6, 0x89,
	0xa6, 0x13, 0xac, 0x9b, 0x86, 0x4d, 0x34, 0x4a, 0xda, 0x8e, 0xad, 0x53, 0x5e, 0x3e, 0xd3, 0xea,
	0xf5, 0x50, 0x5c, 0x15, 0xd2, 0x66, 0x28, 0x64, 0xa5, 0xab, 0x93, 0x23, 0x1c, 0x98, 0xbe, 0x46,
	0xdb, 0x27, 0x44, 0x0f, 0xcc, 0xb0, 0x68, 0x52, 0x6a, 0x56, 0xcc, 0x37, 0xc5, 0x34, 0xfa, 0x00,
	0xe4, 0x8e, 0x8b, 0xed, 0x80, 0xfa, 0x8e, 0xd5, 0x35, 0x49, 0x73, 0xff, 0x96, 0x23, 0x79, 0x85,
	0x8b, 0x3b, 0x96, 0x9f, 0x02, 0xb8, 0x51, 0x61, 0x50, 0x79, 0xfe, 0xca, 0xb5, 0x15, 0x5b, 0x8d,
	0x35, 0xda, 0xbe, 0xea, 0x98, 0x3d, 0x11, 0x35, 0xe1, 0x01, 0xc2, 0x81, 0x7f, 0xe2, 0x78, 0xc6,
	0xeb, 0xb0, 0x8c, 0x78, 0xc8, 0x32, 0x3c, 0x64, 0x95, 0x91, 0xb7, 0x2f, 0x94, 0xe3, 0x6b, 0xf1,
	0x10, 0x2e, 0xe2, 0xfe, 0x29, 0x64, 0xc1, 0x22, 0xcf, 0x60, 0x8f, 0x1c, 0x79, 0x84, 0x9e, 0x84,
	0x5b, 0x66, 0xf9, 0x96, 0xe5, 0xd1, 0xb7, 0x64, 0x9f, 0x6a, 0xb8, 0x12, 0xdf, 0x30, 0xab, 0xf7,
	0x4e, 0xa0, 0x6d, 0x58, 0x8d, 0xc2, 0xd7, 0xb3, 0xed, 0x4b, 0xc3, 0xd6, 0x9d, 0x97, 0x9a, 0x8e,
	0xcf, 0xa8, 0x9c, 0xe3, 0xf1, 0xbf, 0x25, 0xf4, 0x62, 0x4b, 0x3e, 0xe1, 0x4a, 0x55, 0x7c, 0x46,
	0xd1, 0xd7, 0x60, 0xc9, 0xc2, 0x76, 0x80, 0x4d, 0xcd, 0x0b, 0x6c, 0xaa, 0xe9, 0x06, 0x65, 0x7d,
	0x43, 0x97, 0x17, 0x79, 0x5c, 0x51, 0x28, 0x53, 0x03, 0x9b, 0x56, 0x85, 0x04, 0x1d, 0xc2, 0x4d,
	0xcb, 0xb0, 0x0d, 0x2b, 0xe8, 0x66, 0x81, 0x66, 0xd8, 0x3e, 0xf1, 0x4e, 0xb1, 0x29, 0x23, 0xde,
	0x76, 0x6f, 0x0e, 0xb6, 0x5d, 0x71, 0x79, 0xab, 0x37, 0x84, 0x6d, 0x94, 0x22, 0x75, 0x61, 0xa9,
	0x50, 0x58, 0x1c, 0x38, 0x67, 0xa4, 0xc0, 0xdb, 0xe5, 0xc3, 0xd6, 0xa3, 0x86, 0x5a, 0xff, 0xb4,
	0xdc, 0xaa, 0x37, 0xf6, 0xb5, 0x84, 0x56, 0xb5, 0x0c, 0xa8, 0x57, 0xa7, 0xd2, 0xa8, 0xd6, 0x72,
	0x12, 0xb3, 0xdd, 0x69, 0x34, 0x76, 0x76, 0x6b, 0x1a, 0xef, 0x45, 0x09, 0x3a, 0x13, 0x4a, 0x1b,
	0xb2, 0x7d, 0x27, 0x8d, 0xde, 0x81, 0xb7, 0xaa, 0xe5, 0x56, 0x59, 0x53, 0x6b, 0xdb, 0x6a, 0xad,
	0xf9, 0x28, 0x69, 0x47, 0x04, 0x99, 0xe6, 0x6e, 0xbd, 0x5a, 0xdf, 0xdf, 0xd1, 0x9e, 0xd4, 0xf7,
	0xab, 0x8d, 0x27, 0x39, 0x09, 0xdd, 0x84, 0xeb, 0x95, 0xc3, 0x66, 0xab, 0xb1, 0xa7, 0xf5, 0x89,
	0x26, 0x94, 0x75, 0x58, 0xda, 0x21, 0x7e, 0x37, 0xb8, 0x2a, 0x79, 0x11, 0x10, 0xea, 0x27, 0xf5,
	0x41, 0xc5, 0x84, 0xe5, 0x5d, 0x83, 0xc6, 0x94, 0x69, 0xa4, 0xbd, 0x0c, 0x33, 0x2e, 0xf6, 0x88,
	0xed, 0x0b, 0x7d, 0x31, 0x42, 0x6f, 0xb1, 0x12, 0x3b, 0x26, 0x9a, 0xef, 0x3c, 0x27, 0x11, 0x61,
	0x48, 0xb1, 0x99, 0x16, 0x9b, 0x60, 0xdd, 0x8e, 0x8b, 0xa9, 0xf1, 0x3a, 0xe4, 0x0c, 0xd3, 0xea,
	0x1c, 0x9b, 0x68, 0x1a, 0xaf, 0x89, 0xf2, 0x23, 0x09, 0x6e, 0x0c, 0x6c, 0x47, 0x5d, 0xc7, 0xa6,
	0x04, 0xb5, 0x60, 0x3e, 0xd6, 0x91, 0xa9, 0x2c, 0xf1, 0xe2, 0xdd, 0x18, 0x39, 0x95, 0xd5, 0x74,
	0xb7, 0x85, 0x53, 0x74, 0x07, 0xb2, 0x36, 0x79, 0xe5, 0x6b, 0x31, 0x97, 0xc3, 0x46, 0xbf, 0xc0,
	0xa6, 0x0f, 0x22, 0xb7, 0x95, 0x5f, 0x4b, 0xb0, 0x52, 0xf1, 0x18, 0xc9, 0x88, 0x3a, 0x5d, 0xc5,
	0xb1, 0x8f, 0x8c, 0xe3, 0xcb, 0x4e, 0xe3, 0x3b, 0x90, 0xed, 0xf4, 0xe9, 0x36, 0xb7, 0xe0, 0xeb,
	0xa7, 0x4b, 0xf7, 0x46, 0xec, 0xd4, 0x62, 0xbb, 0x8c, 0xdf, 0x33, 0x46, 0x5f, 0xed, 0xef, 0x2c,
	0x6d, 0x47, 0x8f, 0xee, 0xa1, 0xde, 0xa6, 0x50, 0x71, 0x74, 0xa2, 0xfc, 0x4b, 0x82, 0x95, 0x43,
	0xde, 0x7e, 0x93, 0x61, 0x24, 0xb8, 0x2b, 0x7d, 0x7e, 0xee, 0xa2, 0xfb, 0x90, 0x16, 0x77, 0x09,
	0x63, 0xca, 0x3c, 0x5d, 0xd2, 0xa5, 0xfc, 0x40, 0x31, 0x6f, 0x33, 0x82, 0xb3, 0x87, 0xe9, 0x73,
	0x15, 0x42, 0x75, 0xf6, 0xad, 0x14, 0x40, 0xde, 0x21, 0x7e, 0x32, 0xce, 0xa4, 0x54, 0xdf, 0x80,
	0x95, 0x2a, 0x31, 0xc9, 0x79, 0x47, 0x93, 0x64, 0xf2, 0x65, 0xb8, 0x1e, 0xdb, 0x42, 0x0d, 0xec,
	0x8b, 0x94, 0x0b, 0x20, 0xf7, 0xae, 0x7f, 0x89, 0xfe, 0x8f, 0x25, 0xc8, 0xb3, 0x62, 0xe8, 0x75,
	0xe7, 0xd2, 0xfa, 0xbb, 0x03, 0xd9, 0x5e, 0xe6, 0x42, 0xe5, 0x89, 0x90, 0xd8, 0xc6, 0xa9, 0x0b,
	0xbd, 0x52, 0x9d, 0xfe, 0x54, 0x82, 0x95, 0x44, 0xd7, 0x44, 0xad, 0x7e, 0x17, 0x72, 0x7d, 0x69,
	0x14, 0xd5, 0xeb, 0x98, 0x79, 0x94, 0xed, 0xcd, 0xa3, 0xe1, 0xeb, 0xf6, 0x6f, 0x13, 0x61, 0x47,
	0x89, 0x9d, 0xf9, 0xa5, 0x27, 0xb8, 0x0b, 0x33, 0xd4, 0xc7, 0x3e, 0x09, 0x0f, 0x2e, 0x53, 0x7a,
	0x6f, 0x44, 0x9f, 0x9b, 0xcc, 0x58, 0x15, 0x6b, 0x5c, 0xe5, 0x9c, 0xd1, 0x67, 0x90, 0xf6, 0x02,
	0x5b, 0xc3, 0xbe, 0xcf, 0x1e, 0x93, 0x9c, 0x1c, 0x66, 0x4a, 0xf5, 0x21, 0xdd, 0x39, 0x07, 0x76,
	0x41, 0x0d, 0xec, 0x72, 0xb8, 0xa0, 0x0a, 0x5e, 0xe7, 0x5b, 0xb9, 0x07, 0xd0, 0x95, 0xa0, 0x15,
	0xb8, 0xa1, 0x1e, 0xee, 0x6b, 0xe5, 0x56, 0xab, 0xb6, 0x77, 0xd0, 0x1a, 0x24, 0xe3, 0xbb, 0xe5,
	0x56, 0xad, 0xd9, 0xca, 0x49, 0xca, 0x4f, 0x24, 0x90, 0x07, 0x77, 0x12, 0x79, 0xf0, 0x24, 0xc6,
	0x52, 0xd9, 0x75, 0x2e, 0x92, 0xa0, 0x34, 0xe2, 0x81, 0xb2, 0x42, 0xe9, 0x90, 0x54, 0xb6, 0xc1,
	0xd0, 0xe1, 0xff, 0x8b, 0xd4, 0x1b, 0xfe, 0x5d, 0xe7, 0x78, 0xc4, 0x0b, 0x6c, 0xea, 0xc2, 0x80,
	0x4d, 0xf7, 0x05, 0xec, 0x39, 0x2c, 0x58, 0x84, 0x52, 0x6e, 0x7e, 0x16, 0xb1, 0xf6, 0x4c, 0x69,
	0x7b, 0x44, 0xc0, 0x7b, 0xe1, 0x1a, 0x05, 0xf1, 0xdb, 0x24, 0xa7, 0xc4, 0x33, 0xfc, 0x33, 0x75,
	0x5e, 0x2c, 0xce, 0x88, 0x01, 0x65, 0x55, 0x28, 0x0f, 0x82, 0x13, 0x47, 0xdf, 0x86, 0xc5, 0xce,
	0xd1, 0x0b, 0xab, 0xe8, 0xf8, 0xdf, 0x1f, 0xcf, 0x1b, 0xb5, 0x53, 0xd3, 0x62, 0x62, 0xf8, 0x30,
	0x7c, 0x05, 0x96, 0x2b, 0x27, 0xa4, 0xfd, 0xfc, 0x31, 0x7b, 0x2d, 0x56, 0x3c, 0xa2, 0xd3, 0x8b,
	0x1a, 0x5f, 0x19, 0x6e, 0x0c, 0x68, 0x0b, 0x54, 0x77, 0x20, 0x7b, 0x82, 0xa9, 0xc6, 0x5f, 0x9d,
	0x5a, 0x9b, 0x89, 0xb8, 0xe5, 0x9c, 0xba, 0x70, 0x82, 0x69, 0x57, 0x9f, 0x37, 0xa8, 0x88, 0xd1,
	0x8d, 0x52, 0xfa, 0x1f, 0x02, 0x50, 0x1f, 0x7b, 0xbe, 0xe6, 0x1b, 0xe2, 0xff, 0x90, 0xa4, 0xfb,
	0xa6, 0x15, 0xfd, 0x35, 0xa3, 0xa6, 0xb8, 0x36, 0x1b, 0xa3, 0x7b, 0x30, 0x47, 0x6c, 0x3d, 0x34,
	0x9c, 0xbc, 0xd4, 0x70, 0x96, 0xd8, 0x3a, 0x1b, 0x29, 0x47, 0x70, 0x2b, 0xd9, 0x51, 0x81, 0x78,
	0x1b, 0xa6, 0xae, 0x58, 0x39, 0xdc, 0xbe, 0xf4, 0xa7, 0xeb, 0xe1, 0xdf, 0x43, 0x9d, 0x26, 0x45,
	0xbc, 0x53, 0xa3, 0x4d, 0xd0, 0xaf, 0x24, 0x58, 0xe8, 0x61, 0x83, 0xe8, 0xfe, 0x90, 0x7b, 0x24,
	0x71, 0xc8, 0xfc, 0xe8, 0x7c, 0x4c, 0xf9, 0xfa, 0xf7, 0xff, 0xf0, 0x8f, 0x1f, 0x4e, 0x6c, 0xa0,
	0x62, 0xf1, 0x74, 0xa3, 0xf8, 0x3d, 0x96, 0x01, 0x1f, 0xbb, 0x9e, 0xf3, 0x19, 0x69, 0xfb, 0xb4,
	0xb8, 0x5e, 0x34, 0x9d, 0x76, 0xf8, 0xe7, 0x5d, 0x71, 0xbd, 0x18, 0x23, 0x6e, 0xc5, 0xf5, 0x37,
	0xe8, 0x77, 0x12, 0x64, 0xfb, 0xd8, 0x22, 0xfa, 0x78, 0x84, 0xe6, 0x38, 0x48, 0x6a, 0xf3, 0x0f,
	0xc6, 0x35, 0x0f, 0xa3, 0xd5, 0x87, 0x25, 0x4c, 0xaa, 0x73, 0xd0, 0xbc, 0x89, 0xc3, 0x41, 0x7f,
	0x97, 0x60, 0x29, 0x89, 0x5f, 0xa2, 0xad, 0x21, 0x3d, 0xba, 0x80, 0x9c, 0xe6, 0xc7, 0xbb, 0x74,
	0x95, 0x5d, 0x0e, 0x66, 0x5b, 0xb9, 0x3b, 0x0c, 0x98, 0xbe, 0x0b, 0x7a, 0xb3, 0x9f, 0x47, 0xa2,
	0xff, 0x48, 0xb0, 0x94, 0x44, 0x3d, 0x87, 0x46, 0x78, 0x01, 0x6f, 0x1d, 0x17, 0xe1, 0x53, 0x8e,
	0xf0, 0x71, 0xa9, 0xc2, 0x11, 0xf6, 0x79, 0x5c, 0xb8, 0x28, 0x15, 0xfb, 0xe0, 0x16, 0xd7, 0xdf,
	0x0c, 0x22, 0xfe, 0x85, 0x04, 0x4b, 0x49, 0x8c, 0x72, 0x68, 0xc4, 0x17, 0xd0, 0xd1, 0xfc, 0xf2,
	0x40, 0x73, 0xa9, 0x59, 0xae, 0x7f, 0xa6, 0xdc, 0xe7, 0x90, 0xee, 0xad, 0xdf, 0xbd, 0xb4, 0x9a,
	0x06, 0x21, 0xa0, 0xdf, 0x4a, 0xb0, 0x38, 0xc0, 0x99, 0xd1, 0xc3, 0xe1, 0x1b, 0xc2, 0xff, 0x35,
	0x3a, 0x02, 0x0a, 0x1a, 0x0b, 0xca, 0x9f, 0x25, 0xb8, 0x96, 0x40, 0x51, 0x51, 0x79, 0x0c, 0xf6,
	0xd4, 0xcb, 0xbc, 0xf3, 0x5b, 0x57, 0x59, 0x42, 0x34, 0x8a, 0x5e, 0x6c, 0xa3, 0xd5, 0x16, 0xfa,
	0xb7, 0x04, 0x4b, 0x49, 0x97, 0xc6, 0xd0, 0x89, 0x75, 0xc1, 0xd5, 0x98, 0xaf, 0x5c, 0x69, 0x0d,
	0x01, 0x6f, 0x8f, 0xc3, 0xdb, 0x51, 0xb6, 0x2e, 0x87, 0x97, 0x54, 0x4a, 0xd1, 0xff, 0x38, 0x6c,
	0xcd, 0x4d, 0x69, 0x1d, 0xfd, 0x46, 0x82, 0x4c, 0xef, 0x43, 0x0b, 0x7d, 0x34, 0x7a, 0x52, 0x76,
	0xdf, 0x5b, 0xf9, 0x31, 0xee, 0x51, 0x65, 0x8b, 0x63, 0xfa, 0x08, 0x6d, 0x8e, 0x9e, 0x8e, 0x45,
	0x76, 0x05, 0xb3, 0xac, 0xfc, 0xa5, 0x04, 0x8b, 0x03, 0x8f, 0xc0, 0xa1, 0x0b, 0xec, 0xbc, 0xe7,
	0xe3, 0xb9, 0xcd, 0x40, 0xb8, 0xbc, 0x7e, 0x15, 0x97, 0xff, 0x28, 0x41, 0xae, 0x9f, 0xe0, 0xa3,
	0x07, 0x57, 0x7b, 0x83, 0xe4, 0x1f, 0x8e, 0x6d, 0x2f, 0x12, 0xac, 0x37, 0x18, 0xa3, 0x26, 0x18,
	0x07, 0x87, 0xfe, 0xd9, 0x87, 0x8c, 0xf1, 0xe7, 0xb1, 0x90, 0xc5, 0x5e, 0x15, 0x63, 0x21, 0x8b,
	0x13, 0x77, 0xe5, 0x13, 0x8e, 0xec, 0x9b, 0xa8, 0x3e, 0x0e, 0xb2, 0x28, 0x6a, 0x1d, 0x09, 0xc7,
	0xf4, 0x57, 0x09, 0xb2, 0x7d, 0x8c, 0x7a, 0x68, 0xa2, 0x94, 0xcc, 0xdb, 0x87, 0x26, 0x4a, 0xe7,
	0x10, 0x79, 0xe5, 0x1b, 0x1c, 0x65, 0x55, 0x79, 0x38, 0x22, 0xe9, 0xdb, 0x6c, 0xf7, 0x2e, 0xb8,
	0x29, 0xad, 0x6f, 0xfd, 0x40, 0x82, 0x77, 0xdb, 0x8e, 0x35, 0x9c, 0x47, 0x5b, 0x8b, 0x71, 0x16,
	0x7c, 0xc0, 0xea, 0xe5, 0x40, 0xfa, 0xf9, 0xc4, 0xed, 0x9d, 0xd0, 0xb8, 0xc2, 0x8d, 0xb7, 0x8c,
	0xe3, 0x4f, 0xb8, 0x71, 0x5c, 0xb7, 0xf0, 0x78, 0xe3, 0xf7, 0x91, 0xde, 0x53, 0xae, 0xf7, 0x34,
	0xd2, 0x7b, 0x1a, 0xd7, 0x7b, 0xfa, 0x78, 0xe3, 0xd9, 0x0c, 0x2f, 0xc4, 0xbb, 0xff, 0x0b, 0x00,
	0x00, 0xff, 0xff, 0x87, 0xc8, 0x49, 0x05, 0xea, 0x1e, 0x00, 0x00,
}
