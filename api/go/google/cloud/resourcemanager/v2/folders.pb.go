// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/cloud/resourcemanager/v2/folders.proto

package google_cloud_resourcemanager_v2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "go.pedge.io/pb/go/google/api"
import _ "go.pedge.io/pb/go/google/iam/v1"
import _ "go.pedge.io/pb/go/google/iam/v1"
import _ "go.pedge.io/pb/go/google/longrunning"
import google_protobuf3 "go.pedge.io/pb/go/google/protobuf"
import google_protobuf4 "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Folder lifecycle states.
type Folder_LifecycleState int32

const (
	// Unspecified state.
	Folder_LIFECYCLE_STATE_UNSPECIFIED Folder_LifecycleState = 0
	// The normal and active state.
	Folder_ACTIVE Folder_LifecycleState = 1
	// The folder has been marked for deletion by the user.
	Folder_DELETE_REQUESTED Folder_LifecycleState = 2
)

var Folder_LifecycleState_name = map[int32]string{
	0: "LIFECYCLE_STATE_UNSPECIFIED",
	1: "ACTIVE",
	2: "DELETE_REQUESTED",
}
var Folder_LifecycleState_value = map[string]int32{
	"LIFECYCLE_STATE_UNSPECIFIED": 0,
	"ACTIVE":                      1,
	"DELETE_REQUESTED":            2,
}

func (x Folder_LifecycleState) String() string {
	return proto.EnumName(Folder_LifecycleState_name, int32(x))
}
func (Folder_LifecycleState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

// The type of operation that failed.
type FolderOperation_OperationType int32

const (
	// Operation type not specified.
	FolderOperation_OPERATION_TYPE_UNSPECIFIED FolderOperation_OperationType = 0
	// A create folder operation.
	FolderOperation_CREATE FolderOperation_OperationType = 1
	// A move folder operation.
	FolderOperation_MOVE FolderOperation_OperationType = 2
)

var FolderOperation_OperationType_name = map[int32]string{
	0: "OPERATION_TYPE_UNSPECIFIED",
	1: "CREATE",
	2: "MOVE",
}
var FolderOperation_OperationType_value = map[string]int32{
	"OPERATION_TYPE_UNSPECIFIED": 0,
	"CREATE":                     1,
	"MOVE":                       2,
}

func (x FolderOperation_OperationType) String() string {
	return proto.EnumName(FolderOperation_OperationType_name, int32(x))
}
func (FolderOperation_OperationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11, 0}
}

// A Folder in an Organization's resource hierarchy, used to
// organize that Organization's resources.
type Folder struct {
	// Output only. The resource name of the Folder.
	// Its format is `folders/{folder_id}`, for example: "folders/1234".
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The Folder’s parent's resource name.
	// Updates to the folder's parent must be performed via [MoveFolders].
	Parent string `protobuf:"bytes,2,opt,name=parent" json:"parent,omitempty"`
	// The folder’s display name.
	// A folder’s display name must be unique amongst its siblings, e.g.
	// no two folders with the same parent can share the same display name.
	// The display name must start and end with a letter or digit, may contain
	// letters, digits, spaces, hyphens and underscores and can be no longer
	// than 30 characters. This is captured by the regular expression:
	// [\p{L}\p{N}]({\p{L}\p{N}_- ]{0,28}[\p{L}\p{N}])?.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	// Output only.  The lifecycle state of the folder.
	// Updates to the lifecycle_state must be performed via
	// [DeleteFolder] and [UndeleteFolder].
	LifecycleState Folder_LifecycleState `protobuf:"varint,4,opt,name=lifecycle_state,json=lifecycleState,enum=google.cloud.resourcemanager.v2.Folder_LifecycleState" json:"lifecycle_state,omitempty"`
	// Output only. Timestamp when the Folder was created. Assigned by the server.
	CreateTime *google_protobuf4.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	// Output only. Timestamp when the Folder was last modified.
	UpdateTime *google_protobuf4.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
}

func (m *Folder) Reset()                    { *m = Folder{} }
func (m *Folder) String() string            { return proto.CompactTextString(m) }
func (*Folder) ProtoMessage()               {}
func (*Folder) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Folder) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Folder) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *Folder) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Folder) GetLifecycleState() Folder_LifecycleState {
	if m != nil {
		return m.LifecycleState
	}
	return Folder_LIFECYCLE_STATE_UNSPECIFIED
}

func (m *Folder) GetCreateTime() *google_protobuf4.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *Folder) GetUpdateTime() *google_protobuf4.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

// The ListFolders request message.
type ListFoldersRequest struct {
	// The resource name of the Organization or Folder whose Folders are
	// being listed.
	// Must be of the form `folders/{folder_id}` or `organizations/{org_id}`.
	// Access to this method is controlled by checking the
	// `resourcemanager.folders.list` permission on the `parent`.
	Parent string `protobuf:"bytes,1,opt,name=parent" json:"parent,omitempty"`
	// The maximum number of Folders to return in the response.
	// This field is optional.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	// A pagination token returned from a previous call to `ListFolders`
	// that indicates where this listing should continue from.
	// This field is optional.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken" json:"page_token,omitempty"`
	// Controls whether Folders in the [DELETE_REQUESTED} state should
	// be returned.
	ShowDeleted bool `protobuf:"varint,4,opt,name=show_deleted,json=showDeleted" json:"show_deleted,omitempty"`
}

func (m *ListFoldersRequest) Reset()                    { *m = ListFoldersRequest{} }
func (m *ListFoldersRequest) String() string            { return proto.CompactTextString(m) }
func (*ListFoldersRequest) ProtoMessage()               {}
func (*ListFoldersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ListFoldersRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *ListFoldersRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListFoldersRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *ListFoldersRequest) GetShowDeleted() bool {
	if m != nil {
		return m.ShowDeleted
	}
	return false
}

// The ListFolders response message.
type ListFoldersResponse struct {
	// A possibly paginated list of Folders that are direct descendants of
	// the specified parent resource.
	Folders []*Folder `protobuf:"bytes,1,rep,name=folders" json:"folders,omitempty"`
	// A pagination token returned from a previous call to `ListFolders`
	// that indicates from where listing should continue.
	// This field is optional.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty"`
}

func (m *ListFoldersResponse) Reset()                    { *m = ListFoldersResponse{} }
func (m *ListFoldersResponse) String() string            { return proto.CompactTextString(m) }
func (*ListFoldersResponse) ProtoMessage()               {}
func (*ListFoldersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ListFoldersResponse) GetFolders() []*Folder {
	if m != nil {
		return m.Folders
	}
	return nil
}

func (m *ListFoldersResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

// The request message for searching folders.
type SearchFoldersRequest struct {
	// The maximum number of folders to return in the response.
	// This field is optional.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	// A pagination token returned from a previous call to `SearchFolders`
	// that indicates from where search should continue.
	// This field is optional.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken" json:"page_token,omitempty"`
	// Search criteria used to select the Folders to return.
	// If no search criteria is specified then all accessible folders will be
	// returned.
	//
	// Query expressions can be used to restrict results based upon displayName,
	// lifecycleState and parent, where the operators `=`, `NOT`, `AND` and `OR`
	// can be used along with the suffix wildcard symbol `*`.
	//
	// Some example queries are:
	// |Query|Description|
	// |------|-----------|
	// |displayName=Test*|Folders whose display name starts with "Test".|
	// |lifecycleState=ACTIVE|Folders whose lifecycleState is ACTIVE.|
	// |parent=folders/123|Folders whose parent is "folders/123".|
	// |parent=folders/123 AND lifecycleState=ACTIVE|Active folders whose
	// parent is "folders/123".|
	Query string `protobuf:"bytes,3,opt,name=query" json:"query,omitempty"`
}

func (m *SearchFoldersRequest) Reset()                    { *m = SearchFoldersRequest{} }
func (m *SearchFoldersRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchFoldersRequest) ProtoMessage()               {}
func (*SearchFoldersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SearchFoldersRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *SearchFoldersRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *SearchFoldersRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

// The response message for searching folders.
type SearchFoldersResponse struct {
	// A possibly paginated folder search results.
	// the specified parent resource.
	Folders []*Folder `protobuf:"bytes,1,rep,name=folders" json:"folders,omitempty"`
	// A pagination token returned from a previous call to `SearchFolders`
	// that indicates from where searching should continue.
	// This field is optional.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty"`
}

func (m *SearchFoldersResponse) Reset()                    { *m = SearchFoldersResponse{} }
func (m *SearchFoldersResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchFoldersResponse) ProtoMessage()               {}
func (*SearchFoldersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SearchFoldersResponse) GetFolders() []*Folder {
	if m != nil {
		return m.Folders
	}
	return nil
}

func (m *SearchFoldersResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

// The GetFolder request message.
type GetFolderRequest struct {
	// The resource name of the Folder to retrieve.
	// Must be of the form `folders/{folder_id}`.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *GetFolderRequest) Reset()                    { *m = GetFolderRequest{} }
func (m *GetFolderRequest) String() string            { return proto.CompactTextString(m) }
func (*GetFolderRequest) ProtoMessage()               {}
func (*GetFolderRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetFolderRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The CreateFolder request message.
type CreateFolderRequest struct {
	// The resource name of the new Folder's parent.
	// Must be of the form `folders/{folder_id}` or `organizations/{org_id}`.
	Parent string `protobuf:"bytes,1,opt,name=parent" json:"parent,omitempty"`
	// The Folder being created, only the display name will be consulted.
	// All other fields will be ignored.
	Folder *Folder `protobuf:"bytes,2,opt,name=folder" json:"folder,omitempty"`
}

func (m *CreateFolderRequest) Reset()                    { *m = CreateFolderRequest{} }
func (m *CreateFolderRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateFolderRequest) ProtoMessage()               {}
func (*CreateFolderRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CreateFolderRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *CreateFolderRequest) GetFolder() *Folder {
	if m != nil {
		return m.Folder
	}
	return nil
}

// The MoveFolder request message.
type MoveFolderRequest struct {
	// The resource name of the Folder to move.
	// Must be of the form folders/{folder_id}
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The resource name of the Folder or Organization to reparent
	// the folder under.
	// Must be of the form `folders/{folder_id}` or `organizations/{org_id}`.
	DestinationParent string `protobuf:"bytes,2,opt,name=destination_parent,json=destinationParent" json:"destination_parent,omitempty"`
}

func (m *MoveFolderRequest) Reset()                    { *m = MoveFolderRequest{} }
func (m *MoveFolderRequest) String() string            { return proto.CompactTextString(m) }
func (*MoveFolderRequest) ProtoMessage()               {}
func (*MoveFolderRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *MoveFolderRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MoveFolderRequest) GetDestinationParent() string {
	if m != nil {
		return m.DestinationParent
	}
	return ""
}

// The request message for updating a folder's display name.
type UpdateFolderRequest struct {
	// The new definition of the Folder. It must include a
	// a `name` and `display_name` field. The other fields
	// will be ignored.
	Folder *Folder `protobuf:"bytes,1,opt,name=folder" json:"folder,omitempty"`
	// Fields to be updated.
	// Only the `display_name` can be updated.
	UpdateMask *google_protobuf3.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask" json:"update_mask,omitempty"`
}

func (m *UpdateFolderRequest) Reset()                    { *m = UpdateFolderRequest{} }
func (m *UpdateFolderRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateFolderRequest) ProtoMessage()               {}
func (*UpdateFolderRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *UpdateFolderRequest) GetFolder() *Folder {
	if m != nil {
		return m.Folder
	}
	return nil
}

func (m *UpdateFolderRequest) GetUpdateMask() *google_protobuf3.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

// The DeleteFolder request message.
type DeleteFolderRequest struct {
	// the resource name of the Folder to be deleted.
	// Must be of the form `folders/{folder_id}`.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Instructs DeleteFolderAction to delete a folder even when the folder is not
	// empty.
	RecursiveDelete bool `protobuf:"varint,2,opt,name=recursive_delete,json=recursiveDelete" json:"recursive_delete,omitempty"`
}

func (m *DeleteFolderRequest) Reset()                    { *m = DeleteFolderRequest{} }
func (m *DeleteFolderRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteFolderRequest) ProtoMessage()               {}
func (*DeleteFolderRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *DeleteFolderRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeleteFolderRequest) GetRecursiveDelete() bool {
	if m != nil {
		return m.RecursiveDelete
	}
	return false
}

// The UndeleteFolder request message.
type UndeleteFolderRequest struct {
	// The resource name of the Folder to undelete.
	// Must be of the form `folders/{folder_id}`.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *UndeleteFolderRequest) Reset()                    { *m = UndeleteFolderRequest{} }
func (m *UndeleteFolderRequest) String() string            { return proto.CompactTextString(m) }
func (*UndeleteFolderRequest) ProtoMessage()               {}
func (*UndeleteFolderRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *UndeleteFolderRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Metadata describing a long running folder operation
type FolderOperation struct {
	// The display name of the folder.
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	// The type of this operation.
	OperationType FolderOperation_OperationType `protobuf:"varint,2,opt,name=operation_type,json=operationType,enum=google.cloud.resourcemanager.v2.FolderOperation_OperationType" json:"operation_type,omitempty"`
	// The resource name of the folder's parent.
	// Only applicable when the operation_type is MOVE.
	SourceParent string `protobuf:"bytes,3,opt,name=source_parent,json=sourceParent" json:"source_parent,omitempty"`
	// The resource name of the folder or organization we are either creating
	// the folder under or moving the folder to.
	DestinationParent string `protobuf:"bytes,4,opt,name=destination_parent,json=destinationParent" json:"destination_parent,omitempty"`
}

func (m *FolderOperation) Reset()                    { *m = FolderOperation{} }
func (m *FolderOperation) String() string            { return proto.CompactTextString(m) }
func (*FolderOperation) ProtoMessage()               {}
func (*FolderOperation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *FolderOperation) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *FolderOperation) GetOperationType() FolderOperation_OperationType {
	if m != nil {
		return m.OperationType
	}
	return FolderOperation_OPERATION_TYPE_UNSPECIFIED
}

func (m *FolderOperation) GetSourceParent() string {
	if m != nil {
		return m.SourceParent
	}
	return ""
}

func (m *FolderOperation) GetDestinationParent() string {
	if m != nil {
		return m.DestinationParent
	}
	return ""
}

func init() {
	proto.RegisterType((*Folder)(nil), "google.cloud.resourcemanager.v2.Folder")
	proto.RegisterType((*ListFoldersRequest)(nil), "google.cloud.resourcemanager.v2.ListFoldersRequest")
	proto.RegisterType((*ListFoldersResponse)(nil), "google.cloud.resourcemanager.v2.ListFoldersResponse")
	proto.RegisterType((*SearchFoldersRequest)(nil), "google.cloud.resourcemanager.v2.SearchFoldersRequest")
	proto.RegisterType((*SearchFoldersResponse)(nil), "google.cloud.resourcemanager.v2.SearchFoldersResponse")
	proto.RegisterType((*GetFolderRequest)(nil), "google.cloud.resourcemanager.v2.GetFolderRequest")
	proto.RegisterType((*CreateFolderRequest)(nil), "google.cloud.resourcemanager.v2.CreateFolderRequest")
	proto.RegisterType((*MoveFolderRequest)(nil), "google.cloud.resourcemanager.v2.MoveFolderRequest")
	proto.RegisterType((*UpdateFolderRequest)(nil), "google.cloud.resourcemanager.v2.UpdateFolderRequest")
	proto.RegisterType((*DeleteFolderRequest)(nil), "google.cloud.resourcemanager.v2.DeleteFolderRequest")
	proto.RegisterType((*UndeleteFolderRequest)(nil), "google.cloud.resourcemanager.v2.UndeleteFolderRequest")
	proto.RegisterType((*FolderOperation)(nil), "google.cloud.resourcemanager.v2.FolderOperation")
	proto.RegisterEnum("google.cloud.resourcemanager.v2.Folder_LifecycleState", Folder_LifecycleState_name, Folder_LifecycleState_value)
	proto.RegisterEnum("google.cloud.resourcemanager.v2.FolderOperation_OperationType", FolderOperation_OperationType_name, FolderOperation_OperationType_value)
}

func init() { proto.RegisterFile("google/cloud/resourcemanager/v2/folders.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1203 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0x5b, 0x6f, 0xdb, 0x54,
	0x1c, 0xe7, 0x64, 0x5d, 0xd6, 0xfe, 0x73, 0x69, 0x76, 0xda, 0x8e, 0x92, 0xae, 0x17, 0x4e, 0xd9,
	0xc8, 0x5a, 0xcd, 0x59, 0x33, 0xe8, 0x43, 0x11, 0xa0, 0x2e, 0x75, 0xab, 0x48, 0xbd, 0x04, 0xc7,
	0xad, 0x34, 0xa9, 0x92, 0xe5, 0x25, 0xa7, 0xa9, 0xd5, 0xc4, 0xf6, 0x6c, 0x27, 0x90, 0x4d, 0x48,
	0xd3, 0xa4, 0x89, 0x87, 0x89, 0xa7, 0xbd, 0x81, 0x78, 0xe0, 0x95, 0x57, 0x24, 0x3e, 0x04, 0xaf,
	0x7c, 0x05, 0x3e, 0x08, 0xf2, 0x39, 0xc7, 0xa9, 0x9d, 0xa4, 0x73, 0x8a, 0x10, 0x4f, 0xb5, 0xff,
	0xd7, 0xdf, 0xff, 0xf6, 0xab, 0x03, 0x0f, 0x9b, 0x96, 0xd5, 0x6c, 0xd1, 0x62, 0xbd, 0x65, 0x75,
	0x1a, 0x45, 0x87, 0xba, 0x56, 0xc7, 0xa9, 0xd3, 0xb6, 0x6e, 0xea, 0x4d, 0xea, 0x14, 0xbb, 0xa5,
	0xe2, 0x99, 0xd5, 0x6a, 0x50, 0xc7, 0x95, 0x6c, 0xc7, 0xf2, 0x2c, 0xbc, 0xcc, 0xcd, 0x25, 0x66,
	0x2e, 0x0d, 0x98, 0x4b, 0xdd, 0x52, 0xfe, 0xae, 0x88, 0xa7, 0xdb, 0x46, 0x51, 0x37, 0x4d, 0xcb,
	0xd3, 0x3d, 0xc3, 0x32, 0x85, 0x7b, 0x7e, 0x49, 0x68, 0x0d, 0xbd, 0x5d, 0xec, 0x6e, 0xf8, 0x7f,
	0x34, 0xdb, 0x6a, 0x19, 0xf5, 0x9e, 0xd0, 0xe7, 0xa3, 0xfa, 0x88, 0x6e, 0x55, 0xe8, 0x5a, 0x96,
	0xd9, 0x74, 0x3a, 0xa6, 0x69, 0x98, 0xcd, 0xa2, 0x65, 0x53, 0x27, 0x92, 0x60, 0x45, 0x18, 0xb1,
	0xb7, 0x67, 0x9d, 0xb3, 0xe2, 0x99, 0x41, 0x5b, 0x0d, 0xad, 0xad, 0xbb, 0x17, 0xc2, 0x62, 0x79,
	0xd0, 0xc2, 0x33, 0xda, 0xd4, 0xf5, 0xf4, 0xb6, 0xcd, 0x0d, 0xc8, 0x0f, 0x37, 0x20, 0xb9, 0xcb,
	0x8a, 0xc6, 0x18, 0x26, 0x4c, 0xbd, 0x4d, 0xe7, 0xd1, 0x0a, 0x2a, 0x4c, 0x29, 0xec, 0x19, 0xdf,
	0x81, 0xa4, 0xad, 0x3b, 0xd4, 0xf4, 0xe6, 0x13, 0x4c, 0x2a, 0xde, 0xf0, 0xc7, 0x90, 0x6e, 0x18,
	0xae, 0xdd, 0xd2, 0x7b, 0x1a, 0xf3, 0xb9, 0xc1, 0xb4, 0x29, 0x21, 0x3b, 0xf4, 0x5d, 0x35, 0x98,
	0x6e, 0x19, 0x67, 0xb4, 0xde, 0xab, 0xb7, 0xa8, 0xe6, 0x7a, 0xba, 0x47, 0xe7, 0x27, 0x56, 0x50,
	0x21, 0x5b, 0xda, 0x94, 0x62, 0xda, 0x2a, 0x71, 0x40, 0xd2, 0x7e, 0xe0, 0x5e, 0xf3, 0xbd, 0x95,
	0x6c, 0x2b, 0xf2, 0x8e, 0xbf, 0x80, 0x54, 0xdd, 0xa1, 0xba, 0x47, 0x35, 0xbf, 0xa8, 0xf9, 0x9b,
	0x2b, 0xa8, 0x90, 0x2a, 0xe5, 0x83, 0xe0, 0x41, 0xc5, 0x92, 0x1a, 0x54, 0xac, 0x00, 0x37, 0xf7,
	0x05, 0xbe, 0x73, 0xc7, 0x6e, 0xf4, 0x9d, 0x93, 0xf1, 0xce, 0xdc, 0xdc, 0x17, 0x90, 0x1a, 0x64,
	0xa3, 0xd8, 0xf0, 0x32, 0x2c, 0xec, 0x57, 0x76, 0xe5, 0xf2, 0xd3, 0xf2, 0xbe, 0xac, 0xd5, 0xd4,
	0x6d, 0x55, 0xd6, 0x8e, 0x0f, 0x6b, 0x55, 0xb9, 0x5c, 0xd9, 0xad, 0xc8, 0x3b, 0xb9, 0x0f, 0x30,
	0x40, 0x72, 0xbb, 0xac, 0x56, 0x4e, 0xe4, 0x1c, 0xc2, 0xb3, 0x90, 0xdb, 0x91, 0xf7, 0x65, 0x55,
	0xd6, 0x14, 0xf9, 0x9b, 0x63, 0xb9, 0xa6, 0xca, 0x3b, 0xb9, 0x04, 0x79, 0x8b, 0x00, 0xef, 0x1b,
	0xae, 0xc7, 0x8b, 0x77, 0x15, 0xfa, 0xbc, 0x43, 0x5d, 0x2f, 0x34, 0x01, 0x14, 0x99, 0xc0, 0x02,
	0x4c, 0xd9, 0x7a, 0x93, 0x6a, 0xae, 0xf1, 0x82, 0xb2, 0xe1, 0xdc, 0x54, 0x26, 0x7d, 0x41, 0xcd,
	0x78, 0x41, 0xf1, 0x22, 0x00, 0x53, 0x7a, 0xd6, 0x05, 0x35, 0xc5, 0x70, 0x98, 0xb9, 0xea, 0x0b,
	0xfc, 0xe9, 0xb9, 0xe7, 0xd6, 0xb7, 0x5a, 0x83, 0xb6, 0xa8, 0x47, 0x1b, 0x6c, 0x2e, 0x93, 0x4a,
	0xca, 0x97, 0xed, 0x70, 0x11, 0x79, 0x85, 0x60, 0x26, 0x82, 0xc6, 0xb5, 0x2d, 0xd3, 0xa5, 0x78,
	0x1b, 0x6e, 0x89, 0x1b, 0x99, 0x47, 0x2b, 0x37, 0x0a, 0xa9, 0xd2, 0xa7, 0x63, 0x4e, 0x53, 0x09,
	0xfc, 0xf0, 0x7d, 0x98, 0x36, 0xe9, 0x77, 0x9e, 0x16, 0x42, 0xc8, 0x97, 0x2b, 0xe3, 0x8b, 0xab,
	0x01, 0x4a, 0x72, 0x0e, 0xb3, 0x35, 0xaa, 0x3b, 0xf5, 0xf3, 0x81, 0x8e, 0x44, 0x2a, 0x47, 0xef,
	0xad, 0x3c, 0x31, 0x58, 0xf9, 0x2c, 0xdc, 0x7c, 0xde, 0xa1, 0x4e, 0x4f, 0xf4, 0x84, 0xbf, 0x90,
	0xd7, 0x08, 0xe6, 0x06, 0x52, 0xfd, 0xff, 0xe5, 0xde, 0x87, 0xdc, 0x1e, 0x15, 0xfd, 0x0e, 0x4a,
	0x1d, 0x71, 0x92, 0xc4, 0x84, 0x99, 0x32, 0xdb, 0xe3, 0xa8, 0xe9, 0x55, 0x7b, 0xf2, 0x35, 0x24,
	0x39, 0x12, 0x96, 0xf5, 0x1a, 0x05, 0x08, 0x37, 0x72, 0x02, 0xb7, 0x0f, 0xac, 0x2e, 0x8d, 0x05,
	0x86, 0x1f, 0x02, 0x6e, 0x50, 0xd7, 0x33, 0x4c, 0xc6, 0x51, 0x5a, 0x84, 0x37, 0x6e, 0x87, 0x34,
	0x55, 0xa6, 0x20, 0xef, 0x10, 0xcc, 0x1c, 0xb3, 0x9b, 0x8a, 0x86, 0xbe, 0x04, 0x8c, 0xfe, 0x15,
	0xe0, 0xd0, 0x69, 0xfb, 0x44, 0x28, 0xca, 0x1e, 0x3e, 0xed, 0x5d, 0x9f, 0x2b, 0x0f, 0x74, 0xf7,
	0x22, 0x38, 0x6d, 0xff, 0x99, 0xa8, 0x30, 0xc3, 0x4f, 0x20, 0xbe, 0xde, 0x07, 0x90, 0x73, 0x68,
	0xbd, 0xe3, 0xb8, 0x46, 0x97, 0x8a, 0x53, 0x62, 0xc9, 0x26, 0x95, 0xe9, 0xbe, 0x9c, 0xc7, 0x22,
	0xeb, 0x30, 0x77, 0x6c, 0x36, 0xc6, 0x8b, 0x4b, 0xfe, 0x48, 0xc0, 0x34, 0xb7, 0x3a, 0x0a, 0x08,
	0x7f, 0x88, 0x6f, 0xd1, 0x30, 0xdf, 0x52, 0xc8, 0xf6, 0xff, 0x41, 0x68, 0x5e, 0xcf, 0xe6, 0x60,
	0xb2, 0xa5, 0xaf, 0xc6, 0xec, 0x5f, 0x3f, 0x99, 0xd4, 0x7f, 0x52, 0x7b, 0x36, 0x55, 0x32, 0x56,
	0xf8, 0x15, 0xaf, 0x42, 0x86, 0x07, 0x08, 0x06, 0xcc, 0x2f, 0x29, 0xcd, 0x85, 0x7c, 0xb6, 0x57,
	0xac, 0xc2, 0xc4, 0x55, 0xab, 0x20, 0x43, 0x26, 0x92, 0x13, 0x2f, 0x41, 0xfe, 0xa8, 0x2a, 0x2b,
	0xdb, 0x6a, 0xe5, 0xe8, 0x50, 0x53, 0x9f, 0x56, 0x47, 0xb0, 0x69, 0x59, 0x91, 0xb7, 0x55, 0x9f,
	0x4d, 0x27, 0x61, 0xe2, 0xe0, 0xe8, 0x44, 0xce, 0x25, 0x4a, 0xbf, 0xa7, 0xe1, 0x96, 0x38, 0x60,
	0xfc, 0x23, 0x82, 0x54, 0x88, 0xbf, 0xf0, 0xe3, 0xd8, 0x2e, 0x0c, 0x73, 0x6f, 0xfe, 0xb3, 0xeb,
	0x39, 0x71, 0xce, 0x20, 0x33, 0xaf, 0xff, 0xfa, 0xfb, 0x5d, 0x22, 0x83, 0x53, 0xa1, 0x0f, 0x0a,
	0xfc, 0x0b, 0x82, 0x4c, 0x84, 0x62, 0xf0, 0xe7, 0xb1, 0xc1, 0x47, 0xb1, 0x5f, 0x7e, 0xf3, 0xba,
	0x6e, 0x02, 0xd5, 0x22, 0x43, 0xf5, 0x21, 0xc1, 0x21, 0x54, 0x5b, 0x2e, 0x33, 0xdd, 0x42, 0x6b,
	0xf8, 0x0d, 0x82, 0xa9, 0x3e, 0xfd, 0xe0, 0x8d, 0xd8, 0x24, 0x83, 0x54, 0x95, 0x1f, 0xf7, 0x4c,
	0xc9, 0x5d, 0x06, 0xe4, 0x0e, 0x9e, 0xf5, 0x81, 0xbc, 0xf4, 0xb7, 0xf9, 0x4b, 0x01, 0xa7, 0xb8,
	0xf6, 0x3d, 0x7e, 0x85, 0x20, 0x1d, 0xa6, 0x37, 0x1c, 0x3f, 0x83, 0x11, 0x6c, 0x98, 0x5f, 0x0c,
	0xbc, 0x42, 0xdf, 0x4f, 0x97, 0x7b, 0x4d, 0x16, 0x18, 0x86, 0x39, 0x12, 0x1e, 0xd1, 0x56, 0xc0,
	0x1f, 0x3f, 0x21, 0x48, 0x87, 0x89, 0x69, 0x0c, 0x08, 0x23, 0x78, 0x6c, 0xfc, 0x86, 0xac, 0x33,
	0x30, 0xf7, 0x4a, 0x0b, 0xac, 0x21, 0x1c, 0x84, 0x34, 0xd0, 0x97, 0x3e, 0xb8, 0x37, 0x08, 0xe0,
	0x92, 0x8e, 0x71, 0x29, 0x36, 0xc9, 0x10, 0x77, 0xc7, 0xf5, 0xe6, 0x13, 0x06, 0x67, 0x89, 0x7c,
	0x34, 0x6a, 0x3e, 0x5b, 0x6d, 0xab, 0x4b, 0xfd, 0x7d, 0x79, 0x8b, 0x20, 0x1d, 0x26, 0xca, 0x31,
	0x9a, 0x34, 0x82, 0x57, 0xaf, 0xbd, 0x35, 0x6b, 0xa3, 0xb7, 0xe6, 0x67, 0x04, 0xd9, 0x28, 0xc1,
	0xe2, 0xf8, 0x3b, 0x19, 0xc9, 0xc8, 0xe3, 0x23, 0x2a, 0x30, 0x44, 0x84, 0x2c, 0x8e, 0xec, 0x53,
	0x47, 0x04, 0xf7, 0x7b, 0xf5, 0x12, 0xd2, 0x7b, 0xd4, 0xab, 0xe8, 0xed, 0x2a, 0xfb, 0xc2, 0xc7,
	0x24, 0x48, 0x61, 0xe8, 0x6d, 0xa9, 0xbb, 0x21, 0x85, 0x95, 0x01, 0x8c, 0xb9, 0x01, 0x1b, 0xae,
	0x25, 0x8f, 0x58, 0xd2, 0x35, 0x72, 0x8f, 0x25, 0x0d, 0xc0, 0x85, 0x13, 0x37, 0x43, 0xc1, 0x44,
	0xf2, 0xda, 0xfb, 0x92, 0xd7, 0xfe, 0xcb, 0xe4, 0xee, 0x40, 0xf2, 0x5f, 0x11, 0x60, 0x95, 0xba,
	0x4c, 0x48, 0x9d, 0xb6, 0xe1, 0xba, 0xfe, 0xaf, 0x17, 0x5c, 0x18, 0x88, 0x3f, 0x6c, 0x12, 0x20,
	0x79, 0x30, 0x86, 0xa5, 0x20, 0xb8, 0x4d, 0x86, 0xee, 0x11, 0x59, 0xbf, 0x12, 0x9d, 0x37, 0xe4,
	0xbc, 0x85, 0xd6, 0x9e, 0xf4, 0x60, 0xb5, 0x6e, 0xb5, 0xe3, 0xa6, 0xfe, 0x24, 0x2d, 0x08, 0xb5,
	0xea, 0x7f, 0x3f, 0x54, 0xd1, 0x6f, 0x89, 0xe5, 0x3d, 0xee, 0x51, 0x66, 0x1e, 0x8a, 0xf0, 0x38,
	0x10, 0x1e, 0x27, 0xa5, 0x3f, 0x03, 0x8b, 0x53, 0x66, 0x71, 0x3a, 0x60, 0x71, 0x7a, 0x52, 0x7a,
	0x96, 0x64, 0x1f, 0x23, 0x8f, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x21, 0x51, 0xa1, 0xc9, 0x97,
	0x0e, 0x00, 0x00,
}
