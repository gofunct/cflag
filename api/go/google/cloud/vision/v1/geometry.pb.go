// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/cloud/vision/v1/geometry.proto

package google_cloud_vision_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A vertex represents a 2D point in the image.
// NOTE: the vertex coordinates are in the same scale as the original image.
type Vertex struct {
	// X coordinate.
	X int32 `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
	// Y coordinate.
	Y int32 `protobuf:"varint,2,opt,name=y" json:"y,omitempty"`
}

func (m *Vertex) Reset()                    { *m = Vertex{} }
func (m *Vertex) String() string            { return proto.CompactTextString(m) }
func (*Vertex) ProtoMessage()               {}
func (*Vertex) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Vertex) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Vertex) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

// A bounding polygon for the detected image annotation.
type BoundingPoly struct {
	// The bounding polygon vertices.
	Vertices []*Vertex `protobuf:"bytes,1,rep,name=vertices" json:"vertices,omitempty"`
}

func (m *BoundingPoly) Reset()                    { *m = BoundingPoly{} }
func (m *BoundingPoly) String() string            { return proto.CompactTextString(m) }
func (*BoundingPoly) ProtoMessage()               {}
func (*BoundingPoly) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BoundingPoly) GetVertices() []*Vertex {
	if m != nil {
		return m.Vertices
	}
	return nil
}

// A 3D position in the image, used primarily for Face detection landmarks.
// A valid Position must have both x and y coordinates.
// The position coordinates are in the same scale as the original image.
type Position struct {
	// X coordinate.
	X float32 `protobuf:"fixed32,1,opt,name=x" json:"x,omitempty"`
	// Y coordinate.
	Y float32 `protobuf:"fixed32,2,opt,name=y" json:"y,omitempty"`
	// Z coordinate (or depth).
	Z float32 `protobuf:"fixed32,3,opt,name=z" json:"z,omitempty"`
}

func (m *Position) Reset()                    { *m = Position{} }
func (m *Position) String() string            { return proto.CompactTextString(m) }
func (*Position) ProtoMessage()               {}
func (*Position) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Position) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Position) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Position) GetZ() float32 {
	if m != nil {
		return m.Z
	}
	return 0
}

func init() {
	proto.RegisterType((*Vertex)(nil), "google.cloud.vision.v1.Vertex")
	proto.RegisterType((*BoundingPoly)(nil), "google.cloud.vision.v1.BoundingPoly")
	proto.RegisterType((*Position)(nil), "google.cloud.vision.v1.Position")
}

func init() { proto.RegisterFile("google/cloud/vision/v1/geometry.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 208 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x8f, 0x41, 0x4b, 0x87, 0x30,
	0x18, 0x87, 0x79, 0xfd, 0x93, 0xc8, 0xb2, 0x8b, 0x87, 0x18, 0x1d, 0x42, 0xa4, 0xc0, 0xd3, 0x96,
	0xd5, 0xa9, 0xa3, 0x97, 0xa0, 0xd3, 0xf0, 0xd0, 0x07, 0x48, 0xc7, 0x18, 0xe8, 0xde, 0x98, 0x73,
	0x38, 0x3f, 0x79, 0xc7, 0xd0, 0x45, 0x11, 0xd4, 0xf1, 0x81, 0x87, 0xdf, 0xc3, 0x8f, 0xdc, 0x2a,
	0x44, 0x35, 0x4a, 0xde, 0x8f, 0xb8, 0x0c, 0xdc, 0xeb, 0x59, 0xa3, 0xe1, 0xbe, 0xe1, 0x4a, 0xe2,
	0x24, 0x9d, 0x0d, 0xec, 0xdd, 0xa2, 0xc3, 0xe2, 0x32, 0x6a, 0xec, 0xd0, 0x58, 0xd4, 0x98, 0x6f,
	0xaa, 0x1b, 0x92, 0xbe, 0x4a, 0xeb, 0xe4, 0x5a, 0xe4, 0x04, 0x56, 0x0a, 0x25, 0xd4, 0x67, 0x1d,
	0x1c, 0x14, 0x68, 0x12, 0x29, 0x54, 0x2f, 0x24, 0x6f, 0x71, 0x31, 0x83, 0x36, 0x4a, 0xe0, 0x18,
	0x8a, 0x27, 0x92, 0x79, 0x69, 0x9d, 0xee, 0xe5, 0x4c, 0xa1, 0x3c, 0xd5, 0xe7, 0xf7, 0xd7, 0xec,
	0xef, 0x00, 0x8b, 0xeb, 0xdd, 0xb7, 0x5f, 0x3d, 0x92, 0x4c, 0xe0, 0xac, 0x9d, 0x46, 0xf3, 0xd3,
	0x4c, 0x7e, 0x35, 0x93, 0x0e, 0xc2, 0x4e, 0x1b, 0x3d, 0x45, 0xda, 0xda, 0x3b, 0x72, 0xd5, 0xe3,
	0xf4, 0x4f, 0xa4, 0xbd, 0x78, 0xfe, 0x7a, 0x2b, 0xf6, 0xb3, 0x02, 0x3e, 0x00, 0xde, 0xd2, 0xe3,
	0xf8, 0xc3, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd3, 0x5b, 0xc0, 0xbd, 0x21, 0x01, 0x00, 0x00,
}
