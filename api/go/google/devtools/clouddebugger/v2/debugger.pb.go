// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/devtools/clouddebugger/v2/debugger.proto

package google_devtools_clouddebugger_v2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "go.pedge.io/pb/go/google/api"
import _ "github.com/golang/protobuf/ptypes/empty"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Request to set a breakpoint
type SetBreakpointRequest struct {
	// ID of the debuggee where the breakpoint is to be set.
	DebuggeeId string `protobuf:"bytes,1,opt,name=debuggee_id,json=debuggeeId" json:"debuggee_id,omitempty"`
	// Breakpoint specification to set.
	// The field `location` of the breakpoint must be set.
	Breakpoint *Breakpoint `protobuf:"bytes,2,opt,name=breakpoint" json:"breakpoint,omitempty"`
	// The client version making the call.
	// Schema: `domain/type/version` (e.g., `google.com/intellij/v1`).
	ClientVersion string `protobuf:"bytes,4,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
}

func (m *SetBreakpointRequest) Reset()                    { *m = SetBreakpointRequest{} }
func (m *SetBreakpointRequest) String() string            { return proto.CompactTextString(m) }
func (*SetBreakpointRequest) ProtoMessage()               {}
func (*SetBreakpointRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *SetBreakpointRequest) GetDebuggeeId() string {
	if m != nil {
		return m.DebuggeeId
	}
	return ""
}

func (m *SetBreakpointRequest) GetBreakpoint() *Breakpoint {
	if m != nil {
		return m.Breakpoint
	}
	return nil
}

func (m *SetBreakpointRequest) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

// Response for setting a breakpoint.
type SetBreakpointResponse struct {
	// Breakpoint resource.
	// The field `id` is guaranteed to be set (in addition to the echoed fileds).
	Breakpoint *Breakpoint `protobuf:"bytes,1,opt,name=breakpoint" json:"breakpoint,omitempty"`
}

func (m *SetBreakpointResponse) Reset()                    { *m = SetBreakpointResponse{} }
func (m *SetBreakpointResponse) String() string            { return proto.CompactTextString(m) }
func (*SetBreakpointResponse) ProtoMessage()               {}
func (*SetBreakpointResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *SetBreakpointResponse) GetBreakpoint() *Breakpoint {
	if m != nil {
		return m.Breakpoint
	}
	return nil
}

// Request to get breakpoint information.
type GetBreakpointRequest struct {
	// ID of the debuggee whose breakpoint to get.
	DebuggeeId string `protobuf:"bytes,1,opt,name=debuggee_id,json=debuggeeId" json:"debuggee_id,omitempty"`
	// ID of the breakpoint to get.
	BreakpointId string `protobuf:"bytes,2,opt,name=breakpoint_id,json=breakpointId" json:"breakpoint_id,omitempty"`
	// The client version making the call.
	// Schema: `domain/type/version` (e.g., `google.com/intellij/v1`).
	ClientVersion string `protobuf:"bytes,4,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
}

func (m *GetBreakpointRequest) Reset()                    { *m = GetBreakpointRequest{} }
func (m *GetBreakpointRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBreakpointRequest) ProtoMessage()               {}
func (*GetBreakpointRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *GetBreakpointRequest) GetDebuggeeId() string {
	if m != nil {
		return m.DebuggeeId
	}
	return ""
}

func (m *GetBreakpointRequest) GetBreakpointId() string {
	if m != nil {
		return m.BreakpointId
	}
	return ""
}

func (m *GetBreakpointRequest) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

// Response for getting breakpoint information.
type GetBreakpointResponse struct {
	// Complete breakpoint state.
	// The fields `id` and `location` are guaranteed to be set.
	Breakpoint *Breakpoint `protobuf:"bytes,1,opt,name=breakpoint" json:"breakpoint,omitempty"`
}

func (m *GetBreakpointResponse) Reset()                    { *m = GetBreakpointResponse{} }
func (m *GetBreakpointResponse) String() string            { return proto.CompactTextString(m) }
func (*GetBreakpointResponse) ProtoMessage()               {}
func (*GetBreakpointResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *GetBreakpointResponse) GetBreakpoint() *Breakpoint {
	if m != nil {
		return m.Breakpoint
	}
	return nil
}

// Request to delete a breakpoint.
type DeleteBreakpointRequest struct {
	// ID of the debuggee whose breakpoint to delete.
	DebuggeeId string `protobuf:"bytes,1,opt,name=debuggee_id,json=debuggeeId" json:"debuggee_id,omitempty"`
	// ID of the breakpoint to delete.
	BreakpointId string `protobuf:"bytes,2,opt,name=breakpoint_id,json=breakpointId" json:"breakpoint_id,omitempty"`
	// The client version making the call.
	// Schema: `domain/type/version` (e.g., `google.com/intellij/v1`).
	ClientVersion string `protobuf:"bytes,3,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
}

func (m *DeleteBreakpointRequest) Reset()                    { *m = DeleteBreakpointRequest{} }
func (m *DeleteBreakpointRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteBreakpointRequest) ProtoMessage()               {}
func (*DeleteBreakpointRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *DeleteBreakpointRequest) GetDebuggeeId() string {
	if m != nil {
		return m.DebuggeeId
	}
	return ""
}

func (m *DeleteBreakpointRequest) GetBreakpointId() string {
	if m != nil {
		return m.BreakpointId
	}
	return ""
}

func (m *DeleteBreakpointRequest) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

// Request to list breakpoints.
type ListBreakpointsRequest struct {
	// ID of the debuggee whose breakpoints to list.
	DebuggeeId string `protobuf:"bytes,1,opt,name=debuggee_id,json=debuggeeId" json:"debuggee_id,omitempty"`
	// When set to `true`, the response includes the list of breakpoints set by
	// any user. Otherwise, it includes only breakpoints set by the caller.
	IncludeAllUsers bool `protobuf:"varint,2,opt,name=include_all_users,json=includeAllUsers" json:"include_all_users,omitempty"`
	// When set to `true`, the response includes active and inactive
	// breakpoints. Otherwise, it includes only active breakpoints.
	IncludeInactive bool `protobuf:"varint,3,opt,name=include_inactive,json=includeInactive" json:"include_inactive,omitempty"`
	// When set, the response includes only breakpoints with the specified action.
	Action *ListBreakpointsRequest_BreakpointActionValue `protobuf:"bytes,4,opt,name=action" json:"action,omitempty"`
	// This field is deprecated. The following fields are always stripped out of
	// the result: `stack_frames`, `evaluated_expressions` and `variable_table`.
	StripResults bool `protobuf:"varint,5,opt,name=strip_results,json=stripResults" json:"strip_results,omitempty"`
	// A wait token that, if specified, blocks the call until the breakpoints
	// list has changed, or a server selected timeout has expired.  The value
	// should be set from the last response. The error code
	// `google.rpc.Code.ABORTED` (RPC) is returned on wait timeout, which
	// should be called again with the same `wait_token`.
	WaitToken string `protobuf:"bytes,6,opt,name=wait_token,json=waitToken" json:"wait_token,omitempty"`
	// The client version making the call.
	// Schema: `domain/type/version` (e.g., `google.com/intellij/v1`).
	ClientVersion string `protobuf:"bytes,8,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
}

func (m *ListBreakpointsRequest) Reset()                    { *m = ListBreakpointsRequest{} }
func (m *ListBreakpointsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListBreakpointsRequest) ProtoMessage()               {}
func (*ListBreakpointsRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *ListBreakpointsRequest) GetDebuggeeId() string {
	if m != nil {
		return m.DebuggeeId
	}
	return ""
}

func (m *ListBreakpointsRequest) GetIncludeAllUsers() bool {
	if m != nil {
		return m.IncludeAllUsers
	}
	return false
}

func (m *ListBreakpointsRequest) GetIncludeInactive() bool {
	if m != nil {
		return m.IncludeInactive
	}
	return false
}

func (m *ListBreakpointsRequest) GetAction() *ListBreakpointsRequest_BreakpointActionValue {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *ListBreakpointsRequest) GetStripResults() bool {
	if m != nil {
		return m.StripResults
	}
	return false
}

func (m *ListBreakpointsRequest) GetWaitToken() string {
	if m != nil {
		return m.WaitToken
	}
	return ""
}

func (m *ListBreakpointsRequest) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

// Wrapper message for `Breakpoint.Action`. Defines a filter on the action
// field of breakpoints.
type ListBreakpointsRequest_BreakpointActionValue struct {
	// Only breakpoints with the specified action will pass the filter.
	Value Breakpoint_Action `protobuf:"varint,1,opt,name=value,enum=google.devtools.clouddebugger.v2.Breakpoint_Action" json:"value,omitempty"`
}

func (m *ListBreakpointsRequest_BreakpointActionValue) Reset() {
	*m = ListBreakpointsRequest_BreakpointActionValue{}
}
func (m *ListBreakpointsRequest_BreakpointActionValue) String() string {
	return proto.CompactTextString(m)
}
func (*ListBreakpointsRequest_BreakpointActionValue) ProtoMessage() {}
func (*ListBreakpointsRequest_BreakpointActionValue) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{5, 0}
}

func (m *ListBreakpointsRequest_BreakpointActionValue) GetValue() Breakpoint_Action {
	if m != nil {
		return m.Value
	}
	return Breakpoint_CAPTURE
}

// Response for listing breakpoints.
type ListBreakpointsResponse struct {
	// List of breakpoints matching the request.
	// The fields `id` and `location` are guaranteed to be set on each breakpoint.
	// The fields: `stack_frames`, `evaluated_expressions` and `variable_table`
	// are cleared on each breakpoint regardless of its status.
	Breakpoints []*Breakpoint `protobuf:"bytes,1,rep,name=breakpoints" json:"breakpoints,omitempty"`
	// A wait token that can be used in the next call to `list` (REST) or
	// `ListBreakpoints` (RPC) to block until the list of breakpoints has changes.
	NextWaitToken string `protobuf:"bytes,2,opt,name=next_wait_token,json=nextWaitToken" json:"next_wait_token,omitempty"`
}

func (m *ListBreakpointsResponse) Reset()                    { *m = ListBreakpointsResponse{} }
func (m *ListBreakpointsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListBreakpointsResponse) ProtoMessage()               {}
func (*ListBreakpointsResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *ListBreakpointsResponse) GetBreakpoints() []*Breakpoint {
	if m != nil {
		return m.Breakpoints
	}
	return nil
}

func (m *ListBreakpointsResponse) GetNextWaitToken() string {
	if m != nil {
		return m.NextWaitToken
	}
	return ""
}

// Request to list debuggees.
type ListDebuggeesRequest struct {
	// Project number of a Google Cloud project whose debuggees to list.
	Project string `protobuf:"bytes,2,opt,name=project" json:"project,omitempty"`
	// When set to `true`, the result includes all debuggees. Otherwise, the
	// result includes only debuggees that are active.
	IncludeInactive bool `protobuf:"varint,3,opt,name=include_inactive,json=includeInactive" json:"include_inactive,omitempty"`
	// The client version making the call.
	// Schema: `domain/type/version` (e.g., `google.com/intellij/v1`).
	ClientVersion string `protobuf:"bytes,4,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
}

func (m *ListDebuggeesRequest) Reset()                    { *m = ListDebuggeesRequest{} }
func (m *ListDebuggeesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListDebuggeesRequest) ProtoMessage()               {}
func (*ListDebuggeesRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *ListDebuggeesRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *ListDebuggeesRequest) GetIncludeInactive() bool {
	if m != nil {
		return m.IncludeInactive
	}
	return false
}

func (m *ListDebuggeesRequest) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

// Response for listing debuggees.
type ListDebuggeesResponse struct {
	// List of debuggees accessible to the calling user.
	// The fields `debuggee.id` and `description` are guaranteed to be set.
	// The `description` field is a human readable field provided by agents and
	// can be displayed to users.
	Debuggees []*Debuggee `protobuf:"bytes,1,rep,name=debuggees" json:"debuggees,omitempty"`
}

func (m *ListDebuggeesResponse) Reset()                    { *m = ListDebuggeesResponse{} }
func (m *ListDebuggeesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListDebuggeesResponse) ProtoMessage()               {}
func (*ListDebuggeesResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *ListDebuggeesResponse) GetDebuggees() []*Debuggee {
	if m != nil {
		return m.Debuggees
	}
	return nil
}

func init() {
	proto.RegisterType((*SetBreakpointRequest)(nil), "google.devtools.clouddebugger.v2.SetBreakpointRequest")
	proto.RegisterType((*SetBreakpointResponse)(nil), "google.devtools.clouddebugger.v2.SetBreakpointResponse")
	proto.RegisterType((*GetBreakpointRequest)(nil), "google.devtools.clouddebugger.v2.GetBreakpointRequest")
	proto.RegisterType((*GetBreakpointResponse)(nil), "google.devtools.clouddebugger.v2.GetBreakpointResponse")
	proto.RegisterType((*DeleteBreakpointRequest)(nil), "google.devtools.clouddebugger.v2.DeleteBreakpointRequest")
	proto.RegisterType((*ListBreakpointsRequest)(nil), "google.devtools.clouddebugger.v2.ListBreakpointsRequest")
	proto.RegisterType((*ListBreakpointsRequest_BreakpointActionValue)(nil), "google.devtools.clouddebugger.v2.ListBreakpointsRequest.BreakpointActionValue")
	proto.RegisterType((*ListBreakpointsResponse)(nil), "google.devtools.clouddebugger.v2.ListBreakpointsResponse")
	proto.RegisterType((*ListDebuggeesRequest)(nil), "google.devtools.clouddebugger.v2.ListDebuggeesRequest")
	proto.RegisterType((*ListDebuggeesResponse)(nil), "google.devtools.clouddebugger.v2.ListDebuggeesResponse")
}

func init() { proto.RegisterFile("google/devtools/clouddebugger/v2/debugger.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 748 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0xd5, 0xa4, 0xf4, 0x91, 0x9b, 0xa6, 0x2d, 0xa3, 0x3e, 0xac, 0xf0, 0x8a, 0xcc, 0x43, 0xa5,
	0x20, 0x1b, 0xb9, 0x08, 0x5a, 0x56, 0x34, 0x14, 0xa5, 0x91, 0xaa, 0xaa, 0x32, 0x50, 0x96, 0x91,
	0x93, 0x4c, 0x23, 0x53, 0xd7, 0x63, 0x3c, 0xe3, 0x00, 0xaa, 0xba, 0x29, 0x12, 0x7b, 0xc4, 0x0f,
	0xb0, 0x46, 0x48, 0x7c, 0x01, 0x12, 0x3b, 0x24, 0xb6, 0xfc, 0x02, 0x1f, 0x82, 0x6c, 0xcf, 0x34,
	0x4e, 0xb0, 0x48, 0x9c, 0x4a, 0xdd, 0xd9, 0xd7, 0xf7, 0x5e, 0x9f, 0x73, 0xe6, 0xdc, 0x3b, 0xa0,
	0xb7, 0x29, 0x6d, 0x3b, 0x44, 0x6f, 0x91, 0x0e, 0xa7, 0xd4, 0x61, 0x7a, 0xd3, 0xa1, 0x41, 0xab,
	0x45, 0x1a, 0x41, 0xbb, 0x4d, 0x7c, 0xbd, 0x63, 0xe8, 0xf2, 0x59, 0xf3, 0x7c, 0xca, 0x29, 0x2e,
	0xc7, 0x05, 0x9a, 0x2c, 0xd0, 0x7a, 0x0a, 0xb4, 0x8e, 0x51, 0xba, 0x2c, 0x5a, 0x5a, 0x9e, 0xad,
	0x5b, 0xae, 0x4b, 0xb9, 0xc5, 0x6d, 0xea, 0xb2, 0xb8, 0xbe, 0x74, 0x67, 0xf0, 0x0f, 0x2d, 0x6e,
	0x89, 0xe4, 0x4b, 0x22, 0x39, 0x7a, 0x6b, 0x04, 0xfb, 0x3a, 0x39, 0xf4, 0xf8, 0xbb, 0xf8, 0xa3,
	0xfa, 0x15, 0xc1, 0xfc, 0x33, 0xc2, 0x2b, 0x3e, 0xb1, 0x0e, 0x3c, 0x6a, 0xbb, 0xdc, 0x24, 0xaf,
	0x03, 0xc2, 0x38, 0xbe, 0x06, 0x05, 0xd1, 0x8f, 0xd4, 0xed, 0x96, 0x82, 0xca, 0x68, 0x39, 0x6f,
	0x82, 0x0c, 0xd5, 0x5a, 0x78, 0x1b, 0xa0, 0x71, 0x5a, 0xa5, 0xe4, 0xca, 0x68, 0xb9, 0x60, 0xdc,
	0xd5, 0x06, 0x11, 0xd3, 0x12, 0x7f, 0x4a, 0xd4, 0xe3, 0x9b, 0x30, 0xd3, 0x74, 0x6c, 0xe2, 0xf2,
	0x7a, 0x87, 0xf8, 0xcc, 0xa6, 0xae, 0x72, 0x21, 0xfa, 0x63, 0x31, 0x8e, 0xee, 0xc5, 0x41, 0x95,
	0xc0, 0x42, 0x1f, 0x5a, 0xe6, 0x51, 0x97, 0x91, 0x3e, 0x34, 0xe8, 0x6c, 0x68, 0xd4, 0xf7, 0x08,
	0xe6, 0xab, 0x23, 0xa9, 0x72, 0x1d, 0x8a, 0xdd, 0x3e, 0x61, 0x4a, 0x2e, 0x4a, 0x99, 0xee, 0x06,
	0x6b, 0xad, 0x0c, 0x64, 0xab, 0xe7, 0x40, 0xf6, 0x03, 0x82, 0xa5, 0x4d, 0xe2, 0x10, 0x4e, 0xce,
	0x8f, 0xef, 0x58, 0x1a, 0xdf, 0x9f, 0x63, 0xb0, 0xb8, 0x6d, 0xb3, 0x04, 0x63, 0x36, 0x34, 0x8e,
	0x15, 0xb8, 0x68, 0xbb, 0x4d, 0x27, 0x68, 0x91, 0xba, 0xe5, 0x38, 0xf5, 0x80, 0x11, 0x9f, 0x45,
	0x58, 0xa6, 0xcc, 0x59, 0xf1, 0x61, 0xc3, 0x71, 0x5e, 0x84, 0x61, 0x7c, 0x1b, 0xe6, 0x64, 0xae,
	0xed, 0x5a, 0x4d, 0x6e, 0x77, 0x48, 0x04, 0xa8, 0x9b, 0x5a, 0x13, 0x61, 0xbc, 0x0f, 0x13, 0xe1,
	0x93, 0x38, 0xa1, 0x82, 0xb1, 0x33, 0x58, 0xe5, 0x74, 0x06, 0x09, 0xf1, 0x37, 0xa2, 0x86, 0x7b,
	0x96, 0x13, 0x10, 0x53, 0x74, 0x0f, 0x65, 0x64, 0xdc, 0xb7, 0xbd, 0xba, 0x4f, 0x58, 0xe0, 0x70,
	0xa6, 0x8c, 0x47, 0x78, 0xa6, 0xa3, 0xa0, 0x19, 0xc7, 0xf0, 0x15, 0x80, 0x37, 0x96, 0xcd, 0xeb,
	0x9c, 0x1e, 0x10, 0x57, 0x99, 0x88, 0x34, 0xc8, 0x87, 0x91, 0xe7, 0x61, 0x20, 0x45, 0xe5, 0xa9,
	0x14, 0x95, 0x4b, 0x0d, 0x58, 0x48, 0xc5, 0x82, 0x6b, 0x30, 0xde, 0x09, 0x1f, 0x22, 0x75, 0x67,
	0x8c, 0xd5, 0x2c, 0x86, 0xd2, 0xe2, 0x46, 0x66, 0xdc, 0x41, 0xfd, 0x88, 0x60, 0xe9, 0x1f, 0x1d,
	0x84, 0x79, 0x77, 0xa0, 0xd0, 0x35, 0x07, 0x53, 0x50, 0x79, 0x2c, 0xb3, 0x7b, 0x93, 0x0d, 0xf0,
	0x2d, 0x98, 0x75, 0xc9, 0x5b, 0x5e, 0x4f, 0x48, 0x13, 0x7b, 0xb0, 0x18, 0x86, 0x5f, 0x4a, 0x79,
	0xd4, 0x13, 0x04, 0xf3, 0x21, 0xa6, 0x4d, 0x61, 0x9a, 0x53, 0x6f, 0x29, 0x30, 0xe9, 0xf9, 0xf4,
	0x15, 0x69, 0x72, 0x51, 0x28, 0x5f, 0xb3, 0x18, 0x65, 0xc8, 0x91, 0xb6, 0x60, 0xa1, 0x0f, 0x83,
	0x50, 0x65, 0x0b, 0xf2, 0xd2, 0xcd, 0x52, 0x93, 0x95, 0xc1, 0x9a, 0xc8, 0x3e, 0x66, 0xb7, 0xd8,
	0xf8, 0x3e, 0x09, 0x79, 0x11, 0xf7, 0x0d, 0xfc, 0x0b, 0x41, 0xb1, 0x67, 0x63, 0xe2, 0x07, 0x83,
	0xdb, 0xa6, 0x5d, 0x08, 0xa5, 0x87, 0x99, 0xeb, 0x62, 0x6a, 0xea, 0xd6, 0xc9, 0xef, 0x3f, 0x9f,
	0x72, 0x15, 0xf5, 0x7e, 0xf2, 0x22, 0xd4, 0x4f, 0x01, 0xeb, 0x47, 0x89, 0xc9, 0x3e, 0xd6, 0x13,
	0x47, 0xab, 0x33, 0xc2, 0x1f, 0x25, 0x2f, 0x89, 0x90, 0x4c, 0x35, 0x2b, 0x99, 0xea, 0x88, 0x64,
	0xaa, 0xff, 0x23, 0x83, 0x1f, 0x67, 0x26, 0x73, 0xd4, 0xb3, 0x27, 0x8f, 0xf1, 0x37, 0x04, 0x73,
	0xfd, 0x6b, 0x17, 0xaf, 0x0f, 0x73, 0xe6, 0xa9, 0xab, 0xba, 0xb4, 0x28, 0x4b, 0xe5, 0x3d, 0xaf,
	0x3d, 0x0d, 0xef, 0x79, 0x89, 0x78, 0xe5, 0xec, 0x88, 0x7f, 0x20, 0x98, 0xed, 0x9b, 0x6a, 0xbc,
	0x36, 0xea, 0x42, 0x2c, 0xad, 0x8f, 0x50, 0x29, 0x0e, 0x61, 0x2d, 0xa2, 0x64, 0xe0, 0x7b, 0x59,
	0x29, 0xe1, 0xcf, 0x08, 0x8a, 0x3d, 0x03, 0x38, 0x8c, 0x83, 0xd2, 0xb6, 0xc6, 0x30, 0x0e, 0x4a,
	0x9d, 0x74, 0xf5, 0x6a, 0x04, 0x5e, 0xc1, 0x8b, 0xe9, 0xe0, 0x2b, 0x26, 0xdc, 0x68, 0xd2, 0xc3,
	0x81, 0xdd, 0x2b, 0x45, 0x39, 0xe4, 0xbb, 0xe1, 0x79, 0xef, 0xa2, 0x2f, 0x39, 0xa5, 0x1a, 0xd7,
	0x3c, 0x09, 0x53, 0xe5, 0x6e, 0xf0, 0xb5, 0x3d, 0xa3, 0x31, 0x11, 0x79, 0x62, 0xf5, 0x6f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x22, 0x97, 0x86, 0xf1, 0xa9, 0x0a, 0x00, 0x00,
}
