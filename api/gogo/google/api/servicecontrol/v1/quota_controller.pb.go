// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: google/api/servicecontrol/v1/quota_controller.proto

package google_api_servicecontrol_v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "go.pedge.io/pb/gogo/google/api"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Supported quota modes.
type QuotaOperation_QuotaMode int32

const (
	// Guard against implicit default. Must not be used.
	QuotaOperation_UNSPECIFIED QuotaOperation_QuotaMode = 0
	// For AllocateQuota request, allocates quota for the amount specified in
	// the service configuration or specified using the quota metrics. If the
	// amount is higher than the available quota, allocation error will be
	// returned and no quota will be allocated.
	QuotaOperation_NORMAL QuotaOperation_QuotaMode = 1
	// The operation allocates quota for the amount specified in the service
	// configuration or specified using the quota metrics. If the amount is
	// higher than the available quota, request does not fail but all available
	// quota will be allocated.
	QuotaOperation_BEST_EFFORT QuotaOperation_QuotaMode = 2
	// For AllocateQuota request, only checks if there is enough quota
	// available and does not change the available quota. No lock is placed on
	// the available quota either.
	QuotaOperation_CHECK_ONLY QuotaOperation_QuotaMode = 3
)

var QuotaOperation_QuotaMode_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "NORMAL",
	2: "BEST_EFFORT",
	3: "CHECK_ONLY",
}
var QuotaOperation_QuotaMode_value = map[string]int32{
	"UNSPECIFIED": 0,
	"NORMAL":      1,
	"BEST_EFFORT": 2,
	"CHECK_ONLY":  3,
}

func (x QuotaOperation_QuotaMode) String() string {
	return proto.EnumName(QuotaOperation_QuotaMode_name, int32(x))
}
func (QuotaOperation_QuotaMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorQuotaController, []int{1, 0}
}

// Error codes related to project config validations are deprecated since the
// quota controller methods do not perform these validations. Instead services
// have to call the Check method, without quota_properties field, to perform
// these validations before calling the quota controller methods. These
// methods check only for project deletion to be wipe out compliant.
type QuotaError_Code int32

const (
	// This is never used.
	QuotaError_UNSPECIFIED QuotaError_Code = 0
	// Quota allocation failed.
	// Same as [google.rpc.Code.RESOURCE_EXHAUSTED][].
	QuotaError_RESOURCE_EXHAUSTED QuotaError_Code = 8
	// Consumer cannot access the service because the service requires active
	// billing.
	QuotaError_BILLING_NOT_ACTIVE QuotaError_Code = 107
	// Consumer's project has been marked as deleted (soft deletion).
	QuotaError_PROJECT_DELETED QuotaError_Code = 108
	// Specified API key is invalid.
	QuotaError_API_KEY_INVALID QuotaError_Code = 105
	// Specified API Key has expired.
	QuotaError_API_KEY_EXPIRED QuotaError_Code = 112
)

var QuotaError_Code_name = map[int32]string{
	0:   "UNSPECIFIED",
	8:   "RESOURCE_EXHAUSTED",
	107: "BILLING_NOT_ACTIVE",
	108: "PROJECT_DELETED",
	105: "API_KEY_INVALID",
	112: "API_KEY_EXPIRED",
}
var QuotaError_Code_value = map[string]int32{
	"UNSPECIFIED":        0,
	"RESOURCE_EXHAUSTED": 8,
	"BILLING_NOT_ACTIVE": 107,
	"PROJECT_DELETED":    108,
	"API_KEY_INVALID":    105,
	"API_KEY_EXPIRED":    112,
}

func (x QuotaError_Code) String() string {
	return proto.EnumName(QuotaError_Code_name, int32(x))
}
func (QuotaError_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorQuotaController, []int{3, 0}
}

// Request message for the AllocateQuota method.
type AllocateQuotaRequest struct {
	// Name of the service as specified in the service configuration. For example,
	// `"pubsub.googleapis.com"`.
	//
	// See [google.api.Service][google.api.Service] for the definition of a service name.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Operation that describes the quota allocation.
	AllocateOperation *QuotaOperation `protobuf:"bytes,2,opt,name=allocate_operation,json=allocateOperation" json:"allocate_operation,omitempty"`
	// Specifies which version of service configuration should be used to process
	// the request. If unspecified or no matching version can be found, the latest
	// one will be used.
	ServiceConfigId string `protobuf:"bytes,4,opt,name=service_config_id,json=serviceConfigId,proto3" json:"service_config_id,omitempty"`
}

func (m *AllocateQuotaRequest) Reset()         { *m = AllocateQuotaRequest{} }
func (m *AllocateQuotaRequest) String() string { return proto.CompactTextString(m) }
func (*AllocateQuotaRequest) ProtoMessage()    {}
func (*AllocateQuotaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorQuotaController, []int{0}
}

func (m *AllocateQuotaRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *AllocateQuotaRequest) GetAllocateOperation() *QuotaOperation {
	if m != nil {
		return m.AllocateOperation
	}
	return nil
}

func (m *AllocateQuotaRequest) GetServiceConfigId() string {
	if m != nil {
		return m.ServiceConfigId
	}
	return ""
}

// Represents information regarding a quota operation.
type QuotaOperation struct {
	// Identity of the operation. This is expected to be unique within the scope
	// of the service that generated the operation, and guarantees idempotency in
	// case of retries.
	//
	// UUID version 4 is recommended, though not required. In scenarios where an
	// operation is computed from existing information and an idempotent id is
	// desirable for deduplication purpose, UUID version 5 is recommended. See
	// RFC 4122 for details.
	OperationId string `protobuf:"bytes,1,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
	// Fully qualified name of the API method for which this quota operation is
	// requested. This name is used for matching quota rules or metric rules and
	// billing status rules defined in service configuration. This field is not
	// required if the quota operation is performed on non-API resources.
	//
	// Example of an RPC method name:
	//     google.example.library.v1.LibraryService.CreateShelf
	MethodName string `protobuf:"bytes,2,opt,name=method_name,json=methodName,proto3" json:"method_name,omitempty"`
	// Identity of the consumer for whom this quota operation is being performed.
	//
	// This can be in one of the following formats:
	//   project:<project_id>,
	//   project_number:<project_number>,
	//   api_key:<api_key>.
	ConsumerId string `protobuf:"bytes,3,opt,name=consumer_id,json=consumerId,proto3" json:"consumer_id,omitempty"`
	// Labels describing the operation.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Represents information about this operation. Each MetricValueSet
	// corresponds to a metric defined in the service configuration.
	// The data type used in the MetricValueSet must agree with
	// the data type specified in the metric definition.
	//
	// Within a single operation, it is not allowed to have more than one
	// MetricValue instances that have the same metric names and identical
	// label value combinations. If a request has such duplicated MetricValue
	// instances, the entire request is rejected with
	// an invalid argument error.
	QuotaMetrics []*MetricValueSet `protobuf:"bytes,5,rep,name=quota_metrics,json=quotaMetrics" json:"quota_metrics,omitempty"`
	// Quota mode for this operation.
	QuotaMode QuotaOperation_QuotaMode `protobuf:"varint,6,opt,name=quota_mode,json=quotaMode,proto3,enum=google.api.servicecontrol.v1.QuotaOperation_QuotaMode" json:"quota_mode,omitempty"`
}

func (m *QuotaOperation) Reset()                    { *m = QuotaOperation{} }
func (m *QuotaOperation) String() string            { return proto.CompactTextString(m) }
func (*QuotaOperation) ProtoMessage()               {}
func (*QuotaOperation) Descriptor() ([]byte, []int) { return fileDescriptorQuotaController, []int{1} }

func (m *QuotaOperation) GetOperationId() string {
	if m != nil {
		return m.OperationId
	}
	return ""
}

func (m *QuotaOperation) GetMethodName() string {
	if m != nil {
		return m.MethodName
	}
	return ""
}

func (m *QuotaOperation) GetConsumerId() string {
	if m != nil {
		return m.ConsumerId
	}
	return ""
}

func (m *QuotaOperation) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *QuotaOperation) GetQuotaMetrics() []*MetricValueSet {
	if m != nil {
		return m.QuotaMetrics
	}
	return nil
}

func (m *QuotaOperation) GetQuotaMode() QuotaOperation_QuotaMode {
	if m != nil {
		return m.QuotaMode
	}
	return QuotaOperation_UNSPECIFIED
}

// Response message for the AllocateQuota method.
type AllocateQuotaResponse struct {
	// The same operation_id value used in the AllocateQuotaRequest. Used for
	// logging and diagnostics purposes.
	OperationId string `protobuf:"bytes,1,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
	// Indicates the decision of the allocate.
	AllocateErrors []*QuotaError `protobuf:"bytes,2,rep,name=allocate_errors,json=allocateErrors" json:"allocate_errors,omitempty"`
	// Quota metrics to indicate the result of allocation. Depending on the
	// request, one or more of the following metrics will be included:
	//
	// 1. Per quota group or per quota metric incremental usage will be specified
	// using the following delta metric :
	//   "serviceruntime.googleapis.com/api/consumer/quota_used_count"
	//
	// 2. The quota limit reached condition will be specified using the following
	// boolean metric :
	//   "serviceruntime.googleapis.com/quota/exceeded"
	QuotaMetrics []*MetricValueSet `protobuf:"bytes,3,rep,name=quota_metrics,json=quotaMetrics" json:"quota_metrics,omitempty"`
	// ID of the actual config used to process the request.
	ServiceConfigId string `protobuf:"bytes,4,opt,name=service_config_id,json=serviceConfigId,proto3" json:"service_config_id,omitempty"`
}

func (m *AllocateQuotaResponse) Reset()         { *m = AllocateQuotaResponse{} }
func (m *AllocateQuotaResponse) String() string { return proto.CompactTextString(m) }
func (*AllocateQuotaResponse) ProtoMessage()    {}
func (*AllocateQuotaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorQuotaController, []int{2}
}

func (m *AllocateQuotaResponse) GetOperationId() string {
	if m != nil {
		return m.OperationId
	}
	return ""
}

func (m *AllocateQuotaResponse) GetAllocateErrors() []*QuotaError {
	if m != nil {
		return m.AllocateErrors
	}
	return nil
}

func (m *AllocateQuotaResponse) GetQuotaMetrics() []*MetricValueSet {
	if m != nil {
		return m.QuotaMetrics
	}
	return nil
}

func (m *AllocateQuotaResponse) GetServiceConfigId() string {
	if m != nil {
		return m.ServiceConfigId
	}
	return ""
}

// Represents error information for [QuotaOperation][google.api.servicecontrol.v1.QuotaOperation].
type QuotaError struct {
	// Error code.
	Code QuotaError_Code `protobuf:"varint,1,opt,name=code,proto3,enum=google.api.servicecontrol.v1.QuotaError_Code" json:"code,omitempty"`
	// Subject to whom this error applies. See the specific enum for more details
	// on this field. For example, "clientip:<ip address of client>" or
	// "project:<Google developer project id>".
	Subject string `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	// Free-form text that provides details on the cause of the error.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *QuotaError) Reset()                    { *m = QuotaError{} }
func (m *QuotaError) String() string            { return proto.CompactTextString(m) }
func (*QuotaError) ProtoMessage()               {}
func (*QuotaError) Descriptor() ([]byte, []int) { return fileDescriptorQuotaController, []int{3} }

func (m *QuotaError) GetCode() QuotaError_Code {
	if m != nil {
		return m.Code
	}
	return QuotaError_UNSPECIFIED
}

func (m *QuotaError) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *QuotaError) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func init() {
	proto.RegisterType((*AllocateQuotaRequest)(nil), "google.api.servicecontrol.v1.AllocateQuotaRequest")
	proto.RegisterType((*QuotaOperation)(nil), "google.api.servicecontrol.v1.QuotaOperation")
	proto.RegisterType((*AllocateQuotaResponse)(nil), "google.api.servicecontrol.v1.AllocateQuotaResponse")
	proto.RegisterType((*QuotaError)(nil), "google.api.servicecontrol.v1.QuotaError")
	proto.RegisterEnum("google.api.servicecontrol.v1.QuotaOperation_QuotaMode", QuotaOperation_QuotaMode_name, QuotaOperation_QuotaMode_value)
	proto.RegisterEnum("google.api.servicecontrol.v1.QuotaError_Code", QuotaError_Code_name, QuotaError_Code_value)
}

func init() {
	proto.RegisterFile("google/api/servicecontrol/v1/quota_controller.proto", fileDescriptorQuotaController)
}

var fileDescriptorQuotaController = []byte{
	// 744 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xcd, 0x6e, 0xd3, 0x4a,
	0x14, 0xbe, 0x76, 0xd2, 0xdc, 0xdb, 0xe3, 0x36, 0x71, 0xe7, 0x16, 0x64, 0x45, 0x95, 0x1a, 0xb2,
	0x0a, 0x15, 0x38, 0x6a, 0x8a, 0x50, 0xa9, 0xc4, 0x22, 0x71, 0xa6, 0xd4, 0x34, 0x4d, 0x52, 0x27,
	0xa9, 0x5a, 0xb1, 0xb0, 0x5c, 0x7b, 0x28, 0xa6, 0x8e, 0x27, 0xb5, 0x9d, 0x48, 0x15, 0x62, 0xc3,
	0x82, 0x15, 0x3b, 0x78, 0x0e, 0x1e, 0xa2, 0xaf, 0xc0, 0x2b, 0xf0, 0x0e, 0xb0, 0x44, 0x33, 0x76,
	0x42, 0x5a, 0x55, 0xa1, 0x11, 0x3b, 0xcf, 0xe7, 0xf9, 0xbe, 0xf3, 0xf3, 0x9d, 0x39, 0xb0, 0x75,
	0x46, 0xe9, 0x99, 0x47, 0xca, 0xd6, 0xc0, 0x2d, 0x87, 0x24, 0x18, 0xb9, 0x36, 0xb1, 0xa9, 0x1f,
	0x05, 0xd4, 0x2b, 0x8f, 0x36, 0xcb, 0x17, 0x43, 0x1a, 0x59, 0x66, 0x02, 0x78, 0x24, 0x50, 0x07,
	0x01, 0x8d, 0x28, 0x5a, 0x8b, 0x49, 0xaa, 0x35, 0x70, 0xd5, 0xeb, 0x24, 0x75, 0xb4, 0x99, 0x5f,
	0x9b, 0x92, 0xb4, 0x7c, 0x9f, 0x46, 0x56, 0xe4, 0x52, 0x3f, 0x8c, 0xb9, 0xf9, 0xf2, 0xcc, 0x80,
	0x7d, 0x12, 0x05, 0xae, 0x6d, 0x8e, 0x2c, 0x6f, 0x48, 0x62, 0x42, 0xf1, 0x4a, 0x80, 0xd5, 0xaa,
	0xe7, 0x51, 0xdb, 0x8a, 0xc8, 0x21, 0xcb, 0xc7, 0x20, 0x17, 0x43, 0x12, 0x46, 0xe8, 0x01, 0x2c,
	0x25, 0x02, 0xa6, 0x6f, 0xf5, 0x89, 0x22, 0x14, 0x84, 0xd2, 0xa2, 0x21, 0x25, 0x58, 0xd3, 0xea,
	0x13, 0xf4, 0x0a, 0x90, 0x95, 0x50, 0x4d, 0x3a, 0x20, 0x01, 0xcf, 0x44, 0x11, 0x0b, 0x42, 0x49,
	0xaa, 0x3c, 0x52, 0x67, 0x55, 0xa1, 0xf2, 0x50, 0xad, 0x31, 0xc7, 0x58, 0x19, 0xeb, 0x4c, 0x20,
	0xb4, 0x01, 0x2b, 0xe3, 0xf8, 0x36, 0xf5, 0x5f, 0xbb, 0x67, 0xa6, 0xeb, 0x28, 0x69, 0x9e, 0x44,
	0x2e, 0xf9, 0xa1, 0x71, 0x5c, 0x77, 0x8a, 0x3f, 0x52, 0x90, 0xbd, 0xae, 0xc8, 0xd2, 0x9f, 0xa4,
	0xc4, 0x98, 0x49, 0xfa, 0x13, 0x4c, 0x77, 0xd0, 0x3a, 0x48, 0x7d, 0x12, 0xbd, 0xa1, 0x4e, 0x5c,
	0xa0, 0xc8, 0x6f, 0x40, 0x0c, 0xf1, 0xfa, 0xd6, 0x41, 0xb2, 0xa9, 0x1f, 0x0e, 0xfb, 0x24, 0x60,
	0x12, 0xa9, 0xf8, 0xc2, 0x18, 0xd2, 0x1d, 0xd4, 0x86, 0x8c, 0x67, 0x9d, 0x12, 0x2f, 0x54, 0xd2,
	0x85, 0x54, 0x49, 0xaa, 0x6c, 0xcf, 0x53, 0xb4, 0xda, 0xe0, 0x54, 0xec, 0x47, 0xc1, 0xa5, 0x91,
	0xe8, 0xa0, 0x43, 0x58, 0x8e, 0xa7, 0x22, 0xb6, 0x2a, 0x54, 0x16, 0xb8, 0xf0, 0x1f, 0xba, 0x79,
	0xc0, 0x2f, 0x1f, 0x31, 0x5b, 0x3b, 0x24, 0x32, 0x96, 0xb8, 0x44, 0x0c, 0x86, 0xa8, 0x07, 0x90,
	0x48, 0x52, 0x87, 0x28, 0x99, 0x82, 0x50, 0xca, 0x56, 0x9e, 0xce, 0x95, 0x28, 0x3f, 0x1e, 0x50,
	0x87, 0x18, 0x8b, 0x17, 0xe3, 0xcf, 0xfc, 0x33, 0x90, 0xa6, 0x0a, 0x40, 0x32, 0xa4, 0xce, 0xc9,
	0x65, 0xd2, 0x66, 0xf6, 0x89, 0x56, 0x61, 0x81, 0x0f, 0x5a, 0xd2, 0xd8, 0xf8, 0xb0, 0x23, 0x6e,
	0x0b, 0x45, 0x1d, 0x16, 0x27, 0x92, 0x28, 0x07, 0x52, 0xaf, 0xd9, 0x69, 0x63, 0x4d, 0xdf, 0xd5,
	0x71, 0x5d, 0xfe, 0x07, 0x01, 0x64, 0x9a, 0x2d, 0xe3, 0xa0, 0xda, 0x90, 0x05, 0xf6, 0xb3, 0x86,
	0x3b, 0x5d, 0x13, 0xef, 0xee, 0xb6, 0x8c, 0xae, 0x2c, 0xa2, 0x2c, 0x80, 0xb6, 0x87, 0xb5, 0x7d,
	0xb3, 0xd5, 0x6c, 0x9c, 0xc8, 0xa9, 0xe2, 0x27, 0x11, 0xee, 0xdd, 0x18, 0xdf, 0x70, 0x40, 0xfd,
	0x90, 0xdc, 0x65, 0x00, 0x0e, 0x21, 0x37, 0x99, 0x5f, 0x12, 0x04, 0x34, 0x08, 0x15, 0x91, 0xb7,
	0xbb, 0x74, 0x87, 0xf6, 0x60, 0x46, 0x30, 0xb2, 0x63, 0x01, 0x7e, 0xbc, 0xc5, 0xbf, 0xd4, 0x5f,
	0xfb, 0x37, 0xcf, 0x43, 0xf8, 0x22, 0x02, 0xfc, 0xce, 0x0e, 0x55, 0x21, 0x6d, 0x33, 0xd3, 0x05,
	0x6e, 0xfa, 0xe3, 0xbb, 0x56, 0xa5, 0x6a, 0xcc, 0x6b, 0x4e, 0x45, 0x0a, 0xfc, 0x1b, 0x0e, 0x4f,
	0xdf, 0x12, 0x3b, 0x4a, 0x7c, 0x1c, 0x1f, 0x51, 0x01, 0x24, 0x87, 0x84, 0x76, 0xe0, 0x0e, 0xf8,
	0xb3, 0x8f, 0x5f, 0xc7, 0x34, 0x54, 0xfc, 0x28, 0x40, 0x5a, 0xbb, 0xd5, 0xe3, 0xfb, 0x80, 0x0c,
	0xdc, 0x69, 0xf5, 0x0c, 0x0d, 0x9b, 0xf8, 0x78, 0xaf, 0xda, 0xeb, 0x74, 0x71, 0x5d, 0xfe, 0x8f,
	0xe1, 0x35, 0xbd, 0xd1, 0xd0, 0x9b, 0x2f, 0xcc, 0x66, 0xab, 0x6b, 0x56, 0xb5, 0xae, 0x7e, 0x84,
	0xe5, 0x73, 0xf4, 0x3f, 0xe4, 0xda, 0x46, 0xeb, 0x25, 0xd6, 0xba, 0x66, 0x1d, 0x37, 0x30, 0xbb,
	0xec, 0x31, 0xb0, 0xda, 0xd6, 0xcd, 0x7d, 0x7c, 0x62, 0xea, 0xcd, 0xa3, 0x6a, 0x43, 0xaf, 0xcb,
	0xee, 0x34, 0x88, 0x8f, 0xdb, 0xba, 0x81, 0xeb, 0xf2, 0xa0, 0x72, 0x25, 0x40, 0x8e, 0x97, 0xa7,
	0x4d, 0x76, 0x2d, 0xfa, 0x2a, 0xc0, 0xf2, 0xb5, 0xc9, 0x41, 0x95, 0xd9, 0xfd, 0xb9, 0x6d, 0x4b,
	0xe6, 0xb7, 0xe6, 0xe2, 0xc4, 0xa3, 0x59, 0x7c, 0xf2, 0xe1, 0xdb, 0xf7, 0xcf, 0xa2, 0x5a, 0x7c,
	0xc8, 0x76, 0x72, 0x42, 0x0a, 0xcb, 0xef, 0xa6, 0xd7, 0xed, 0xfb, 0x1d, 0x6b, 0x9a, 0xba, 0x23,
	0x6c, 0xd4, 0x9e, 0x43, 0xc1, 0xa6, 0xfd, 0x99, 0xf1, 0x6a, 0xab, 0x37, 0xaa, 0x6c, 0xb3, 0x1d,
	0xdf, 0x16, 0x7e, 0x0a, 0xc2, 0x69, 0x86, 0xef, 0xfb, 0xad, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff,
	0xcd, 0xda, 0x4b, 0xb3, 0x93, 0x06, 0x00, 0x00,
}
