// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/spanner/v1/result_set.proto

package google_spanner_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "go.pedge.io/pb/go/google/api"
import google_protobuf1 "github.com/golang/protobuf/ptypes/struct"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Results from [Read][google.spanner.v1.Spanner.Read] or
// [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql].
type ResultSet struct {
	// Metadata about the result set, such as row type information.
	Metadata *ResultSetMetadata `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// Each element in `rows` is a row whose format is defined by
	// [metadata.row_type][google.spanner.v1.ResultSetMetadata.row_type]. The ith element
	// in each row matches the ith field in
	// [metadata.row_type][google.spanner.v1.ResultSetMetadata.row_type]. Elements are
	// encoded based on type as described
	// [here][google.spanner.v1.TypeCode].
	Rows []*google_protobuf1.ListValue `protobuf:"bytes,2,rep,name=rows" json:"rows,omitempty"`
	// Query plan and execution statistics for the query that produced this
	// result set. These can be requested by setting
	// [ExecuteSqlRequest.query_mode][google.spanner.v1.ExecuteSqlRequest.query_mode].
	Stats *ResultSetStats `protobuf:"bytes,3,opt,name=stats" json:"stats,omitempty"`
}

func (m *ResultSet) Reset()                    { *m = ResultSet{} }
func (m *ResultSet) String() string            { return proto.CompactTextString(m) }
func (*ResultSet) ProtoMessage()               {}
func (*ResultSet) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *ResultSet) GetMetadata() *ResultSetMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ResultSet) GetRows() []*google_protobuf1.ListValue {
	if m != nil {
		return m.Rows
	}
	return nil
}

func (m *ResultSet) GetStats() *ResultSetStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// Partial results from a streaming read or SQL query. Streaming reads and
// SQL queries better tolerate large result sets, large rows, and large
// values, but are a little trickier to consume.
type PartialResultSet struct {
	// Metadata about the result set, such as row type information.
	// Only present in the first response.
	Metadata *ResultSetMetadata `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// A streamed result set consists of a stream of values, which might
	// be split into many `PartialResultSet` messages to accommodate
	// large rows and/or large values. Every N complete values defines a
	// row, where N is equal to the number of entries in
	// [metadata.row_type.fields][google.spanner.v1.StructType.fields].
	//
	// Most values are encoded based on type as described
	// [here][google.spanner.v1.TypeCode].
	//
	// It is possible that the last value in values is "chunked",
	// meaning that the rest of the value is sent in subsequent
	// `PartialResultSet`(s). This is denoted by the [chunked_value][google.spanner.v1.PartialResultSet.chunked_value]
	// field. Two or more chunked values can be merged to form a
	// complete value as follows:
	//
	//   * `bool/number/null`: cannot be chunked
	//   * `string`: concatenate the strings
	//   * `list`: concatenate the lists. If the last element in a list is a
	//     `string`, `list`, or `object`, merge it with the first element in
	//     the next list by applying these rules recursively.
	//   * `object`: concatenate the (field name, field value) pairs. If a
	//     field name is duplicated, then apply these rules recursively
	//     to merge the field values.
	//
	// Some examples of merging:
	//
	//     # Strings are concatenated.
	//     "foo", "bar" => "foobar"
	//
	//     # Lists of non-strings are concatenated.
	//     [2, 3], [4] => [2, 3, 4]
	//
	//     # Lists are concatenated, but the last and first elements are merged
	//     # because they are strings.
	//     ["a", "b"], ["c", "d"] => ["a", "bc", "d"]
	//
	//     # Lists are concatenated, but the last and first elements are merged
	//     # because they are lists. Recursively, the last and first elements
	//     # of the inner lists are merged because they are strings.
	//     ["a", ["b", "c"]], [["d"], "e"] => ["a", ["b", "cd"], "e"]
	//
	//     # Non-overlapping object fields are combined.
	//     {"a": "1"}, {"b": "2"} => {"a": "1", "b": 2"}
	//
	//     # Overlapping object fields are merged.
	//     {"a": "1"}, {"a": "2"} => {"a": "12"}
	//
	//     # Examples of merging objects containing lists of strings.
	//     {"a": ["1"]}, {"a": ["2"]} => {"a": ["12"]}
	//
	// For a more complete example, suppose a streaming SQL query is
	// yielding a result set whose rows contain a single string
	// field. The following `PartialResultSet`s might be yielded:
	//
	//     {
	//       "metadata": { ... }
	//       "values": ["Hello", "W"]
	//       "chunked_value": true
	//       "resume_token": "Af65..."
	//     }
	//     {
	//       "values": ["orl"]
	//       "chunked_value": true
	//       "resume_token": "Bqp2..."
	//     }
	//     {
	//       "values": ["d"]
	//       "resume_token": "Zx1B..."
	//     }
	//
	// This sequence of `PartialResultSet`s encodes two rows, one
	// containing the field value `"Hello"`, and a second containing the
	// field value `"World" = "W" + "orl" + "d"`.
	Values []*google_protobuf1.Value `protobuf:"bytes,2,rep,name=values" json:"values,omitempty"`
	// If true, then the final value in [values][google.spanner.v1.PartialResultSet.values] is chunked, and must
	// be combined with more values from subsequent `PartialResultSet`s
	// to obtain a complete field value.
	ChunkedValue bool `protobuf:"varint,3,opt,name=chunked_value,json=chunkedValue" json:"chunked_value,omitempty"`
	// Streaming calls might be interrupted for a variety of reasons, such
	// as TCP connection loss. If this occurs, the stream of results can
	// be resumed by re-sending the original request and including
	// `resume_token`. Note that executing any other transaction in the
	// same session invalidates the token.
	ResumeToken []byte `protobuf:"bytes,4,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty"`
	// Query plan and execution statistics for the query that produced this
	// streaming result set. These can be requested by setting
	// [ExecuteSqlRequest.query_mode][google.spanner.v1.ExecuteSqlRequest.query_mode] and are sent
	// only once with the last response in the stream.
	Stats *ResultSetStats `protobuf:"bytes,5,opt,name=stats" json:"stats,omitempty"`
}

func (m *PartialResultSet) Reset()                    { *m = PartialResultSet{} }
func (m *PartialResultSet) String() string            { return proto.CompactTextString(m) }
func (*PartialResultSet) ProtoMessage()               {}
func (*PartialResultSet) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *PartialResultSet) GetMetadata() *ResultSetMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *PartialResultSet) GetValues() []*google_protobuf1.Value {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *PartialResultSet) GetChunkedValue() bool {
	if m != nil {
		return m.ChunkedValue
	}
	return false
}

func (m *PartialResultSet) GetResumeToken() []byte {
	if m != nil {
		return m.ResumeToken
	}
	return nil
}

func (m *PartialResultSet) GetStats() *ResultSetStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// Metadata about a [ResultSet][google.spanner.v1.ResultSet] or [PartialResultSet][google.spanner.v1.PartialResultSet].
type ResultSetMetadata struct {
	// Indicates the field names and types for the rows in the result
	// set.  For example, a SQL query like `"SELECT UserId, UserName FROM
	// Users"` could return a `row_type` value like:
	//
	//     "fields": [
	//       { "name": "UserId", "type": { "code": "INT64" } },
	//       { "name": "UserName", "type": { "code": "STRING" } },
	//     ]
	RowType *StructType `protobuf:"bytes,1,opt,name=row_type,json=rowType" json:"row_type,omitempty"`
	// If the read or SQL query began a transaction as a side-effect, the
	// information about the new transaction is yielded here.
	Transaction *Transaction `protobuf:"bytes,2,opt,name=transaction" json:"transaction,omitempty"`
}

func (m *ResultSetMetadata) Reset()                    { *m = ResultSetMetadata{} }
func (m *ResultSetMetadata) String() string            { return proto.CompactTextString(m) }
func (*ResultSetMetadata) ProtoMessage()               {}
func (*ResultSetMetadata) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *ResultSetMetadata) GetRowType() *StructType {
	if m != nil {
		return m.RowType
	}
	return nil
}

func (m *ResultSetMetadata) GetTransaction() *Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

// Additional statistics about a [ResultSet][google.spanner.v1.ResultSet] or [PartialResultSet][google.spanner.v1.PartialResultSet].
type ResultSetStats struct {
	// [QueryPlan][google.spanner.v1.QueryPlan] for the query associated with this result.
	QueryPlan *QueryPlan `protobuf:"bytes,1,opt,name=query_plan,json=queryPlan" json:"query_plan,omitempty"`
	// Aggregated statistics from the execution of the query. Only present when
	// the query is profiled. For example, a query could return the statistics as
	// follows:
	//
	//     {
	//       "rows_returned": "3",
	//       "elapsed_time": "1.22 secs",
	//       "cpu_time": "1.19 secs"
	//     }
	QueryStats *google_protobuf1.Struct `protobuf:"bytes,2,opt,name=query_stats,json=queryStats" json:"query_stats,omitempty"`
}

func (m *ResultSetStats) Reset()                    { *m = ResultSetStats{} }
func (m *ResultSetStats) String() string            { return proto.CompactTextString(m) }
func (*ResultSetStats) ProtoMessage()               {}
func (*ResultSetStats) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *ResultSetStats) GetQueryPlan() *QueryPlan {
	if m != nil {
		return m.QueryPlan
	}
	return nil
}

func (m *ResultSetStats) GetQueryStats() *google_protobuf1.Struct {
	if m != nil {
		return m.QueryStats
	}
	return nil
}

func init() {
	proto.RegisterType((*ResultSet)(nil), "google.spanner.v1.ResultSet")
	proto.RegisterType((*PartialResultSet)(nil), "google.spanner.v1.PartialResultSet")
	proto.RegisterType((*ResultSetMetadata)(nil), "google.spanner.v1.ResultSetMetadata")
	proto.RegisterType((*ResultSetStats)(nil), "google.spanner.v1.ResultSetStats")
}

func init() { proto.RegisterFile("google/spanner/v1/result_set.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 472 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xcd, 0x6e, 0x13, 0x31,
	0x14, 0x85, 0xe5, 0xf4, 0x87, 0xf4, 0x4e, 0x40, 0xd4, 0x12, 0x74, 0x14, 0x15, 0x94, 0xa6, 0x2c,
	0xb2, 0xf2, 0x28, 0x65, 0x41, 0x25, 0x36, 0x55, 0x59, 0xb0, 0x01, 0x29, 0x38, 0x51, 0x56, 0x91,
	0x06, 0x37, 0x31, 0x25, 0xea, 0xc4, 0x9e, 0xd8, 0x9e, 0x44, 0x79, 0x00, 0xc4, 0x92, 0xf7, 0xe0,
	0x01, 0x78, 0x08, 0x9e, 0x88, 0x25, 0xf2, 0xcf, 0x24, 0x81, 0x89, 0x90, 0x90, 0xba, 0x9b, 0xf1,
	0xfd, 0x8e, 0xcf, 0x3d, 0xd7, 0x17, 0xda, 0xb7, 0x52, 0xde, 0x66, 0x3c, 0xd1, 0x39, 0x13, 0x82,
	0xab, 0x64, 0xd1, 0x4d, 0x14, 0xd7, 0x45, 0x66, 0x52, 0xcd, 0x0d, 0xc9, 0x95, 0x34, 0x12, 0x1f,
	0x7b, 0x86, 0x04, 0x86, 0x2c, 0xba, 0xcd, 0xd3, 0x20, 0x63, 0xf9, 0x34, 0x61, 0x42, 0x48, 0xc3,
	0xcc, 0x54, 0x0a, 0xed, 0x05, 0xeb, 0xaa, 0xfb, 0xbb, 0x29, 0x3e, 0x25, 0xda, 0xa8, 0x62, 0x1c,
	0xae, 0x6b, 0xee, 0xb0, 0x9c, 0x17, 0x5c, 0xad, 0xd2, 0x3c, 0x63, 0x22, 0x30, 0xe7, 0x55, 0xc6,
	0x28, 0x26, 0x34, 0x1b, 0x5b, 0x9f, 0xbf, 0x6c, 0xb6, 0xa1, 0x55, 0xce, 0x7d, 0xb5, 0xfd, 0x03,
	0xc1, 0x11, 0x75, 0x51, 0xfa, 0xdc, 0xe0, 0x2b, 0xa8, 0xcf, 0xb8, 0x61, 0x13, 0x66, 0x58, 0x8c,
	0x5a, 0xa8, 0x13, 0x5d, 0xbc, 0x20, 0x95, 0x58, 0x64, 0xcd, 0xbf, 0x0f, 0x2c, 0x5d, 0xab, 0x30,
	0x81, 0x7d, 0x25, 0x97, 0x3a, 0xae, 0xb5, 0xf6, 0x3a, 0xd1, 0x45, 0xb3, 0x54, 0x97, 0x19, 0xc9,
	0xbb, 0xa9, 0x36, 0x43, 0x96, 0x15, 0x9c, 0x3a, 0x0e, 0xbf, 0x82, 0x03, 0x6d, 0x98, 0xd1, 0xf1,
	0x9e, 0xb3, 0x3b, 0xfb, 0x97, 0x5d, 0xdf, 0x82, 0xd4, 0xf3, 0xed, 0x2f, 0x35, 0x78, 0xdc, 0x63,
	0xca, 0x4c, 0x59, 0x76, 0xbf, 0xfd, 0x1f, 0x2e, 0x6c, 0x7b, 0x65, 0x82, 0xa7, 0x95, 0x04, 0xbe,
	0xfb, 0x40, 0xe1, 0x73, 0x78, 0x38, 0xfe, 0x5c, 0x88, 0x3b, 0x3e, 0x49, 0xdd, 0x89, 0xcb, 0x51,
	0xa7, 0x8d, 0x70, 0xe8, 0x60, 0x7c, 0x06, 0x0d, 0xbb, 0x2e, 0x33, 0x9e, 0x1a, 0x79, 0xc7, 0x45,
	0xbc, 0xdf, 0x42, 0x9d, 0x06, 0x8d, 0xfc, 0xd9, 0xc0, 0x1e, 0x6d, 0xe6, 0x70, 0xf0, 0x9f, 0x73,
	0xf8, 0x86, 0xe0, 0xb8, 0x12, 0x08, 0x5f, 0x42, 0x5d, 0xc9, 0x65, 0x6a, 0x1f, 0x3a, 0x0c, 0xe2,
	0xd9, 0x8e, 0x1b, 0xfb, 0x6e, 0xe1, 0x06, 0xab, 0x9c, 0xd3, 0x07, 0x4a, 0x2e, 0xed, 0x07, 0xbe,
	0x82, 0x68, 0x6b, 0x87, 0xe2, 0x9a, 0x13, 0x3f, 0xdf, 0x21, 0x1e, 0x6c, 0x28, 0xba, 0x2d, 0x69,
	0x7f, 0x45, 0xf0, 0xe8, 0xcf, 0x5e, 0xf1, 0x6b, 0x80, 0xcd, 0xf2, 0x86, 0x86, 0x4e, 0x77, 0xdc,
	0xf9, 0xc1, 0x42, 0xbd, 0x8c, 0x09, 0x7a, 0x34, 0x2f, 0x3f, 0xf1, 0x25, 0x44, 0x5e, 0xec, 0x07,
	0xe4, 0x3b, 0x3a, 0xa9, 0xbc, 0x8b, 0x0f, 0x43, 0xbd, 0x91, 0xb3, 0xbd, 0xfe, 0x08, 0x4f, 0xc6,
	0x72, 0x56, 0xf5, 0xb9, 0xde, 0xf4, 0xd7, 0xb3, 0xf2, 0x1e, 0xfa, 0x85, 0xd0, 0xf7, 0xda, 0xc9,
	0x5b, 0x0f, 0xbe, 0xc9, 0x64, 0x31, 0x21, 0xfd, 0x80, 0x0f, 0xbb, 0x3f, 0xcb, 0xca, 0xc8, 0x55,
	0x46, 0xa1, 0x32, 0x1a, 0x76, 0x6f, 0x0e, 0x9d, 0xfd, 0xcb, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x88, 0x2a, 0xe5, 0x9d, 0x21, 0x04, 0x00, 0x00,
}
