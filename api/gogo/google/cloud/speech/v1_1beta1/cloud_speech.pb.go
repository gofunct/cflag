// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: google/cloud/speech/v1_1beta1/cloud_speech.proto

package google_cloud_speech_v1p1beta1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "go.pedge.io/pb/gogo/google/api"
import _ "go.pedge.io/pb/gogo/google/longrunning"
import google_protobuf3 "github.com/gogo/protobuf/types"
import google_protobuf4 "github.com/gogo/protobuf/types"
import google_rpc "go.pedge.io/pb/gogo/google/rpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Audio encoding of the data sent in the audio message. All encodings support
// only 1 channel (mono) audio. Only `FLAC` includes a header that describes
// the bytes of audio that follow the header. The other encodings are raw
// audio bytes with no header.
//
// For best results, the audio source should be captured and transmitted using
// a lossless encoding (`FLAC` or `LINEAR16`). Recognition accuracy may be
// reduced if lossy codecs, which include the other codecs listed in
// this section, are used to capture or transmit the audio, particularly if
// background noise is present.
type RecognitionConfig_AudioEncoding int32

const (
	// Not specified. Will return result [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT].
	RecognitionConfig_ENCODING_UNSPECIFIED RecognitionConfig_AudioEncoding = 0
	// Uncompressed 16-bit signed little-endian samples (Linear PCM).
	RecognitionConfig_LINEAR16 RecognitionConfig_AudioEncoding = 1
	// [`FLAC`](https://xiph.org/flac/documentation.html) (Free Lossless Audio
	// Codec) is the recommended encoding because it is
	// lossless--therefore recognition is not compromised--and
	// requires only about half the bandwidth of `LINEAR16`. `FLAC` stream
	// encoding supports 16-bit and 24-bit samples, however, not all fields in
	// `STREAMINFO` are supported.
	RecognitionConfig_FLAC RecognitionConfig_AudioEncoding = 2
	// 8-bit samples that compand 14-bit audio samples using G.711 PCMU/mu-law.
	RecognitionConfig_MULAW RecognitionConfig_AudioEncoding = 3
	// Adaptive Multi-Rate Narrowband codec. `sample_rate_hertz` must be 8000.
	RecognitionConfig_AMR RecognitionConfig_AudioEncoding = 4
	// Adaptive Multi-Rate Wideband codec. `sample_rate_hertz` must be 16000.
	RecognitionConfig_AMR_WB RecognitionConfig_AudioEncoding = 5
	// Opus encoded audio frames in Ogg container
	// ([OggOpus](https://wiki.xiph.org/OggOpus)).
	// `sample_rate_hertz` must be 16000.
	RecognitionConfig_OGG_OPUS RecognitionConfig_AudioEncoding = 6
	// Although the use of lossy encodings is not recommended, if a very low
	// bitrate encoding is required, `OGG_OPUS` is highly preferred over
	// Speex encoding. The [Speex](https://speex.org/)  encoding supported by
	// Cloud Speech API has a header byte in each block, as in MIME type
	// `audio/x-speex-with-header-byte`.
	// It is a variant of the RTP Speex encoding defined in
	// [RFC 5574](https://tools.ietf.org/html/rfc5574).
	// The stream is a sequence of blocks, one block per RTP packet. Each block
	// starts with a byte containing the length of the block, in bytes, followed
	// by one or more frames of Speex data, padded to an integral number of
	// bytes (octets) as specified in RFC 5574. In other words, each RTP header
	// is replaced with a single byte containing the block length. Only Speex
	// wideband is supported. `sample_rate_hertz` must be 16000.
	RecognitionConfig_SPEEX_WITH_HEADER_BYTE RecognitionConfig_AudioEncoding = 7
)

var RecognitionConfig_AudioEncoding_name = map[int32]string{
	0: "ENCODING_UNSPECIFIED",
	1: "LINEAR16",
	2: "FLAC",
	3: "MULAW",
	4: "AMR",
	5: "AMR_WB",
	6: "OGG_OPUS",
	7: "SPEEX_WITH_HEADER_BYTE",
}
var RecognitionConfig_AudioEncoding_value = map[string]int32{
	"ENCODING_UNSPECIFIED":   0,
	"LINEAR16":               1,
	"FLAC":                   2,
	"MULAW":                  3,
	"AMR":                    4,
	"AMR_WB":                 5,
	"OGG_OPUS":               6,
	"SPEEX_WITH_HEADER_BYTE": 7,
}

func (x RecognitionConfig_AudioEncoding) String() string {
	return proto.EnumName(RecognitionConfig_AudioEncoding_name, int32(x))
}
func (RecognitionConfig_AudioEncoding) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorCloudSpeech, []int{4, 0}
}

// Use case categories that the audio recognition request can be described
// by.
type RecognitionMetadata_InteractionType int32

const (
	// Use case is either unknown or is something other than one of the other
	// values below.
	RecognitionMetadata_INTERACTION_TYPE_UNSPECIFIED RecognitionMetadata_InteractionType = 0
	// Multiple people in a conversation or discussion. For example in a
	// meeting with two or more people actively participating. Typically
	// all the primary people speaking would be in the same room (if not,
	// see PHONE_CALL)
	RecognitionMetadata_DISCUSSION RecognitionMetadata_InteractionType = 1
	// One or more persons lecturing or presenting to others, mostly
	// uninterrupted.
	RecognitionMetadata_PRESENTATION RecognitionMetadata_InteractionType = 2
	// A phone-call or video-conference in which two or more people, who are
	// not in the same room, are actively participating.
	RecognitionMetadata_PHONE_CALL RecognitionMetadata_InteractionType = 3
	// A recorded message intended for another person to listen to.
	RecognitionMetadata_VOICEMAIL RecognitionMetadata_InteractionType = 4
	// Professionally produced audio (eg. TV Show, Podcast).
	RecognitionMetadata_PROFESSIONALLY_PRODUCED RecognitionMetadata_InteractionType = 5
	// Transcribe spoken questions and queries into text.
	RecognitionMetadata_VOICE_SEARCH RecognitionMetadata_InteractionType = 6
	// Transcribe voice commands, such as for controlling a device.
	RecognitionMetadata_VOICE_COMMAND RecognitionMetadata_InteractionType = 7
	// Transcribe speech to text to create a written document, such as a
	// text-message, email or report.
	RecognitionMetadata_DICTATION RecognitionMetadata_InteractionType = 8
)

var RecognitionMetadata_InteractionType_name = map[int32]string{
	0: "INTERACTION_TYPE_UNSPECIFIED",
	1: "DISCUSSION",
	2: "PRESENTATION",
	3: "PHONE_CALL",
	4: "VOICEMAIL",
	5: "PROFESSIONALLY_PRODUCED",
	6: "VOICE_SEARCH",
	7: "VOICE_COMMAND",
	8: "DICTATION",
}
var RecognitionMetadata_InteractionType_value = map[string]int32{
	"INTERACTION_TYPE_UNSPECIFIED": 0,
	"DISCUSSION":                   1,
	"PRESENTATION":                 2,
	"PHONE_CALL":                   3,
	"VOICEMAIL":                    4,
	"PROFESSIONALLY_PRODUCED":      5,
	"VOICE_SEARCH":                 6,
	"VOICE_COMMAND":                7,
	"DICTATION":                    8,
}

func (x RecognitionMetadata_InteractionType) String() string {
	return proto.EnumName(RecognitionMetadata_InteractionType_name, int32(x))
}
func (RecognitionMetadata_InteractionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorCloudSpeech, []int{5, 0}
}

// Enumerates the types of capture settings describing an audio file.
type RecognitionMetadata_MicrophoneDistance int32

const (
	// Audio type is not known.
	RecognitionMetadata_MICROPHONE_DISTANCE_UNSPECIFIED RecognitionMetadata_MicrophoneDistance = 0
	// The audio was captured from a closely placed microphone. Eg. phone,
	// dictaphone, or handheld microphone. Generally if there speaker is within
	// 1 meter of the microphone.
	RecognitionMetadata_NEARFIELD RecognitionMetadata_MicrophoneDistance = 1
	// The speaker if within 3 meters of the microphone.
	RecognitionMetadata_MIDFIELD RecognitionMetadata_MicrophoneDistance = 2
	// The speaker is more than 3 meters away from the microphone.
	RecognitionMetadata_FARFIELD RecognitionMetadata_MicrophoneDistance = 3
)

var RecognitionMetadata_MicrophoneDistance_name = map[int32]string{
	0: "MICROPHONE_DISTANCE_UNSPECIFIED",
	1: "NEARFIELD",
	2: "MIDFIELD",
	3: "FARFIELD",
}
var RecognitionMetadata_MicrophoneDistance_value = map[string]int32{
	"MICROPHONE_DISTANCE_UNSPECIFIED": 0,
	"NEARFIELD":                       1,
	"MIDFIELD":                        2,
	"FARFIELD":                        3,
}

func (x RecognitionMetadata_MicrophoneDistance) String() string {
	return proto.EnumName(RecognitionMetadata_MicrophoneDistance_name, int32(x))
}
func (RecognitionMetadata_MicrophoneDistance) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorCloudSpeech, []int{5, 1}
}

// The original media the speech was recorded on.
type RecognitionMetadata_OriginalMediaType int32

const (
	// Unknown original media type.
	RecognitionMetadata_ORIGINAL_MEDIA_TYPE_UNSPECIFIED RecognitionMetadata_OriginalMediaType = 0
	// The speech data is an audio recording.
	RecognitionMetadata_AUDIO RecognitionMetadata_OriginalMediaType = 1
	// The speech data originally recorded on a video.
	RecognitionMetadata_VIDEO RecognitionMetadata_OriginalMediaType = 2
)

var RecognitionMetadata_OriginalMediaType_name = map[int32]string{
	0: "ORIGINAL_MEDIA_TYPE_UNSPECIFIED",
	1: "AUDIO",
	2: "VIDEO",
}
var RecognitionMetadata_OriginalMediaType_value = map[string]int32{
	"ORIGINAL_MEDIA_TYPE_UNSPECIFIED": 0,
	"AUDIO": 1,
	"VIDEO": 2,
}

func (x RecognitionMetadata_OriginalMediaType) String() string {
	return proto.EnumName(RecognitionMetadata_OriginalMediaType_name, int32(x))
}
func (RecognitionMetadata_OriginalMediaType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorCloudSpeech, []int{5, 2}
}

// How many speakers expected in the speech to be recognized.
type RecognitionMetadata_NumberOfSpeakers int32

const (
	// Unknown number of persons speaking.
	RecognitionMetadata_NUMBER_OF_SPEAKERS_UNSPECIFIED RecognitionMetadata_NumberOfSpeakers = 0
	// Only one person is the prominent speaker (ignore background voices).
	RecognitionMetadata_ONE_SPEAKER RecognitionMetadata_NumberOfSpeakers = 1
	// Two people are the prominent speakers (transcript should focus
	// on the two most prominent speakers).
	RecognitionMetadata_TWO_SPEAKERS RecognitionMetadata_NumberOfSpeakers = 2
	// Transcribe all voices.
	RecognitionMetadata_MULTIPLE_SPEAKERS RecognitionMetadata_NumberOfSpeakers = 3
)

var RecognitionMetadata_NumberOfSpeakers_name = map[int32]string{
	0: "NUMBER_OF_SPEAKERS_UNSPECIFIED",
	1: "ONE_SPEAKER",
	2: "TWO_SPEAKERS",
	3: "MULTIPLE_SPEAKERS",
}
var RecognitionMetadata_NumberOfSpeakers_value = map[string]int32{
	"NUMBER_OF_SPEAKERS_UNSPECIFIED": 0,
	"ONE_SPEAKER":                    1,
	"TWO_SPEAKERS":                   2,
	"MULTIPLE_SPEAKERS":              3,
}

func (x RecognitionMetadata_NumberOfSpeakers) String() string {
	return proto.EnumName(RecognitionMetadata_NumberOfSpeakers_name, int32(x))
}
func (RecognitionMetadata_NumberOfSpeakers) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorCloudSpeech, []int{5, 3}
}

// The type of device the speech was recorded with.
type RecognitionMetadata_RecordingDeviceType int32

const (
	// The recording device is unknown.
	RecognitionMetadata_RECORDING_DEVICE_TYPE_UNSPECIFIED RecognitionMetadata_RecordingDeviceType = 0
	// Speech was recorded on a smartphone.
	RecognitionMetadata_SMARTPHONE RecognitionMetadata_RecordingDeviceType = 1
	// Speech was recorded using a personal computer or tablet.
	RecognitionMetadata_PC RecognitionMetadata_RecordingDeviceType = 2
	// Speech was recorded over a phone line.
	RecognitionMetadata_PHONE_LINE RecognitionMetadata_RecordingDeviceType = 3
	// Speech was recorded in a vehicle.
	RecognitionMetadata_VEHICLE RecognitionMetadata_RecordingDeviceType = 4
	// Speech was recorded outdoors.
	RecognitionMetadata_OTHER_OUTDOOR_DEVICE RecognitionMetadata_RecordingDeviceType = 5
	// Speech was recorded indoors.
	RecognitionMetadata_OTHER_INDOOR_DEVICE RecognitionMetadata_RecordingDeviceType = 6
)

var RecognitionMetadata_RecordingDeviceType_name = map[int32]string{
	0: "RECORDING_DEVICE_TYPE_UNSPECIFIED",
	1: "SMARTPHONE",
	2: "PC",
	3: "PHONE_LINE",
	4: "VEHICLE",
	5: "OTHER_OUTDOOR_DEVICE",
	6: "OTHER_INDOOR_DEVICE",
}
var RecognitionMetadata_RecordingDeviceType_value = map[string]int32{
	"RECORDING_DEVICE_TYPE_UNSPECIFIED": 0,
	"SMARTPHONE":                        1,
	"PC":                                2,
	"PHONE_LINE":                        3,
	"VEHICLE":                           4,
	"OTHER_OUTDOOR_DEVICE":              5,
	"OTHER_INDOOR_DEVICE":               6,
}

func (x RecognitionMetadata_RecordingDeviceType) String() string {
	return proto.EnumName(RecognitionMetadata_RecordingDeviceType_name, int32(x))
}
func (RecognitionMetadata_RecordingDeviceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorCloudSpeech, []int{5, 4}
}

// Indicates the type of speech event.
type StreamingRecognizeResponse_SpeechEventType int32

const (
	// No speech event specified.
	StreamingRecognizeResponse_SPEECH_EVENT_UNSPECIFIED StreamingRecognizeResponse_SpeechEventType = 0
	// This event indicates that the server has detected the end of the user's
	// speech utterance and expects no additional speech. Therefore, the server
	// will not process additional audio (although it may subsequently return
	// additional results). The client should stop sending additional audio
	// data, half-close the gRPC connection, and wait for any additional results
	// until the server closes the gRPC connection. This event is only sent if
	// `single_utterance` was set to `true`, and is not used otherwise.
	StreamingRecognizeResponse_END_OF_SINGLE_UTTERANCE StreamingRecognizeResponse_SpeechEventType = 1
)

var StreamingRecognizeResponse_SpeechEventType_name = map[int32]string{
	0: "SPEECH_EVENT_UNSPECIFIED",
	1: "END_OF_SINGLE_UTTERANCE",
}
var StreamingRecognizeResponse_SpeechEventType_value = map[string]int32{
	"SPEECH_EVENT_UNSPECIFIED": 0,
	"END_OF_SINGLE_UTTERANCE":  1,
}

func (x StreamingRecognizeResponse_SpeechEventType) String() string {
	return proto.EnumName(StreamingRecognizeResponse_SpeechEventType_name, int32(x))
}
func (StreamingRecognizeResponse_SpeechEventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorCloudSpeech, []int{11, 0}
}

// The top-level message sent by the client for the `Recognize` method.
type RecognizeRequest struct {
	// *Required* Provides information to the recognizer that specifies how to
	// process the request.
	Config *RecognitionConfig `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
	// *Required* The audio data to be recognized.
	Audio *RecognitionAudio `protobuf:"bytes,2,opt,name=audio" json:"audio,omitempty"`
}

func (m *RecognizeRequest) Reset()                    { *m = RecognizeRequest{} }
func (m *RecognizeRequest) String() string            { return proto.CompactTextString(m) }
func (*RecognizeRequest) ProtoMessage()               {}
func (*RecognizeRequest) Descriptor() ([]byte, []int) { return fileDescriptorCloudSpeech, []int{0} }

func (m *RecognizeRequest) GetConfig() *RecognitionConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *RecognizeRequest) GetAudio() *RecognitionAudio {
	if m != nil {
		return m.Audio
	}
	return nil
}

// The top-level message sent by the client for the `LongRunningRecognize`
// method.
type LongRunningRecognizeRequest struct {
	// *Required* Provides information to the recognizer that specifies how to
	// process the request.
	Config *RecognitionConfig `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
	// *Required* The audio data to be recognized.
	Audio *RecognitionAudio `protobuf:"bytes,2,opt,name=audio" json:"audio,omitempty"`
}

func (m *LongRunningRecognizeRequest) Reset()         { *m = LongRunningRecognizeRequest{} }
func (m *LongRunningRecognizeRequest) String() string { return proto.CompactTextString(m) }
func (*LongRunningRecognizeRequest) ProtoMessage()    {}
func (*LongRunningRecognizeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorCloudSpeech, []int{1}
}

func (m *LongRunningRecognizeRequest) GetConfig() *RecognitionConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *LongRunningRecognizeRequest) GetAudio() *RecognitionAudio {
	if m != nil {
		return m.Audio
	}
	return nil
}

// The top-level message sent by the client for the `StreamingRecognize` method.
// Multiple `StreamingRecognizeRequest` messages are sent. The first message
// must contain a `streaming_config` message and must not contain `audio` data.
// All subsequent messages must contain `audio` data and must not contain a
// `streaming_config` message.
type StreamingRecognizeRequest struct {
	// The streaming request, which is either a streaming config or audio content.
	//
	// Types that are valid to be assigned to StreamingRequest:
	//	*StreamingRecognizeRequest_StreamingConfig
	//	*StreamingRecognizeRequest_AudioContent
	StreamingRequest isStreamingRecognizeRequest_StreamingRequest `protobuf_oneof:"streaming_request"`
}

func (m *StreamingRecognizeRequest) Reset()         { *m = StreamingRecognizeRequest{} }
func (m *StreamingRecognizeRequest) String() string { return proto.CompactTextString(m) }
func (*StreamingRecognizeRequest) ProtoMessage()    {}
func (*StreamingRecognizeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorCloudSpeech, []int{2}
}

type isStreamingRecognizeRequest_StreamingRequest interface {
	isStreamingRecognizeRequest_StreamingRequest()
}

type StreamingRecognizeRequest_StreamingConfig struct {
	StreamingConfig *StreamingRecognitionConfig `protobuf:"bytes,1,opt,name=streaming_config,json=streamingConfig,oneof"`
}
type StreamingRecognizeRequest_AudioContent struct {
	AudioContent []byte `protobuf:"bytes,2,opt,name=audio_content,json=audioContent,proto3,oneof"`
}

func (*StreamingRecognizeRequest_StreamingConfig) isStreamingRecognizeRequest_StreamingRequest() {}
func (*StreamingRecognizeRequest_AudioContent) isStreamingRecognizeRequest_StreamingRequest()    {}

func (m *StreamingRecognizeRequest) GetStreamingRequest() isStreamingRecognizeRequest_StreamingRequest {
	if m != nil {
		return m.StreamingRequest
	}
	return nil
}

func (m *StreamingRecognizeRequest) GetStreamingConfig() *StreamingRecognitionConfig {
	if x, ok := m.GetStreamingRequest().(*StreamingRecognizeRequest_StreamingConfig); ok {
		return x.StreamingConfig
	}
	return nil
}

func (m *StreamingRecognizeRequest) GetAudioContent() []byte {
	if x, ok := m.GetStreamingRequest().(*StreamingRecognizeRequest_AudioContent); ok {
		return x.AudioContent
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*StreamingRecognizeRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _StreamingRecognizeRequest_OneofMarshaler, _StreamingRecognizeRequest_OneofUnmarshaler, _StreamingRecognizeRequest_OneofSizer, []interface{}{
		(*StreamingRecognizeRequest_StreamingConfig)(nil),
		(*StreamingRecognizeRequest_AudioContent)(nil),
	}
}

func _StreamingRecognizeRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*StreamingRecognizeRequest)
	// streaming_request
	switch x := m.StreamingRequest.(type) {
	case *StreamingRecognizeRequest_StreamingConfig:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StreamingConfig); err != nil {
			return err
		}
	case *StreamingRecognizeRequest_AudioContent:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.AudioContent)
	case nil:
	default:
		return fmt.Errorf("StreamingRecognizeRequest.StreamingRequest has unexpected type %T", x)
	}
	return nil
}

func _StreamingRecognizeRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*StreamingRecognizeRequest)
	switch tag {
	case 1: // streaming_request.streaming_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StreamingRecognitionConfig)
		err := b.DecodeMessage(msg)
		m.StreamingRequest = &StreamingRecognizeRequest_StreamingConfig{msg}
		return true, err
	case 2: // streaming_request.audio_content
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.StreamingRequest = &StreamingRecognizeRequest_AudioContent{x}
		return true, err
	default:
		return false, nil
	}
}

func _StreamingRecognizeRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*StreamingRecognizeRequest)
	// streaming_request
	switch x := m.StreamingRequest.(type) {
	case *StreamingRecognizeRequest_StreamingConfig:
		s := proto.Size(x.StreamingConfig)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamingRecognizeRequest_AudioContent:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.AudioContent)))
		n += len(x.AudioContent)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Provides information to the recognizer that specifies how to process the
// request.
type StreamingRecognitionConfig struct {
	// *Required* Provides information to the recognizer that specifies how to
	// process the request.
	Config *RecognitionConfig `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
	// *Optional* If `false` or omitted, the recognizer will perform continuous
	// recognition (continuing to wait for and process audio even if the user
	// pauses speaking) until the client closes the input stream (gRPC API) or
	// until the maximum time limit has been reached. May return multiple
	// `StreamingRecognitionResult`s with the `is_final` flag set to `true`.
	//
	// If `true`, the recognizer will detect a single spoken utterance. When it
	// detects that the user has paused or stopped speaking, it will return an
	// `END_OF_SINGLE_UTTERANCE` event and cease recognition. It will return no
	// more than one `StreamingRecognitionResult` with the `is_final` flag set to
	// `true`.
	SingleUtterance bool `protobuf:"varint,2,opt,name=single_utterance,json=singleUtterance,proto3" json:"single_utterance,omitempty"`
	// *Optional* If `true`, interim results (tentative hypotheses) may be
	// returned as they become available (these interim results are indicated with
	// the `is_final=false` flag).
	// If `false` or omitted, only `is_final=true` result(s) are returned.
	InterimResults bool `protobuf:"varint,3,opt,name=interim_results,json=interimResults,proto3" json:"interim_results,omitempty"`
}

func (m *StreamingRecognitionConfig) Reset()         { *m = StreamingRecognitionConfig{} }
func (m *StreamingRecognitionConfig) String() string { return proto.CompactTextString(m) }
func (*StreamingRecognitionConfig) ProtoMessage()    {}
func (*StreamingRecognitionConfig) Descriptor() ([]byte, []int) {
	return fileDescriptorCloudSpeech, []int{3}
}

func (m *StreamingRecognitionConfig) GetConfig() *RecognitionConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *StreamingRecognitionConfig) GetSingleUtterance() bool {
	if m != nil {
		return m.SingleUtterance
	}
	return false
}

func (m *StreamingRecognitionConfig) GetInterimResults() bool {
	if m != nil {
		return m.InterimResults
	}
	return false
}

// Provides information to the recognizer that specifies how to process the
// request.
type RecognitionConfig struct {
	// *Required* Encoding of audio data sent in all `RecognitionAudio` messages.
	Encoding RecognitionConfig_AudioEncoding `protobuf:"varint,1,opt,name=encoding,proto3,enum=google.cloud.speech.v1p1beta1.RecognitionConfig_AudioEncoding" json:"encoding,omitempty"`
	// *Required* Sample rate in Hertz of the audio data sent in all
	// `RecognitionAudio` messages. Valid values are: 8000-48000.
	// 16000 is optimal. For best results, set the sampling rate of the audio
	// source to 16000 Hz. If that's not possible, use the native sample rate of
	// the audio source (instead of re-sampling).
	SampleRateHertz int32 `protobuf:"varint,2,opt,name=sample_rate_hertz,json=sampleRateHertz,proto3" json:"sample_rate_hertz,omitempty"`
	// *Required* The language of the supplied audio as a
	// [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag.
	// Example: "en-US".
	// See [Language Support](https://cloud.google.com/speech/docs/languages)
	// for a list of the currently supported language codes.
	LanguageCode string `protobuf:"bytes,3,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
	// *Optional* Maximum number of recognition hypotheses to be returned.
	// Specifically, the maximum number of `SpeechRecognitionAlternative` messages
	// within each `SpeechRecognitionResult`.
	// The server may return fewer than `max_alternatives`.
	// Valid values are `0`-`30`. A value of `0` or `1` will return a maximum of
	// one. If omitted, will return a maximum of one.
	MaxAlternatives int32 `protobuf:"varint,4,opt,name=max_alternatives,json=maxAlternatives,proto3" json:"max_alternatives,omitempty"`
	// *Optional* If set to `true`, the server will attempt to filter out
	// profanities, replacing all but the initial character in each filtered word
	// with asterisks, e.g. "f***". If set to `false` or omitted, profanities
	// won't be filtered out.
	ProfanityFilter bool `protobuf:"varint,5,opt,name=profanity_filter,json=profanityFilter,proto3" json:"profanity_filter,omitempty"`
	// *Optional* A means to provide context to assist the speech recognition.
	SpeechContexts []*SpeechContext `protobuf:"bytes,6,rep,name=speech_contexts,json=speechContexts" json:"speech_contexts,omitempty"`
	// *Optional* If `true`, the top result includes a list of words and
	// the start and end time offsets (timestamps) for those words. If
	// `false`, no word-level time offset information is returned. The default is
	// `false`.
	EnableWordTimeOffsets bool `protobuf:"varint,8,opt,name=enable_word_time_offsets,json=enableWordTimeOffsets,proto3" json:"enable_word_time_offsets,omitempty"`
	// *Optional* If 'true', adds punctuation to recognition result hypotheses.
	// This feature is only available in select languages. Setting this for
	// requests in other languages has no effect at all.
	// The default 'false' value does not add punctuation to result hypotheses.
	// NOTE: "This is currently offered as an experimental service, complimentary
	// to all users. In the future this may be exclusively available as a
	// premium feature."
	EnableAutomaticPunctuation bool `protobuf:"varint,11,opt,name=enable_automatic_punctuation,json=enableAutomaticPunctuation,proto3" json:"enable_automatic_punctuation,omitempty"`
	// *Optional* Metadata regarding this request.
	Metadata *RecognitionMetadata `protobuf:"bytes,9,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *RecognitionConfig) Reset()                    { *m = RecognitionConfig{} }
func (m *RecognitionConfig) String() string            { return proto.CompactTextString(m) }
func (*RecognitionConfig) ProtoMessage()               {}
func (*RecognitionConfig) Descriptor() ([]byte, []int) { return fileDescriptorCloudSpeech, []int{4} }

func (m *RecognitionConfig) GetEncoding() RecognitionConfig_AudioEncoding {
	if m != nil {
		return m.Encoding
	}
	return RecognitionConfig_ENCODING_UNSPECIFIED
}

func (m *RecognitionConfig) GetSampleRateHertz() int32 {
	if m != nil {
		return m.SampleRateHertz
	}
	return 0
}

func (m *RecognitionConfig) GetLanguageCode() string {
	if m != nil {
		return m.LanguageCode
	}
	return ""
}

func (m *RecognitionConfig) GetMaxAlternatives() int32 {
	if m != nil {
		return m.MaxAlternatives
	}
	return 0
}

func (m *RecognitionConfig) GetProfanityFilter() bool {
	if m != nil {
		return m.ProfanityFilter
	}
	return false
}

func (m *RecognitionConfig) GetSpeechContexts() []*SpeechContext {
	if m != nil {
		return m.SpeechContexts
	}
	return nil
}

func (m *RecognitionConfig) GetEnableWordTimeOffsets() bool {
	if m != nil {
		return m.EnableWordTimeOffsets
	}
	return false
}

func (m *RecognitionConfig) GetEnableAutomaticPunctuation() bool {
	if m != nil {
		return m.EnableAutomaticPunctuation
	}
	return false
}

func (m *RecognitionConfig) GetMetadata() *RecognitionMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// Description of audio data to be recognized.
type RecognitionMetadata struct {
	// The use case most closely describing the audio content to be recognized.
	InteractionType RecognitionMetadata_InteractionType `protobuf:"varint,1,opt,name=interaction_type,json=interactionType,proto3,enum=google.cloud.speech.v1p1beta1.RecognitionMetadata_InteractionType" json:"interaction_type,omitempty"`
	// The industry vertical to which this speech recognition request most
	// closely applies. This is most indicative of the topics contained
	// in the audio.  Use the 6-digit NAICS code to identify the industry
	// vertical - see https://www.naics.com/search/.
	IndustryNaicsCodeOfAudio uint32 `protobuf:"varint,3,opt,name=industry_naics_code_of_audio,json=industryNaicsCodeOfAudio,proto3" json:"industry_naics_code_of_audio,omitempty"`
	// The audio type that most closely describes the audio being recognized.
	MicrophoneDistance RecognitionMetadata_MicrophoneDistance `protobuf:"varint,4,opt,name=microphone_distance,json=microphoneDistance,proto3,enum=google.cloud.speech.v1p1beta1.RecognitionMetadata_MicrophoneDistance" json:"microphone_distance,omitempty"`
	// The original media the speech was recorded on.
	OriginalMediaType RecognitionMetadata_OriginalMediaType `protobuf:"varint,5,opt,name=original_media_type,json=originalMediaType,proto3,enum=google.cloud.speech.v1p1beta1.RecognitionMetadata_OriginalMediaType" json:"original_media_type,omitempty"`
	// How many people are speaking prominently in the audio and expected to be
	// recognized.
	NumberOfSpeakers RecognitionMetadata_NumberOfSpeakers `protobuf:"varint,6,opt,name=number_of_speakers,json=numberOfSpeakers,proto3,enum=google.cloud.speech.v1p1beta1.RecognitionMetadata_NumberOfSpeakers" json:"number_of_speakers,omitempty"`
	// The type of device the speech was recorded with.
	RecordingDeviceType RecognitionMetadata_RecordingDeviceType `protobuf:"varint,7,opt,name=recording_device_type,json=recordingDeviceType,proto3,enum=google.cloud.speech.v1p1beta1.RecognitionMetadata_RecordingDeviceType" json:"recording_device_type,omitempty"`
	// The device used to make the recording.  Examples 'Nexus 5X' or
	// 'Polycom SoundStation IP 6000' or 'POTS' or 'VoIP' or
	// 'Cardioid Microphone'.
	RecordingDeviceName string `protobuf:"bytes,8,opt,name=recording_device_name,json=recordingDeviceName,proto3" json:"recording_device_name,omitempty"`
	// Mime type of the original audio file.  For example `audio/m4a`,
	// `audio/x-alaw-basic`, `audio/mp3`, `audio/3gpp`.
	// A list of possible audio mime types is maintained at
	// http://www.iana.org/assignments/media-types/media-types.xhtml#audio
	OriginalMimeType string `protobuf:"bytes,9,opt,name=original_mime_type,json=originalMimeType,proto3" json:"original_mime_type,omitempty"`
	// Obfuscated (privacy-protected) ID of the user, to identify number of
	// unique users using the service.
	ObfuscatedId int64 `protobuf:"varint,10,opt,name=obfuscated_id,json=obfuscatedId,proto3" json:"obfuscated_id,omitempty"`
	// Description of the content. Eg. "Recordings of federal supreme court
	// hearings from 2012".
	AudioTopic string `protobuf:"bytes,11,opt,name=audio_topic,json=audioTopic,proto3" json:"audio_topic,omitempty"`
}

func (m *RecognitionMetadata) Reset()                    { *m = RecognitionMetadata{} }
func (m *RecognitionMetadata) String() string            { return proto.CompactTextString(m) }
func (*RecognitionMetadata) ProtoMessage()               {}
func (*RecognitionMetadata) Descriptor() ([]byte, []int) { return fileDescriptorCloudSpeech, []int{5} }

func (m *RecognitionMetadata) GetInteractionType() RecognitionMetadata_InteractionType {
	if m != nil {
		return m.InteractionType
	}
	return RecognitionMetadata_INTERACTION_TYPE_UNSPECIFIED
}

func (m *RecognitionMetadata) GetIndustryNaicsCodeOfAudio() uint32 {
	if m != nil {
		return m.IndustryNaicsCodeOfAudio
	}
	return 0
}

func (m *RecognitionMetadata) GetMicrophoneDistance() RecognitionMetadata_MicrophoneDistance {
	if m != nil {
		return m.MicrophoneDistance
	}
	return RecognitionMetadata_MICROPHONE_DISTANCE_UNSPECIFIED
}

func (m *RecognitionMetadata) GetOriginalMediaType() RecognitionMetadata_OriginalMediaType {
	if m != nil {
		return m.OriginalMediaType
	}
	return RecognitionMetadata_ORIGINAL_MEDIA_TYPE_UNSPECIFIED
}

func (m *RecognitionMetadata) GetNumberOfSpeakers() RecognitionMetadata_NumberOfSpeakers {
	if m != nil {
		return m.NumberOfSpeakers
	}
	return RecognitionMetadata_NUMBER_OF_SPEAKERS_UNSPECIFIED
}

func (m *RecognitionMetadata) GetRecordingDeviceType() RecognitionMetadata_RecordingDeviceType {
	if m != nil {
		return m.RecordingDeviceType
	}
	return RecognitionMetadata_RECORDING_DEVICE_TYPE_UNSPECIFIED
}

func (m *RecognitionMetadata) GetRecordingDeviceName() string {
	if m != nil {
		return m.RecordingDeviceName
	}
	return ""
}

func (m *RecognitionMetadata) GetOriginalMimeType() string {
	if m != nil {
		return m.OriginalMimeType
	}
	return ""
}

func (m *RecognitionMetadata) GetObfuscatedId() int64 {
	if m != nil {
		return m.ObfuscatedId
	}
	return 0
}

func (m *RecognitionMetadata) GetAudioTopic() string {
	if m != nil {
		return m.AudioTopic
	}
	return ""
}

// Provides "hints" to the speech recognizer to favor specific words and phrases
// in the results.
type SpeechContext struct {
	// *Optional* A list of strings containing words and phrases "hints" so that
	// the speech recognition is more likely to recognize them. This can be used
	// to improve the accuracy for specific words and phrases, for example, if
	// specific commands are typically spoken by the user. This can also be used
	// to add additional words to the vocabulary of the recognizer. See
	// [usage limits](https://cloud.google.com/speech/limits#content).
	Phrases []string `protobuf:"bytes,1,rep,name=phrases" json:"phrases,omitempty"`
}

func (m *SpeechContext) Reset()                    { *m = SpeechContext{} }
func (m *SpeechContext) String() string            { return proto.CompactTextString(m) }
func (*SpeechContext) ProtoMessage()               {}
func (*SpeechContext) Descriptor() ([]byte, []int) { return fileDescriptorCloudSpeech, []int{6} }

func (m *SpeechContext) GetPhrases() []string {
	if m != nil {
		return m.Phrases
	}
	return nil
}

// Contains audio data in the encoding specified in the `RecognitionConfig`.
// Either `content` or `uri` must be supplied. Supplying both or neither
// returns [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT]. See
// [audio limits](https://cloud.google.com/speech/limits#content).
type RecognitionAudio struct {
	// The audio source, which is either inline content or a GCS uri.
	//
	// Types that are valid to be assigned to AudioSource:
	//	*RecognitionAudio_Content
	//	*RecognitionAudio_Uri
	AudioSource isRecognitionAudio_AudioSource `protobuf_oneof:"audio_source"`
}

func (m *RecognitionAudio) Reset()                    { *m = RecognitionAudio{} }
func (m *RecognitionAudio) String() string            { return proto.CompactTextString(m) }
func (*RecognitionAudio) ProtoMessage()               {}
func (*RecognitionAudio) Descriptor() ([]byte, []int) { return fileDescriptorCloudSpeech, []int{7} }

type isRecognitionAudio_AudioSource interface {
	isRecognitionAudio_AudioSource()
}

type RecognitionAudio_Content struct {
	Content []byte `protobuf:"bytes,1,opt,name=content,proto3,oneof"`
}
type RecognitionAudio_Uri struct {
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3,oneof"`
}

func (*RecognitionAudio_Content) isRecognitionAudio_AudioSource() {}
func (*RecognitionAudio_Uri) isRecognitionAudio_AudioSource()     {}

func (m *RecognitionAudio) GetAudioSource() isRecognitionAudio_AudioSource {
	if m != nil {
		return m.AudioSource
	}
	return nil
}

func (m *RecognitionAudio) GetContent() []byte {
	if x, ok := m.GetAudioSource().(*RecognitionAudio_Content); ok {
		return x.Content
	}
	return nil
}

func (m *RecognitionAudio) GetUri() string {
	if x, ok := m.GetAudioSource().(*RecognitionAudio_Uri); ok {
		return x.Uri
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RecognitionAudio) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RecognitionAudio_OneofMarshaler, _RecognitionAudio_OneofUnmarshaler, _RecognitionAudio_OneofSizer, []interface{}{
		(*RecognitionAudio_Content)(nil),
		(*RecognitionAudio_Uri)(nil),
	}
}

func _RecognitionAudio_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RecognitionAudio)
	// audio_source
	switch x := m.AudioSource.(type) {
	case *RecognitionAudio_Content:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.Content)
	case *RecognitionAudio_Uri:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Uri)
	case nil:
	default:
		return fmt.Errorf("RecognitionAudio.AudioSource has unexpected type %T", x)
	}
	return nil
}

func _RecognitionAudio_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RecognitionAudio)
	switch tag {
	case 1: // audio_source.content
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.AudioSource = &RecognitionAudio_Content{x}
		return true, err
	case 2: // audio_source.uri
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.AudioSource = &RecognitionAudio_Uri{x}
		return true, err
	default:
		return false, nil
	}
}

func _RecognitionAudio_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RecognitionAudio)
	// audio_source
	switch x := m.AudioSource.(type) {
	case *RecognitionAudio_Content:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Content)))
		n += len(x.Content)
	case *RecognitionAudio_Uri:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Uri)))
		n += len(x.Uri)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// The only message returned to the client by the `Recognize` method. It
// contains the result as zero or more sequential `SpeechRecognitionResult`
// messages.
type RecognizeResponse struct {
	// *Output-only* Sequential list of transcription results corresponding to
	// sequential portions of audio.
	Results []*SpeechRecognitionResult `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
}

func (m *RecognizeResponse) Reset()                    { *m = RecognizeResponse{} }
func (m *RecognizeResponse) String() string            { return proto.CompactTextString(m) }
func (*RecognizeResponse) ProtoMessage()               {}
func (*RecognizeResponse) Descriptor() ([]byte, []int) { return fileDescriptorCloudSpeech, []int{8} }

func (m *RecognizeResponse) GetResults() []*SpeechRecognitionResult {
	if m != nil {
		return m.Results
	}
	return nil
}

// The only message returned to the client by the `LongRunningRecognize` method.
// It contains the result as zero or more sequential `SpeechRecognitionResult`
// messages. It is included in the `result.response` field of the `Operation`
// returned by the `GetOperation` call of the `google::longrunning::Operations`
// service.
type LongRunningRecognizeResponse struct {
	// *Output-only* Sequential list of transcription results corresponding to
	// sequential portions of audio.
	Results []*SpeechRecognitionResult `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
}

func (m *LongRunningRecognizeResponse) Reset()         { *m = LongRunningRecognizeResponse{} }
func (m *LongRunningRecognizeResponse) String() string { return proto.CompactTextString(m) }
func (*LongRunningRecognizeResponse) ProtoMessage()    {}
func (*LongRunningRecognizeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorCloudSpeech, []int{9}
}

func (m *LongRunningRecognizeResponse) GetResults() []*SpeechRecognitionResult {
	if m != nil {
		return m.Results
	}
	return nil
}

// Describes the progress of a long-running `LongRunningRecognize` call. It is
// included in the `metadata` field of the `Operation` returned by the
// `GetOperation` call of the `google::longrunning::Operations` service.
type LongRunningRecognizeMetadata struct {
	// Approximate percentage of audio processed thus far. Guaranteed to be 100
	// when the audio is fully processed and the results are available.
	ProgressPercent int32 `protobuf:"varint,1,opt,name=progress_percent,json=progressPercent,proto3" json:"progress_percent,omitempty"`
	// Time when the request was received.
	StartTime *google_protobuf4.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	// Time of the most recent processing update.
	LastUpdateTime *google_protobuf4.Timestamp `protobuf:"bytes,3,opt,name=last_update_time,json=lastUpdateTime" json:"last_update_time,omitempty"`
}

func (m *LongRunningRecognizeMetadata) Reset()         { *m = LongRunningRecognizeMetadata{} }
func (m *LongRunningRecognizeMetadata) String() string { return proto.CompactTextString(m) }
func (*LongRunningRecognizeMetadata) ProtoMessage()    {}
func (*LongRunningRecognizeMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptorCloudSpeech, []int{10}
}

func (m *LongRunningRecognizeMetadata) GetProgressPercent() int32 {
	if m != nil {
		return m.ProgressPercent
	}
	return 0
}

func (m *LongRunningRecognizeMetadata) GetStartTime() *google_protobuf4.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *LongRunningRecognizeMetadata) GetLastUpdateTime() *google_protobuf4.Timestamp {
	if m != nil {
		return m.LastUpdateTime
	}
	return nil
}

// `StreamingRecognizeResponse` is the only message returned to the client by
// `StreamingRecognize`. A series of zero or more `StreamingRecognizeResponse`
// messages are streamed back to the client. If there is no recognizable
// audio, and `single_utterance` is set to false, then no messages are streamed
// back to the client.
//
// Here's an example of a series of ten `StreamingRecognizeResponse`s that might
// be returned while processing audio:
//
// 1. results { alternatives { transcript: "tube" } stability: 0.01 }
//
// 2. results { alternatives { transcript: "to be a" } stability: 0.01 }
//
// 3. results { alternatives { transcript: "to be" } stability: 0.9 }
//    results { alternatives { transcript: " or not to be" } stability: 0.01 }
//
// 4. results { alternatives { transcript: "to be or not to be"
//                             confidence: 0.92 }
//              alternatives { transcript: "to bee or not to bee" }
//              is_final: true }
//
// 5. results { alternatives { transcript: " that's" } stability: 0.01 }
//
// 6. results { alternatives { transcript: " that is" } stability: 0.9 }
//    results { alternatives { transcript: " the question" } stability: 0.01 }
//
// 7. results { alternatives { transcript: " that is the question"
//                             confidence: 0.98 }
//              alternatives { transcript: " that was the question" }
//              is_final: true }
//
// Notes:
//
// - Only two of the above responses #4 and #7 contain final results; they are
//   indicated by `is_final: true`. Concatenating these together generates the
//   full transcript: "to be or not to be that is the question".
//
// - The others contain interim `results`. #3 and #6 contain two interim
//   `results`: the first portion has a high stability and is less likely to
//   change; the second portion has a low stability and is very likely to
//   change. A UI designer might choose to show only high stability `results`.
//
// - The specific `stability` and `confidence` values shown above are only for
//   illustrative purposes. Actual values may vary.
//
// - In each response, only one of these fields will be set:
//     `error`,
//     `speech_event_type`, or
//     one or more (repeated) `results`.
type StreamingRecognizeResponse struct {
	// *Output-only* If set, returns a [google.rpc.Status][google.rpc.Status] message that
	// specifies the error for the operation.
	Error *google_rpc.Status `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// *Output-only* This repeated list contains zero or more results that
	// correspond to consecutive portions of the audio currently being processed.
	// It contains zero or more `is_final=false` results followed by zero or one
	// `is_final=true` result (the newly settled portion).
	Results []*StreamingRecognitionResult `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	// *Output-only* Indicates the type of speech event.
	SpeechEventType StreamingRecognizeResponse_SpeechEventType `protobuf:"varint,4,opt,name=speech_event_type,json=speechEventType,proto3,enum=google.cloud.speech.v1p1beta1.StreamingRecognizeResponse_SpeechEventType" json:"speech_event_type,omitempty"`
}

func (m *StreamingRecognizeResponse) Reset()         { *m = StreamingRecognizeResponse{} }
func (m *StreamingRecognizeResponse) String() string { return proto.CompactTextString(m) }
func (*StreamingRecognizeResponse) ProtoMessage()    {}
func (*StreamingRecognizeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorCloudSpeech, []int{11}
}

func (m *StreamingRecognizeResponse) GetError() *google_rpc.Status {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *StreamingRecognizeResponse) GetResults() []*StreamingRecognitionResult {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *StreamingRecognizeResponse) GetSpeechEventType() StreamingRecognizeResponse_SpeechEventType {
	if m != nil {
		return m.SpeechEventType
	}
	return StreamingRecognizeResponse_SPEECH_EVENT_UNSPECIFIED
}

// A streaming speech recognition result corresponding to a portion of the audio
// that is currently being processed.
type StreamingRecognitionResult struct {
	// *Output-only* May contain one or more recognition hypotheses (up to the
	// maximum specified in `max_alternatives`).
	Alternatives []*SpeechRecognitionAlternative `protobuf:"bytes,1,rep,name=alternatives" json:"alternatives,omitempty"`
	// *Output-only* If `false`, this `StreamingRecognitionResult` represents an
	// interim result that may change. If `true`, this is the final time the
	// speech service will return this particular `StreamingRecognitionResult`,
	// the recognizer will not return any further hypotheses for this portion of
	// the transcript and corresponding audio.
	IsFinal bool `protobuf:"varint,2,opt,name=is_final,json=isFinal,proto3" json:"is_final,omitempty"`
	// *Output-only* An estimate of the likelihood that the recognizer will not
	// change its guess about this interim result. Values range from 0.0
	// (completely unstable) to 1.0 (completely stable).
	// This field is only provided for interim results (`is_final=false`).
	// The default of 0.0 is a sentinel value indicating `stability` was not set.
	Stability float32 `protobuf:"fixed32,3,opt,name=stability,proto3" json:"stability,omitempty"`
}

func (m *StreamingRecognitionResult) Reset()         { *m = StreamingRecognitionResult{} }
func (m *StreamingRecognitionResult) String() string { return proto.CompactTextString(m) }
func (*StreamingRecognitionResult) ProtoMessage()    {}
func (*StreamingRecognitionResult) Descriptor() ([]byte, []int) {
	return fileDescriptorCloudSpeech, []int{12}
}

func (m *StreamingRecognitionResult) GetAlternatives() []*SpeechRecognitionAlternative {
	if m != nil {
		return m.Alternatives
	}
	return nil
}

func (m *StreamingRecognitionResult) GetIsFinal() bool {
	if m != nil {
		return m.IsFinal
	}
	return false
}

func (m *StreamingRecognitionResult) GetStability() float32 {
	if m != nil {
		return m.Stability
	}
	return 0
}

// A speech recognition result corresponding to a portion of the audio.
type SpeechRecognitionResult struct {
	// *Output-only* May contain one or more recognition hypotheses (up to the
	// maximum specified in `max_alternatives`).
	// These alternatives are ordered in terms of accuracy, with the top (first)
	// alternative being the most probable, as ranked by the recognizer.
	Alternatives []*SpeechRecognitionAlternative `protobuf:"bytes,1,rep,name=alternatives" json:"alternatives,omitempty"`
}

func (m *SpeechRecognitionResult) Reset()         { *m = SpeechRecognitionResult{} }
func (m *SpeechRecognitionResult) String() string { return proto.CompactTextString(m) }
func (*SpeechRecognitionResult) ProtoMessage()    {}
func (*SpeechRecognitionResult) Descriptor() ([]byte, []int) {
	return fileDescriptorCloudSpeech, []int{13}
}

func (m *SpeechRecognitionResult) GetAlternatives() []*SpeechRecognitionAlternative {
	if m != nil {
		return m.Alternatives
	}
	return nil
}

// Alternative hypotheses (a.k.a. n-best list).
type SpeechRecognitionAlternative struct {
	// *Output-only* Transcript text representing the words that the user spoke.
	Transcript string `protobuf:"bytes,1,opt,name=transcript,proto3" json:"transcript,omitempty"`
	// *Output-only* The confidence estimate between 0.0 and 1.0. A higher number
	// indicates an estimated greater likelihood that the recognized words are
	// correct. This field is typically provided only for the top hypothesis, and
	// only for `is_final=true` results. Clients should not rely on the
	// `confidence` field as it is not guaranteed to be accurate, or even set, in
	// any of the results.
	// The default of 0.0 is a sentinel value indicating `confidence` was not set.
	Confidence float32 `protobuf:"fixed32,2,opt,name=confidence,proto3" json:"confidence,omitempty"`
	// *Output-only* A list of word-specific information for each recognized word.
	Words []*WordInfo `protobuf:"bytes,3,rep,name=words" json:"words,omitempty"`
}

func (m *SpeechRecognitionAlternative) Reset()         { *m = SpeechRecognitionAlternative{} }
func (m *SpeechRecognitionAlternative) String() string { return proto.CompactTextString(m) }
func (*SpeechRecognitionAlternative) ProtoMessage()    {}
func (*SpeechRecognitionAlternative) Descriptor() ([]byte, []int) {
	return fileDescriptorCloudSpeech, []int{14}
}

func (m *SpeechRecognitionAlternative) GetTranscript() string {
	if m != nil {
		return m.Transcript
	}
	return ""
}

func (m *SpeechRecognitionAlternative) GetConfidence() float32 {
	if m != nil {
		return m.Confidence
	}
	return 0
}

func (m *SpeechRecognitionAlternative) GetWords() []*WordInfo {
	if m != nil {
		return m.Words
	}
	return nil
}

// Word-specific information for recognized words. Word information is only
// included in the response when certain request parameters are set, such
// as `enable_word_time_offsets`.
type WordInfo struct {
	// *Output-only* Time offset relative to the beginning of the audio,
	// and corresponding to the start of the spoken word.
	// This field is only set if `enable_word_time_offsets=true` and only
	// in the top hypothesis.
	// This is an experimental feature and the accuracy of the time offset can
	// vary.
	StartTime *google_protobuf3.Duration `protobuf:"bytes,1,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	// *Output-only* Time offset relative to the beginning of the audio,
	// and corresponding to the end of the spoken word.
	// This field is only set if `enable_word_time_offsets=true` and only
	// in the top hypothesis.
	// This is an experimental feature and the accuracy of the time offset can
	// vary.
	EndTime *google_protobuf3.Duration `protobuf:"bytes,2,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	// *Output-only* The word corresponding to this set of information.
	Word string `protobuf:"bytes,3,opt,name=word,proto3" json:"word,omitempty"`
}

func (m *WordInfo) Reset()                    { *m = WordInfo{} }
func (m *WordInfo) String() string            { return proto.CompactTextString(m) }
func (*WordInfo) ProtoMessage()               {}
func (*WordInfo) Descriptor() ([]byte, []int) { return fileDescriptorCloudSpeech, []int{15} }

func (m *WordInfo) GetStartTime() *google_protobuf3.Duration {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *WordInfo) GetEndTime() *google_protobuf3.Duration {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *WordInfo) GetWord() string {
	if m != nil {
		return m.Word
	}
	return ""
}

func init() {
	proto.RegisterType((*RecognizeRequest)(nil), "google.cloud.speech.v1p1beta1.RecognizeRequest")
	proto.RegisterType((*LongRunningRecognizeRequest)(nil), "google.cloud.speech.v1p1beta1.LongRunningRecognizeRequest")
	proto.RegisterType((*StreamingRecognizeRequest)(nil), "google.cloud.speech.v1p1beta1.StreamingRecognizeRequest")
	proto.RegisterType((*StreamingRecognitionConfig)(nil), "google.cloud.speech.v1p1beta1.StreamingRecognitionConfig")
	proto.RegisterType((*RecognitionConfig)(nil), "google.cloud.speech.v1p1beta1.RecognitionConfig")
	proto.RegisterType((*RecognitionMetadata)(nil), "google.cloud.speech.v1p1beta1.RecognitionMetadata")
	proto.RegisterType((*SpeechContext)(nil), "google.cloud.speech.v1p1beta1.SpeechContext")
	proto.RegisterType((*RecognitionAudio)(nil), "google.cloud.speech.v1p1beta1.RecognitionAudio")
	proto.RegisterType((*RecognizeResponse)(nil), "google.cloud.speech.v1p1beta1.RecognizeResponse")
	proto.RegisterType((*LongRunningRecognizeResponse)(nil), "google.cloud.speech.v1p1beta1.LongRunningRecognizeResponse")
	proto.RegisterType((*LongRunningRecognizeMetadata)(nil), "google.cloud.speech.v1p1beta1.LongRunningRecognizeMetadata")
	proto.RegisterType((*StreamingRecognizeResponse)(nil), "google.cloud.speech.v1p1beta1.StreamingRecognizeResponse")
	proto.RegisterType((*StreamingRecognitionResult)(nil), "google.cloud.speech.v1p1beta1.StreamingRecognitionResult")
	proto.RegisterType((*SpeechRecognitionResult)(nil), "google.cloud.speech.v1p1beta1.SpeechRecognitionResult")
	proto.RegisterType((*SpeechRecognitionAlternative)(nil), "google.cloud.speech.v1p1beta1.SpeechRecognitionAlternative")
	proto.RegisterType((*WordInfo)(nil), "google.cloud.speech.v1p1beta1.WordInfo")
	proto.RegisterEnum("google.cloud.speech.v1p1beta1.RecognitionConfig_AudioEncoding", RecognitionConfig_AudioEncoding_name, RecognitionConfig_AudioEncoding_value)
	proto.RegisterEnum("google.cloud.speech.v1p1beta1.RecognitionMetadata_InteractionType", RecognitionMetadata_InteractionType_name, RecognitionMetadata_InteractionType_value)
	proto.RegisterEnum("google.cloud.speech.v1p1beta1.RecognitionMetadata_MicrophoneDistance", RecognitionMetadata_MicrophoneDistance_name, RecognitionMetadata_MicrophoneDistance_value)
	proto.RegisterEnum("google.cloud.speech.v1p1beta1.RecognitionMetadata_OriginalMediaType", RecognitionMetadata_OriginalMediaType_name, RecognitionMetadata_OriginalMediaType_value)
	proto.RegisterEnum("google.cloud.speech.v1p1beta1.RecognitionMetadata_NumberOfSpeakers", RecognitionMetadata_NumberOfSpeakers_name, RecognitionMetadata_NumberOfSpeakers_value)
	proto.RegisterEnum("google.cloud.speech.v1p1beta1.RecognitionMetadata_RecordingDeviceType", RecognitionMetadata_RecordingDeviceType_name, RecognitionMetadata_RecordingDeviceType_value)
	proto.RegisterEnum("google.cloud.speech.v1p1beta1.StreamingRecognizeResponse_SpeechEventType", StreamingRecognizeResponse_SpeechEventType_name, StreamingRecognizeResponse_SpeechEventType_value)
}

func init() {
	proto.RegisterFile("google/cloud/speech/v1_1beta1/cloud_speech.proto", fileDescriptorCloudSpeech)
}

var fileDescriptorCloudSpeech = []byte{
	// 1975 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xbf, 0x73, 0xdb, 0xc8,
	0x15, 0x36, 0x48, 0x51, 0x12, 0x9f, 0x7e, 0x41, 0xab, 0x73, 0x4c, 0xcb, 0x3a, 0x5b, 0x07, 0xcf,
	0xdd, 0xe9, 0x2e, 0x37, 0x92, 0xa5, 0x24, 0x97, 0xb3, 0x33, 0xb9, 0x09, 0x04, 0x40, 0x26, 0x26,
	0x24, 0xc0, 0x59, 0x92, 0x76, 0x9c, 0x66, 0x07, 0x02, 0x96, 0x34, 0x26, 0x24, 0x80, 0x03, 0x16,
	0x8a, 0xed, 0x32, 0x6d, 0x26, 0x69, 0x32, 0x93, 0x2e, 0x55, 0xae, 0x4e, 0x99, 0x22, 0x4d, 0xaa,
	0xa4, 0x48, 0x9b, 0x26, 0xe5, 0x15, 0xf9, 0x23, 0x52, 0x66, 0x76, 0x17, 0xa0, 0x28, 0x52, 0xb6,
	0x65, 0x4d, 0x6e, 0x26, 0x1d, 0xf7, 0xdb, 0xf7, 0xbe, 0xf7, 0xf6, 0xed, 0xdb, 0xc7, 0xf7, 0x00,
	0x0f, 0x86, 0x71, 0x3c, 0x1c, 0xd1, 0x03, 0x7f, 0x14, 0xe7, 0xc1, 0x41, 0x96, 0x50, 0xea, 0x3f,
	0x3f, 0x38, 0x3b, 0x24, 0x87, 0xa7, 0x94, 0x79, 0x87, 0x12, 0x26, 0x12, 0xde, 0x4f, 0xd2, 0x98,
	0xc5, 0xe8, 0x7d, 0xa9, 0xb1, 0x2f, 0xb6, 0xf6, 0x8b, 0xad, 0xb3, 0xc3, 0x44, 0x6a, 0x6c, 0xef,
	0x14, 0x84, 0x5e, 0x12, 0x1e, 0x78, 0x51, 0x14, 0x33, 0x8f, 0x85, 0x71, 0x94, 0x49, 0xe5, 0xed,
	0xfb, 0xc5, 0xee, 0x28, 0x8e, 0x86, 0x69, 0x1e, 0x45, 0x61, 0x34, 0x3c, 0x88, 0x13, 0x9a, 0x5e,
	0x10, 0xba, 0x5b, 0x08, 0x89, 0xd5, 0x69, 0x3e, 0x38, 0x08, 0x72, 0x29, 0x50, 0xec, 0xdf, 0x9b,
	0xdd, 0x67, 0xe1, 0x98, 0x66, 0xcc, 0x1b, 0x27, 0x85, 0xc0, 0xad, 0x42, 0x20, 0x4d, 0xfc, 0x83,
	0x8c, 0x79, 0x2c, 0x2f, 0x98, 0xb5, 0x3f, 0x2a, 0xa0, 0x62, 0xea, 0xc7, 0xc3, 0x28, 0x7c, 0x45,
	0x31, 0xfd, 0x2a, 0xa7, 0x19, 0x43, 0x4d, 0x58, 0xf4, 0xe3, 0x68, 0x10, 0x0e, 0x1b, 0xca, 0xae,
	0xb2, 0xb7, 0x72, 0xf4, 0x60, 0xff, 0x8d, 0x27, 0xdc, 0x2f, 0x08, 0xb8, 0x43, 0x86, 0xd0, 0xc3,
	0x85, 0x3e, 0xb2, 0xa0, 0xe6, 0xe5, 0x41, 0x18, 0x37, 0x2a, 0x82, 0xe8, 0xe0, 0xea, 0x44, 0x3a,
	0x57, 0xc3, 0x52, 0x5b, 0xfb, 0x93, 0x02, 0x77, 0x5a, 0x71, 0x34, 0xc4, 0x32, 0x40, 0xff, 0xff,
	0x0e, 0xff, 0x55, 0x81, 0xdb, 0x5d, 0x96, 0x52, 0x6f, 0x7c, 0x99, 0xbb, 0x03, 0x50, 0xb3, 0x72,
	0x93, 0x5c, 0x70, 0xfc, 0xe1, 0x5b, 0xec, 0xcd, 0x72, 0x9e, 0x9f, 0xa0, 0x79, 0x03, 0x6f, 0x4c,
	0x48, 0x25, 0x84, 0x3e, 0x84, 0x35, 0xe1, 0x0e, 0xb7, 0xc1, 0x68, 0xc4, 0xc4, 0xa1, 0x56, 0x9b,
	0x37, 0xf0, 0xaa, 0x80, 0x0d, 0x89, 0x1e, 0x6f, 0xc1, 0xe6, 0xb9, 0x3b, 0xa9, 0xf4, 0x51, 0xfb,
	0x8b, 0x02, 0xdb, 0xaf, 0xb7, 0xf6, 0x3f, 0x8c, 0xf8, 0x27, 0xa0, 0x66, 0x61, 0x34, 0x1c, 0x51,
	0x92, 0x33, 0x46, 0x53, 0x2f, 0xf2, 0xa9, 0xf0, 0x73, 0x19, 0x6f, 0x48, 0xbc, 0x5f, 0xc2, 0xe8,
	0x63, 0xd8, 0x08, 0x23, 0x46, 0xd3, 0x70, 0x4c, 0x52, 0x9a, 0xe5, 0x23, 0x96, 0x35, 0xaa, 0x42,
	0x72, 0xbd, 0x80, 0xb1, 0x44, 0xb5, 0xbf, 0xd7, 0x60, 0x73, 0xde, 0xe7, 0x9f, 0xc3, 0x32, 0x8d,
	0xfc, 0x38, 0x08, 0x23, 0xe9, 0xf5, 0xfa, 0xd1, 0x97, 0xef, 0xea, 0xf5, 0xbe, 0xb8, 0x65, 0xab,
	0x60, 0xc1, 0x13, 0x3e, 0xf4, 0x29, 0x6c, 0x66, 0xde, 0x38, 0x19, 0x51, 0x92, 0x7a, 0x8c, 0x92,
	0xe7, 0x34, 0x65, 0xaf, 0xc4, 0x31, 0x6a, 0x78, 0x43, 0x6e, 0x60, 0x8f, 0xd1, 0x26, 0x87, 0xd1,
	0x7d, 0x58, 0x1b, 0x79, 0xd1, 0x30, 0xf7, 0x86, 0x94, 0xf8, 0x71, 0x40, 0xc5, 0x21, 0xea, 0x78,
	0xb5, 0x04, 0x8d, 0x38, 0xa0, 0x3c, 0x2c, 0x63, 0xef, 0x05, 0xf1, 0x46, 0x8c, 0xa6, 0x91, 0xc7,
	0xc2, 0x33, 0x9a, 0x35, 0x16, 0x24, 0xdf, 0xd8, 0x7b, 0xa1, 0x4f, 0xc1, 0x5c, 0x34, 0x49, 0xe3,
	0x81, 0x17, 0x85, 0xec, 0x25, 0x19, 0x84, 0x7c, 0xab, 0x51, 0x93, 0x11, 0x9c, 0xe0, 0x27, 0x02,
	0x46, 0x7d, 0xd8, 0x90, 0x87, 0x94, 0x29, 0xf1, 0x82, 0x65, 0x8d, 0xc5, 0xdd, 0xea, 0xde, 0xca,
	0xd1, 0x67, 0x6f, 0x4b, 0x3c, 0x01, 0x18, 0x52, 0x09, 0xaf, 0x67, 0xd3, 0xcb, 0x0c, 0xfd, 0x10,
	0x1a, 0x34, 0xf2, 0x4e, 0x47, 0x94, 0xfc, 0x32, 0x4e, 0x03, 0xc2, 0xab, 0x0f, 0x89, 0x07, 0x83,
	0x8c, 0xb2, 0xac, 0xb1, 0x2c, 0x3c, 0xb9, 0x29, 0xf7, 0x9f, 0xc6, 0x69, 0xd0, 0x0b, 0xc7, 0xd4,
	0x95, 0x9b, 0xe8, 0x27, 0xb0, 0x53, 0x28, 0x7a, 0x39, 0x8b, 0xc7, 0x1e, 0x0b, 0x7d, 0x92, 0xe4,
	0x91, 0xcf, 0x72, 0x51, 0xde, 0x1a, 0x2b, 0x42, 0x79, 0x5b, 0xca, 0xe8, 0xa5, 0x48, 0xe7, 0x5c,
	0x02, 0x39, 0xb0, 0x3c, 0xa6, 0xcc, 0x0b, 0x3c, 0xe6, 0x35, 0xea, 0x22, 0x15, 0x8f, 0xae, 0x7e,
	0xa9, 0xed, 0x42, 0x13, 0x4f, 0x38, 0xb4, 0x5f, 0x2b, 0xb0, 0x76, 0xe1, 0x92, 0x51, 0x03, 0xde,
	0xb3, 0x1c, 0xc3, 0x35, 0x6d, 0xe7, 0x31, 0xe9, 0x3b, 0xdd, 0x8e, 0x65, 0xd8, 0x27, 0xb6, 0x65,
	0xaa, 0x37, 0xd0, 0x2a, 0x2c, 0xb7, 0x6c, 0xc7, 0xd2, 0xf1, 0xe1, 0xe7, 0xaa, 0x82, 0x96, 0x61,
	0xe1, 0xa4, 0xa5, 0x1b, 0x6a, 0x05, 0xd5, 0xa1, 0xd6, 0xee, 0xb7, 0xf4, 0xa7, 0x6a, 0x15, 0x2d,
	0x41, 0x55, 0x6f, 0x63, 0x75, 0x01, 0x01, 0x2c, 0xea, 0x6d, 0x4c, 0x9e, 0x1e, 0xab, 0x35, 0xae,
	0xe7, 0x3e, 0x7e, 0x4c, 0xdc, 0x4e, 0xbf, 0xab, 0x2e, 0xa2, 0x6d, 0xf8, 0x4e, 0xb7, 0x63, 0x59,
	0x3f, 0x23, 0x4f, 0xed, 0x5e, 0x93, 0x34, 0x2d, 0xdd, 0xb4, 0x30, 0x39, 0x7e, 0xd6, 0xb3, 0xd4,
	0x25, 0xed, 0x9b, 0x15, 0xd8, 0xba, 0xc4, 0x5f, 0x34, 0x06, 0x55, 0xa4, 0xbc, 0xe7, 0x73, 0x98,
	0xb0, 0x97, 0x09, 0x2d, 0x52, 0xfa, 0xf8, 0xdd, 0x4f, 0xbf, 0x6f, 0x9f, 0x53, 0xf5, 0x5e, 0x26,
	0x14, 0x6f, 0x84, 0x17, 0x01, 0xf4, 0x25, 0xec, 0x84, 0x51, 0x90, 0x67, 0x2c, 0x7d, 0x49, 0x22,
	0x2f, 0xf4, 0x33, 0x91, 0xb7, 0x24, 0x1e, 0x10, 0x59, 0x2c, 0x79, 0x02, 0xaf, 0xe1, 0x46, 0x29,
	0xe3, 0x70, 0x11, 0x9e, 0xc5, 0xee, 0x40, 0x84, 0x12, 0x9d, 0xc1, 0xd6, 0x38, 0xf4, 0xd3, 0x38,
	0x79, 0x1e, 0x47, 0x94, 0x04, 0x61, 0xc6, 0xc4, 0x33, 0x5f, 0x10, 0x1e, 0x5b, 0xd7, 0xf0, 0xb8,
	0x3d, 0x61, 0x33, 0x0b, 0x32, 0x8c, 0xc6, 0x73, 0x18, 0x62, 0xb0, 0x15, 0xa7, 0xe1, 0x30, 0x8c,
	0xbc, 0x11, 0x19, 0xd3, 0x20, 0xf4, 0x64, 0xa4, 0x6a, 0xc2, 0xae, 0x79, 0x0d, 0xbb, 0x6e, 0xc1,
	0xd6, 0xe6, 0x64, 0x22, 0x56, 0x9b, 0xf1, 0x2c, 0x84, 0xbe, 0x02, 0x14, 0xe5, 0xe3, 0x53, 0x9a,
	0xf2, 0x00, 0x65, 0x09, 0xf5, 0x7e, 0x41, 0x53, 0xfe, 0xce, 0xb8, 0x51, 0xe3, 0x1a, 0x46, 0x1d,
	0x41, 0xe6, 0x0e, 0xba, 0x05, 0x15, 0x56, 0xa3, 0x19, 0x04, 0xbd, 0x82, 0x9b, 0x29, 0xf5, 0xe3,
	0x94, 0x27, 0x2c, 0x09, 0xe8, 0x59, 0xe8, 0x53, 0x79, 0xd4, 0x25, 0x61, 0xf5, 0xe4, 0x1a, 0x56,
	0x71, 0xc9, 0x67, 0x0a, 0x3a, 0x71, 0xd8, 0xad, 0x74, 0x1e, 0x44, 0x47, 0x97, 0xd8, 0x8e, 0xbc,
	0x31, 0x15, 0x2f, 0xbf, 0x3e, 0xa7, 0xe3, 0x78, 0x63, 0x8a, 0x3e, 0x03, 0x74, 0x7e, 0x31, 0xbc,
	0x5a, 0x08, 0x67, 0xeb, 0x42, 0x41, 0x9d, 0x44, 0x34, 0x1c, 0x4b, 0x0b, 0xf7, 0x61, 0x2d, 0x3e,
	0x1d, 0xe4, 0x99, 0xef, 0x31, 0x1a, 0x90, 0x30, 0x68, 0xc0, 0xae, 0xb2, 0x57, 0xc5, 0xab, 0xe7,
	0xa0, 0x1d, 0xa0, 0x7b, 0xb0, 0x22, 0xff, 0xec, 0x58, 0x9c, 0x84, 0xbe, 0xa8, 0x1c, 0x75, 0x0c,
	0x02, 0xea, 0x71, 0x44, 0xfb, 0x9b, 0x02, 0x1b, 0x33, 0x99, 0x8e, 0x76, 0x61, 0xc7, 0x76, 0x7a,
	0x16, 0xd6, 0x8d, 0x9e, 0xed, 0x3a, 0xa4, 0xf7, 0xac, 0x63, 0xcd, 0xbc, 0xf1, 0x75, 0x00, 0xd3,
	0xee, 0x1a, 0xfd, 0x6e, 0xd7, 0x76, 0x1d, 0x55, 0x41, 0x2a, 0xac, 0x76, 0xb0, 0xd5, 0xb5, 0x9c,
	0x9e, 0xce, 0x55, 0xd4, 0x0a, 0x97, 0xe8, 0x34, 0x5d, 0xc7, 0x22, 0x86, 0xde, 0x6a, 0xa9, 0x55,
	0xb4, 0x06, 0xf5, 0x27, 0xae, 0x6d, 0x58, 0x6d, 0xdd, 0x6e, 0xa9, 0x0b, 0xe8, 0x0e, 0xdc, 0xea,
	0x60, 0xf7, 0xc4, 0x12, 0x04, 0x7a, 0xab, 0xf5, 0x8c, 0x74, 0xb0, 0x6b, 0xf6, 0x0d, 0xcb, 0x54,
	0x6b, 0x9c, 0x4d, 0xc8, 0x92, 0xae, 0xa5, 0x63, 0xa3, 0xa9, 0x2e, 0xa2, 0x4d, 0x58, 0x93, 0x88,
	0xe1, 0xb6, 0xdb, 0xba, 0x63, 0xaa, 0x4b, 0x9c, 0xd0, 0xb4, 0x8d, 0xc2, 0xde, 0xb2, 0x16, 0x00,
	0x9a, 0x4f, 0x7f, 0x74, 0x1f, 0xee, 0xb5, 0x6d, 0x03, 0xbb, 0xd2, 0x15, 0xd3, 0xee, 0xf6, 0x74,
	0xc7, 0x98, 0x3d, 0xcc, 0x1a, 0xd4, 0x79, 0xb9, 0x3a, 0xb1, 0xad, 0x96, 0xa9, 0x2a, 0xbc, 0x0e,
	0xb5, 0x6d, 0x53, 0xae, 0x2a, 0x7c, 0x75, 0x52, 0xee, 0x55, 0x35, 0x07, 0x36, 0xe7, 0x92, 0x9d,
	0x1b, 0x71, 0xb1, 0xfd, 0xd8, 0x76, 0xf4, 0x16, 0x69, 0x5b, 0xa6, 0xad, 0x5f, 0x16, 0xb1, 0x3a,
	0xd4, 0xf4, 0xbe, 0x69, 0xbb, 0xaa, 0xc2, 0x7f, 0x3e, 0xb1, 0x4d, 0xcb, 0x55, 0x2b, 0x5a, 0x02,
	0xea, 0x6c, 0x1e, 0x23, 0x0d, 0xee, 0x3a, 0xfd, 0xf6, 0xb1, 0x85, 0x89, 0x7b, 0x42, 0xba, 0x1d,
	0x4b, 0xff, 0xa9, 0x85, 0xbb, 0x33, 0x6c, 0x1b, 0xb0, 0xc2, 0x0f, 0x54, 0xec, 0xca, 0x0b, 0xe8,
	0x3d, 0x75, 0x27, 0xe2, 0x6a, 0x05, 0xdd, 0x84, 0xcd, 0x76, 0xbf, 0xd5, 0xb3, 0x3b, 0x2d, 0xeb,
	0x1c, 0xae, 0x6a, 0x5f, 0x2b, 0xb2, 0x76, 0xce, 0xe6, 0xeb, 0x87, 0xf0, 0x01, 0xb6, 0x0c, 0x17,
	0x8b, 0x82, 0x6e, 0x5a, 0x4f, 0x78, 0xb0, 0x2f, 0xbf, 0xf8, 0x6e, 0x5b, 0xc7, 0x3d, 0x11, 0x50,
	0x55, 0x41, 0x8b, 0x50, 0xe9, 0x18, 0xd3, 0xd7, 0xcd, 0x4b, 0xbf, 0x5a, 0x45, 0x2b, 0xb0, 0xf4,
	0xc4, 0x6a, 0xda, 0x46, 0xcb, 0x52, 0x17, 0xf8, 0x7f, 0x85, 0xdb, 0x6b, 0xf2, 0x03, 0xf5, 0x7b,
	0xa6, 0xeb, 0xe2, 0x82, 0x5f, 0xad, 0xa1, 0x5b, 0xb0, 0x25, 0x77, 0x6c, 0x67, 0x7a, 0x63, 0x51,
	0xfb, 0x04, 0xd6, 0x2e, 0xfc, 0xb9, 0xa2, 0x06, 0x2c, 0x25, 0xcf, 0x53, 0x2f, 0xa3, 0x59, 0x43,
	0xd9, 0xad, 0xee, 0xd5, 0x71, 0xb9, 0xd4, 0xf0, 0xa4, 0x57, 0x9f, 0x34, 0x9c, 0x68, 0x1b, 0x96,
	0xca, 0xee, 0x4e, 0x29, 0xba, 0xbb, 0x12, 0x40, 0x08, 0xaa, 0x79, 0x1a, 0x8a, 0x36, 0xa4, 0xde,
	0xbc, 0x81, 0xf9, 0xe2, 0x78, 0x1d, 0x64, 0xf3, 0x47, 0xb2, 0x38, 0x4f, 0x7d, 0xaa, 0xd1, 0x49,
	0xa7, 0xc4, 0xfb, 0xd3, 0x2c, 0x89, 0xa3, 0x8c, 0xa2, 0x0e, 0x2c, 0x95, 0x0d, 0x56, 0x45, 0xb4,
	0x07, 0x9f, 0x5f, 0xa9, 0x3d, 0x98, 0x72, 0x4e, 0x76, 0x62, 0xb8, 0xa4, 0xd1, 0x12, 0xd8, 0xb9,
	0xbc, 0x81, 0xff, 0xd6, 0x2c, 0xfe, 0x43, 0xb9, 0xdc, 0xe4, 0xe4, 0x3f, 0x54, 0xb6, 0x4d, 0xc3,
	0x94, 0x66, 0x19, 0x49, 0x68, 0xea, 0x97, 0x21, 0xac, 0x89, 0xb6, 0x49, 0xe0, 0x1d, 0x09, 0xa3,
	0x87, 0x00, 0x19, 0xf3, 0x52, 0x26, 0x3a, 0x9b, 0x62, 0x34, 0xd8, 0x2e, 0x1d, 0x2c, 0x87, 0xae,
	0xfd, 0x5e, 0x39, 0x74, 0xe1, 0xba, 0x90, 0xe6, 0x6b, 0x64, 0x82, 0x3a, 0xf2, 0x32, 0x46, 0xf2,
	0x24, 0xe0, 0x8d, 0xa1, 0x20, 0xa8, 0xbe, 0x95, 0x60, 0x9d, 0xeb, 0xf4, 0x85, 0x0a, 0x07, 0xb5,
	0x6f, 0x2a, 0xf3, 0xdd, 0xf8, 0x54, 0xf4, 0xf6, 0xa0, 0x46, 0xd3, 0x34, 0x4e, 0x8b, 0x66, 0x1c,
	0x95, 0xcc, 0x69, 0xe2, 0xef, 0x77, 0xc5, 0xb8, 0x87, 0xa5, 0x00, 0xea, 0xce, 0xc6, 0xf9, 0x3a,
	0x13, 0xc7, 0x4c, 0xa8, 0x51, 0x0e, 0x9b, 0x45, 0x57, 0x49, 0xcf, 0x68, 0xc4, 0x64, 0x31, 0x97,
	0x7f, 0xee, 0xf6, 0x3b, 0xd2, 0x9f, 0x1f, 0xaa, 0xb8, 0x61, 0x8b, 0x33, 0xca, 0xae, 0x24, 0xbb,
	0x08, 0x68, 0x2d, 0xd8, 0x98, 0x91, 0x41, 0x3b, 0xd0, 0xe0, 0xbd, 0x94, 0xd1, 0x24, 0xd6, 0x13,
	0xcb, 0xe9, 0xcd, 0x3c, 0xe9, 0x3b, 0x70, 0xcb, 0x72, 0x4c, 0x51, 0x6c, 0x6c, 0xe7, 0x71, 0xcb,
	0x22, 0xfd, 0x1e, 0xaf, 0xfd, 0x8e, 0x61, 0xa9, 0x8a, 0xf6, 0xe7, 0xd7, 0x0c, 0x3c, 0xf2, 0xb0,
	0x88, 0xc0, 0xea, 0x85, 0x5e, 0x5c, 0x11, 0xd1, 0xfb, 0xd1, 0xbb, 0x66, 0xe9, 0x54, 0xe3, 0x8e,
	0x2f, 0x10, 0xa2, 0xdb, 0xb0, 0x1c, 0x66, 0x64, 0xc0, 0x0b, 0x6e, 0x31, 0xff, 0x2c, 0x85, 0xd9,
	0x09, 0x5f, 0xa2, 0x1d, 0xe0, 0x09, 0x75, 0x1a, 0x8e, 0x42, 0xf6, 0x52, 0x24, 0x4f, 0x05, 0x9f,
	0x03, 0xda, 0x2b, 0xb8, 0xf5, 0x9a, 0xc7, 0xf0, 0xad, 0x3b, 0xad, 0xfd, 0x41, 0x81, 0x9d, 0x37,
	0x89, 0xa3, 0xbb, 0x00, 0x2c, 0xf5, 0xa2, 0xcc, 0x4f, 0xc3, 0x44, 0x3e, 0xaf, 0x3a, 0x9e, 0x42,
	0xf8, 0xbe, 0x98, 0x03, 0x03, 0x5a, 0xce, 0x7d, 0x15, 0x3c, 0x85, 0xa0, 0x1f, 0x43, 0x8d, 0x8f,
	0x14, 0x7c, 0xd0, 0xe3, 0xae, 0x7f, 0xfc, 0x16, 0xd7, 0xf9, 0x7c, 0x61, 0x47, 0x83, 0x18, 0x4b,
	0x2d, 0xed, 0xb7, 0x0a, 0x2c, 0x97, 0x18, 0xfa, 0xe2, 0xc2, 0x2b, 0x96, 0x4f, 0xe5, 0xf6, 0xdc,
	0x23, 0x34, 0x8b, 0x4f, 0x2b, 0xd3, 0x8f, 0xf8, 0xfb, 0x7c, 0x72, 0x0c, 0xa6, 0x5f, 0xff, 0x1b,
	0xf4, 0x96, 0x68, 0x24, 0x66, 0x1c, 0x84, 0x60, 0x81, 0x7b, 0x51, 0x8c, 0x77, 0xe2, 0xf7, 0xd1,
	0xbf, 0xaa, 0xb0, 0x28, 0x03, 0x86, 0x7e, 0xaf, 0x40, 0x7d, 0x92, 0xf5, 0xe8, 0x8a, 0x5f, 0x1a,
	0x26, 0x1f, 0x11, 0xb6, 0x1f, 0x5c, 0x5d, 0x41, 0x3e, 0x28, 0xed, 0xa3, 0x5f, 0xfd, 0xf3, 0xdf,
	0xbf, 0xab, 0xec, 0x6a, 0x77, 0x0e, 0x26, 0x52, 0xc5, 0xf7, 0xad, 0x47, 0x69, 0x29, 0xfc, 0x48,
	0xf9, 0x14, 0x7d, 0xad, 0xc0, 0x7b, 0x97, 0x55, 0x4e, 0xf4, 0xe8, 0x2d, 0x26, 0xdf, 0xf0, 0x89,
	0x66, 0xfb, 0xfd, 0x52, 0x77, 0xea, 0x43, 0xd7, 0xbe, 0x5b, 0x7e, 0xe8, 0xd2, 0x0e, 0x85, 0x6f,
	0xdf, 0xd5, 0x3e, 0x9a, 0xf7, 0x6d, 0x4a, 0xe1, 0x82, 0x9b, 0xbf, 0x51, 0x00, 0xcd, 0x97, 0x0f,
	0xf4, 0xc5, 0x35, 0x2a, 0x8e, 0x74, 0xf1, 0xe1, 0xb5, 0x6b, 0xd5, 0x9e, 0xf2, 0x40, 0x39, 0xfe,
	0x01, 0x7c, 0xe0, 0xc7, 0xe3, 0x37, 0x73, 0x1c, 0xaf, 0xc8, 0xcb, 0xef, 0xf0, 0xac, 0xe9, 0x28,
	0xff, 0x51, 0x94, 0xd3, 0x45, 0x91, 0x41, 0xdf, 0xfb, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe5,
	0x81, 0xe3, 0x44, 0x78, 0x14, 0x00, 0x00,
}
