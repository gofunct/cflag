// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: google/bytestream/bytestream.proto

package google_bytestream

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "go.pedge.io/pb/gogo/google/api"
import _ "github.com/gogo/protobuf/types"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Request object for ByteStream.Read.
type ReadRequest struct {
	// The name of the resource to read.
	ResourceName string `protobuf:"bytes,1,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	// The offset for the first byte to return in the read, relative to the start
	// of the resource.
	//
	// A `read_offset` that is negative or greater than the size of the resource
	// will cause an `OUT_OF_RANGE` error.
	ReadOffset int64 `protobuf:"varint,2,opt,name=read_offset,json=readOffset,proto3" json:"read_offset,omitempty"`
	// The maximum number of `data` bytes the server is allowed to return in the
	// sum of all `ReadResponse` messages. A `read_limit` of zero indicates that
	// there is no limit, and a negative `read_limit` will cause an error.
	//
	// If the stream returns fewer bytes than allowed by the `read_limit` and no
	// error occurred, the stream includes all data from the `read_offset` to the
	// end of the resource.
	ReadLimit int64 `protobuf:"varint,3,opt,name=read_limit,json=readLimit,proto3" json:"read_limit,omitempty"`
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (m *ReadRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptorBytestream, []int{0} }

func (m *ReadRequest) GetResourceName() string {
	if m != nil {
		return m.ResourceName
	}
	return ""
}

func (m *ReadRequest) GetReadOffset() int64 {
	if m != nil {
		return m.ReadOffset
	}
	return 0
}

func (m *ReadRequest) GetReadLimit() int64 {
	if m != nil {
		return m.ReadLimit
	}
	return 0
}

// Response object for ByteStream.Read.
type ReadResponse struct {
	// A portion of the data for the resource. The service **may** leave `data`
	// empty for any given `ReadResponse`. This enables the service to inform the
	// client that the request is still live while it is running an operation to
	// generate more data.
	Data []byte `protobuf:"bytes,10,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ReadResponse) Reset()                    { *m = ReadResponse{} }
func (m *ReadResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadResponse) ProtoMessage()               {}
func (*ReadResponse) Descriptor() ([]byte, []int) { return fileDescriptorBytestream, []int{1} }

func (m *ReadResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// Request object for ByteStream.Write.
type WriteRequest struct {
	// The name of the resource to write. This **must** be set on the first
	// `WriteRequest` of each `Write()` action. If it is set on subsequent calls,
	// it **must** match the value of the first request.
	ResourceName string `protobuf:"bytes,1,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	// The offset from the beginning of the resource at which the data should be
	// written. It is required on all `WriteRequest`s.
	//
	// In the first `WriteRequest` of a `Write()` action, it indicates
	// the initial offset for the `Write()` call. The value **must** be equal to
	// the `committed_size` that a call to `QueryWriteStatus()` would return.
	//
	// On subsequent calls, this value **must** be set and **must** be equal to
	// the sum of the first `write_offset` and the sizes of all `data` bundles
	// sent previously on this stream.
	//
	// An incorrect value will cause an error.
	WriteOffset int64 `protobuf:"varint,2,opt,name=write_offset,json=writeOffset,proto3" json:"write_offset,omitempty"`
	// If `true`, this indicates that the write is complete. Sending any
	// `WriteRequest`s subsequent to one in which `finish_write` is `true` will
	// cause an error.
	FinishWrite bool `protobuf:"varint,3,opt,name=finish_write,json=finishWrite,proto3" json:"finish_write,omitempty"`
	// A portion of the data for the resource. The client **may** leave `data`
	// empty for any given `WriteRequest`. This enables the client to inform the
	// service that the request is still live while it is running an operation to
	// generate more data.
	Data []byte `protobuf:"bytes,10,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *WriteRequest) Reset()                    { *m = WriteRequest{} }
func (m *WriteRequest) String() string            { return proto.CompactTextString(m) }
func (*WriteRequest) ProtoMessage()               {}
func (*WriteRequest) Descriptor() ([]byte, []int) { return fileDescriptorBytestream, []int{2} }

func (m *WriteRequest) GetResourceName() string {
	if m != nil {
		return m.ResourceName
	}
	return ""
}

func (m *WriteRequest) GetWriteOffset() int64 {
	if m != nil {
		return m.WriteOffset
	}
	return 0
}

func (m *WriteRequest) GetFinishWrite() bool {
	if m != nil {
		return m.FinishWrite
	}
	return false
}

func (m *WriteRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// Response object for ByteStream.Write.
type WriteResponse struct {
	// The number of bytes that have been processed for the given resource.
	CommittedSize int64 `protobuf:"varint,1,opt,name=committed_size,json=committedSize,proto3" json:"committed_size,omitempty"`
}

func (m *WriteResponse) Reset()                    { *m = WriteResponse{} }
func (m *WriteResponse) String() string            { return proto.CompactTextString(m) }
func (*WriteResponse) ProtoMessage()               {}
func (*WriteResponse) Descriptor() ([]byte, []int) { return fileDescriptorBytestream, []int{3} }

func (m *WriteResponse) GetCommittedSize() int64 {
	if m != nil {
		return m.CommittedSize
	}
	return 0
}

// Request object for ByteStream.QueryWriteStatus.
type QueryWriteStatusRequest struct {
	// The name of the resource whose write status is being requested.
	ResourceName string `protobuf:"bytes,1,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
}

func (m *QueryWriteStatusRequest) Reset()         { *m = QueryWriteStatusRequest{} }
func (m *QueryWriteStatusRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWriteStatusRequest) ProtoMessage()    {}
func (*QueryWriteStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorBytestream, []int{4}
}

func (m *QueryWriteStatusRequest) GetResourceName() string {
	if m != nil {
		return m.ResourceName
	}
	return ""
}

// Response object for ByteStream.QueryWriteStatus.
type QueryWriteStatusResponse struct {
	// The number of bytes that have been processed for the given resource.
	CommittedSize int64 `protobuf:"varint,1,opt,name=committed_size,json=committedSize,proto3" json:"committed_size,omitempty"`
	// `complete` is `true` only if the client has sent a `WriteRequest` with
	// `finish_write` set to true, and the server has processed that request.
	Complete bool `protobuf:"varint,2,opt,name=complete,proto3" json:"complete,omitempty"`
}

func (m *QueryWriteStatusResponse) Reset()         { *m = QueryWriteStatusResponse{} }
func (m *QueryWriteStatusResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWriteStatusResponse) ProtoMessage()    {}
func (*QueryWriteStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorBytestream, []int{5}
}

func (m *QueryWriteStatusResponse) GetCommittedSize() int64 {
	if m != nil {
		return m.CommittedSize
	}
	return 0
}

func (m *QueryWriteStatusResponse) GetComplete() bool {
	if m != nil {
		return m.Complete
	}
	return false
}

func init() {
	proto.RegisterType((*ReadRequest)(nil), "google.bytestream.ReadRequest")
	proto.RegisterType((*ReadResponse)(nil), "google.bytestream.ReadResponse")
	proto.RegisterType((*WriteRequest)(nil), "google.bytestream.WriteRequest")
	proto.RegisterType((*WriteResponse)(nil), "google.bytestream.WriteResponse")
	proto.RegisterType((*QueryWriteStatusRequest)(nil), "google.bytestream.QueryWriteStatusRequest")
	proto.RegisterType((*QueryWriteStatusResponse)(nil), "google.bytestream.QueryWriteStatusResponse")
}

func init() { proto.RegisterFile("google/bytestream/bytestream.proto", fileDescriptorBytestream) }

var fileDescriptorBytestream = []byte{
	// 419 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcf, 0xab, 0xd3, 0x40,
	0x10, 0xc7, 0xc9, 0xeb, 0x53, 0xfa, 0x26, 0xa9, 0x3f, 0x16, 0xc4, 0x10, 0xf4, 0xbd, 0xbc, 0x88,
	0x10, 0x14, 0x52, 0x51, 0xf0, 0xe8, 0xa1, 0x37, 0xa1, 0xf8, 0x63, 0x7b, 0xf0, 0x24, 0x61, 0x9b,
	0x4c, 0xea, 0x62, 0x37, 0x1b, 0x77, 0x37, 0x94, 0xf6, 0x7f, 0xf0, 0xe2, 0x5f, 0x2c, 0xd9, 0x8d,
	0x6d, 0xb5, 0x2d, 0xd8, 0x5b, 0xe6, 0x3b, 0xf3, 0xdd, 0xf9, 0x64, 0x76, 0x16, 0x92, 0x85, 0x94,
	0x8b, 0x25, 0x8e, 0xe7, 0x6b, 0x83, 0xda, 0x28, 0x64, 0x62, 0xef, 0x33, 0x6b, 0x94, 0x34, 0x92,
	0x3c, 0x74, 0x35, 0xd9, 0x2e, 0x11, 0x3d, 0xe9, 0x6d, 0xac, 0xe1, 0x63, 0x56, 0xd7, 0xd2, 0x30,
	0xc3, 0x65, 0xad, 0x9d, 0x21, 0xba, 0xee, 0xb3, 0x36, 0x9a, 0xb7, 0xd5, 0x78, 0xa5, 0x58, 0xd3,
	0xa0, 0xea, 0xf3, 0x89, 0x02, 0x9f, 0x22, 0x2b, 0x29, 0xfe, 0x68, 0x51, 0x1b, 0xf2, 0x0c, 0x46,
	0x0a, 0xb5, 0x6c, 0x55, 0x81, 0x79, 0xcd, 0x04, 0x86, 0x5e, 0xec, 0xa5, 0x57, 0x34, 0xf8, 0x23,
	0x7e, 0x60, 0x02, 0xc9, 0x0d, 0xf8, 0x0a, 0x59, 0x99, 0xcb, 0xaa, 0xd2, 0x68, 0xc2, 0x8b, 0xd8,
	0x4b, 0x07, 0x14, 0x3a, 0xe9, 0xa3, 0x55, 0xc8, 0x53, 0xb0, 0x51, 0xbe, 0xe4, 0x82, 0x9b, 0x70,
	0x60, 0xf3, 0x57, 0x9d, 0x32, 0xed, 0x84, 0x24, 0x81, 0xc0, 0xf5, 0xd4, 0x8d, 0xac, 0x35, 0x12,
	0x02, 0x97, 0x25, 0x33, 0x2c, 0x84, 0xd8, 0x4b, 0x03, 0x6a, 0xbf, 0x93, 0x9f, 0x1e, 0x04, 0x5f,
	0x14, 0x37, 0x78, 0x16, 0xd9, 0x2d, 0x04, 0xab, 0xce, 0xf4, 0x37, 0x9a, 0x6f, 0xb5, 0x9e, 0xed,
	0x16, 0x82, 0x8a, 0xd7, 0x5c, 0x7f, 0xcb, 0xad, 0x6a, 0xe9, 0x86, 0xd4, 0x77, 0x9a, 0xed, 0x78,
	0x94, 0xe7, 0x2d, 0x8c, 0x7a, 0x9c, 0x1e, 0xfa, 0x39, 0xdc, 0x2b, 0xa4, 0x10, 0xdc, 0x18, 0x2c,
	0x73, 0xcd, 0x37, 0x0e, 0x68, 0x40, 0x47, 0x5b, 0x75, 0xc6, 0x37, 0x98, 0xbc, 0x83, 0xc7, 0x9f,
	0x5b, 0x54, 0x6b, 0x6b, 0x9e, 0x19, 0x66, 0x5a, 0x7d, 0xce, 0x1f, 0x25, 0x5f, 0x21, 0x3c, 0xf4,
	0x9f, 0x85, 0x40, 0x22, 0x18, 0x16, 0x52, 0x34, 0x4b, 0x34, 0x68, 0x07, 0x32, 0xa4, 0xdb, 0xf8,
	0xf5, 0xaf, 0x0b, 0x80, 0xc9, 0xba, 0x3b, 0xb9, 0xdb, 0x25, 0xf2, 0x1e, 0x2e, 0xbb, 0x9b, 0x21,
	0xd7, 0xd9, 0xc1, 0x9e, 0x65, 0x7b, 0x6b, 0x12, 0xdd, 0x9c, 0xcc, 0x3b, 0xb4, 0x57, 0x1e, 0x99,
	0xc2, 0x1d, 0x37, 0xcd, 0x63, 0xb5, 0xfb, 0x37, 0x1b, 0xc5, 0xa7, 0x0b, 0xdc, 0x69, 0xa9, 0x47,
	0xbe, 0xc3, 0x83, 0x7f, 0xc7, 0x40, 0x5e, 0x1c, 0xf1, 0x9d, 0x98, 0x75, 0xf4, 0xf2, 0xbf, 0x6a,
	0x5d, 0xbb, 0x49, 0x0a, 0x8f, 0x0a, 0x29, 0x0e, 0x1d, 0x93, 0xfb, 0xbb, 0x51, 0x7d, 0xb2, 0xef,
	0xe9, 0xae, 0x7d, 0x44, 0x6f, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0xcb, 0x57, 0xc7, 0x11, 0xbb,
	0x03, 0x00, 0x00,
}
