// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cflag.proto

package flag

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import types "github.com/gogo/protobuf/types"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Flag struct {
	Key        string     `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Help       string     `protobuf:"bytes,2,opt,name=help,proto3" json:"help,omitempty"`
	ConfigPath string     `protobuf:"bytes,3,opt,name=configPath,proto3" json:"configPath,omitempty"`
	Required   bool       `protobuf:"varint,4,opt,name=required,proto3" json:"required,omitempty"`
	Default    string     `protobuf:"bytes,5,opt,name=default,proto3" json:"default,omitempty"`
	Typestr    string     `protobuf:"bytes,6,opt,name=typestr,proto3" json:"typestr,omitempty"`
	Value      *types.Any `protobuf:"bytes,7,opt,name=value,proto3" json:"value,omitempty"`
	Text       string     `protobuf:"bytes,8,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *Flag) Reset()      { *m = Flag{} }
func (*Flag) ProtoMessage() {}
func (*Flag) Descriptor() ([]byte, []int) {
	return fileDescriptor_cflag_6ff440bbf933b264, []int{0}
}
func (m *Flag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Flag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Flag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Flag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Flag.Merge(dst, src)
}
func (m *Flag) XXX_Size() int {
	return m.Size()
}
func (m *Flag) XXX_DiscardUnknown() {
	xxx_messageInfo_Flag.DiscardUnknown(m)
}

var xxx_messageInfo_Flag proto.InternalMessageInfo

func (m *Flag) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Flag) GetHelp() string {
	if m != nil {
		return m.Help
	}
	return ""
}

func (m *Flag) GetConfigPath() string {
	if m != nil {
		return m.ConfigPath
	}
	return ""
}

func (m *Flag) GetRequired() bool {
	if m != nil {
		return m.Required
	}
	return false
}

func (m *Flag) GetDefault() string {
	if m != nil {
		return m.Default
	}
	return ""
}

func (m *Flag) GetTypestr() string {
	if m != nil {
		return m.Typestr
	}
	return ""
}

func (m *Flag) GetValue() *types.Any {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Flag) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (*Flag) XXX_MessageName() string {
	return "flag.Flag"
}
func init() {
	proto.RegisterType((*Flag)(nil), "flag.Flag")
}
func (this *Flag) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Flag)
	if !ok {
		that2, ok := that.(Flag)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Help != that1.Help {
		return false
	}
	if this.ConfigPath != that1.ConfigPath {
		return false
	}
	if this.Required != that1.Required {
		return false
	}
	if this.Default != that1.Default {
		return false
	}
	if this.Typestr != that1.Typestr {
		return false
	}
	if !this.Value.Equal(that1.Value) {
		return false
	}
	if this.Text != that1.Text {
		return false
	}
	return true
}
func (this *Flag) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&flag.Flag{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Help: "+fmt.Sprintf("%#v", this.Help)+",\n")
	s = append(s, "ConfigPath: "+fmt.Sprintf("%#v", this.ConfigPath)+",\n")
	s = append(s, "Required: "+fmt.Sprintf("%#v", this.Required)+",\n")
	s = append(s, "Default: "+fmt.Sprintf("%#v", this.Default)+",\n")
	s = append(s, "Typestr: "+fmt.Sprintf("%#v", this.Typestr)+",\n")
	if this.Value != nil {
		s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	}
	s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCflag(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Flag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Flag) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCflag(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Help) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCflag(dAtA, i, uint64(len(m.Help)))
		i += copy(dAtA[i:], m.Help)
	}
	if len(m.ConfigPath) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCflag(dAtA, i, uint64(len(m.ConfigPath)))
		i += copy(dAtA[i:], m.ConfigPath)
	}
	if m.Required {
		dAtA[i] = 0x20
		i++
		if m.Required {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Default) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCflag(dAtA, i, uint64(len(m.Default)))
		i += copy(dAtA[i:], m.Default)
	}
	if len(m.Typestr) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCflag(dAtA, i, uint64(len(m.Typestr)))
		i += copy(dAtA[i:], m.Typestr)
	}
	if m.Value != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCflag(dAtA, i, uint64(m.Value.Size()))
		n1, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Text) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCflag(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	return i, nil
}

func encodeVarintCflag(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Flag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovCflag(uint64(l))
	}
	l = len(m.Help)
	if l > 0 {
		n += 1 + l + sovCflag(uint64(l))
	}
	l = len(m.ConfigPath)
	if l > 0 {
		n += 1 + l + sovCflag(uint64(l))
	}
	if m.Required {
		n += 2
	}
	l = len(m.Default)
	if l > 0 {
		n += 1 + l + sovCflag(uint64(l))
	}
	l = len(m.Typestr)
	if l > 0 {
		n += 1 + l + sovCflag(uint64(l))
	}
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovCflag(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovCflag(uint64(l))
	}
	return n
}

func sovCflag(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCflag(x uint64) (n int) {
	return sovCflag(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Flag) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Flag{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Help:` + fmt.Sprintf("%v", this.Help) + `,`,
		`ConfigPath:` + fmt.Sprintf("%v", this.ConfigPath) + `,`,
		`Required:` + fmt.Sprintf("%v", this.Required) + `,`,
		`Default:` + fmt.Sprintf("%v", this.Default) + `,`,
		`Typestr:` + fmt.Sprintf("%v", this.Typestr) + `,`,
		`Value:` + strings.Replace(fmt.Sprintf("%v", this.Value), "Any", "types.Any", 1) + `,`,
		`Text:` + fmt.Sprintf("%v", this.Text) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCflag(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Flag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCflag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Flag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Flag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCflag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCflag
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Help", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCflag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCflag
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Help = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCflag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCflag
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfigPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Required", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCflag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Required = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Default", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCflag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCflag
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Default = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typestr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCflag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCflag
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Typestr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCflag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCflag
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &types.Any{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCflag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCflag
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCflag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCflag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCflag(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCflag
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCflag
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCflag
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCflag
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCflag
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCflag(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCflag = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCflag   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("cflag.proto", fileDescriptor_cflag_6ff440bbf933b264) }

var fileDescriptor_cflag_6ff440bbf933b264 = []byte{
	// 295 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8f, 0x3d, 0x4e, 0x03, 0x31,
	0x10, 0x85, 0x3d, 0x64, 0xf3, 0x83, 0xd3, 0x20, 0x8b, 0xc2, 0xa4, 0x18, 0x45, 0x54, 0x11, 0x12,
	0x1b, 0x09, 0x1a, 0x5a, 0x28, 0xa8, 0x51, 0x6e, 0xe0, 0x24, 0x5e, 0x27, 0xc2, 0xc4, 0x61, 0xf1,
	0x22, 0xb6, 0xe3, 0x08, 0x1c, 0x83, 0xa3, 0xa4, 0xdc, 0x32, 0x05, 0x05, 0xeb, 0x6d, 0x28, 0x73,
	0x04, 0x64, 0x9b, 0x00, 0xdd, 0xf7, 0xcd, 0x7b, 0x96, 0x67, 0x68, 0x7f, 0x96, 0x69, 0xa1, 0xd2,
	0x75, 0x6e, 0xac, 0x61, 0x89, 0xe7, 0xc1, 0x89, 0x32, 0x46, 0x69, 0x39, 0x0e, 0xb3, 0x69, 0x91,
	0x8d, 0xc5, 0xaa, 0x8c, 0x85, 0xc1, 0xb9, 0x5a, 0xda, 0x45, 0x31, 0x4d, 0x67, 0xe6, 0x61, 0xac,
	0x8c, 0x32, 0x7f, 0x1d, 0x6f, 0x41, 0x02, 0xc5, 0xfa, 0xe9, 0x07, 0xd0, 0xe4, 0x56, 0x0b, 0xc5,
	0x8e, 0x68, 0xeb, 0x5e, 0x96, 0x1c, 0x86, 0x30, 0x3a, 0x9c, 0x78, 0x64, 0x8c, 0x26, 0x0b, 0xa9,
	0xd7, 0xfc, 0x20, 0x8c, 0x02, 0x33, 0xa4, 0x74, 0x66, 0x56, 0xd9, 0x52, 0xdd, 0x09, 0xbb, 0xe0,
	0xad, 0x90, 0xfc, 0x9b, 0xb0, 0x01, 0xed, 0xe5, 0xf2, 0xb1, 0x58, 0xe6, 0x72, 0xce, 0x93, 0x21,
	0x8c, 0x7a, 0x93, 0x5f, 0x67, 0x9c, 0x76, 0xe7, 0x32, 0x13, 0x85, 0xb6, 0xbc, 0x1d, 0x1e, 0xee,
	0xd5, 0x27, 0xb6, 0x5c, 0xcb, 0x27, 0x9b, 0xf3, 0x4e, 0x4c, 0x7e, 0x94, 0x9d, 0xd1, 0xf6, 0xb3,
	0xd0, 0x85, 0xe4, 0xdd, 0x21, 0x8c, 0xfa, 0x17, 0xc7, 0x69, 0x3c, 0x3c, 0xdd, 0x1f, 0x95, 0x5e,
	0xaf, 0xca, 0x49, 0xac, 0xf8, 0x7d, 0xad, 0x7c, 0xb1, 0xbc, 0x17, 0xf7, 0xf5, 0x7c, 0x73, 0x55,
	0xd5, 0x48, 0xb6, 0x35, 0x92, 0x5d, 0x8d, 0xf0, 0xea, 0x10, 0xde, 0x1d, 0xc2, 0xc6, 0x21, 0x54,
	0x0e, 0xe1, 0xd3, 0x21, 0x7c, 0x39, 0x24, 0x3b, 0x87, 0xf0, 0xd6, 0x20, 0xd9, 0x34, 0x08, 0x55,
	0x83, 0x64, 0xdb, 0x20, 0x99, 0x76, 0xc2, 0x17, 0x97, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x64,
	0x27, 0x92, 0x26, 0x7e, 0x01, 0x00, 0x00,
}
