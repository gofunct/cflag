// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: google/container/v1beta1/cluster_service.proto

package google_container_v1beta1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "go.pedge.io/pb/gogo/google/api"
import _ "github.com/gogo/protobuf/types"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Possible values for Effect in taint.
type NodeTaint_Effect int32

const (
	// Not set
	NodeTaint_EFFECT_UNSPECIFIED NodeTaint_Effect = 0
	// NoSchedule
	NodeTaint_NO_SCHEDULE NodeTaint_Effect = 1
	// PreferNoSchedule
	NodeTaint_PREFER_NO_SCHEDULE NodeTaint_Effect = 2
	// NoExecute
	NodeTaint_NO_EXECUTE NodeTaint_Effect = 3
)

var NodeTaint_Effect_name = map[int32]string{
	0: "EFFECT_UNSPECIFIED",
	1: "NO_SCHEDULE",
	2: "PREFER_NO_SCHEDULE",
	3: "NO_EXECUTE",
}
var NodeTaint_Effect_value = map[string]int32{
	"EFFECT_UNSPECIFIED": 0,
	"NO_SCHEDULE":        1,
	"PREFER_NO_SCHEDULE": 2,
	"NO_EXECUTE":         3,
}

func (x NodeTaint_Effect) String() string {
	return proto.EnumName(NodeTaint_Effect_name, int32(x))
}
func (NodeTaint_Effect) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorClusterService, []int{1, 0}
}

// Allowed Network Policy providers.
type NetworkPolicy_Provider int32

const (
	// Not set
	NetworkPolicy_PROVIDER_UNSPECIFIED NetworkPolicy_Provider = 0
	// Tigera (Calico Felix).
	NetworkPolicy_CALICO NetworkPolicy_Provider = 1
)

var NetworkPolicy_Provider_name = map[int32]string{
	0: "PROVIDER_UNSPECIFIED",
	1: "CALICO",
}
var NetworkPolicy_Provider_value = map[string]int32{
	"PROVIDER_UNSPECIFIED": 0,
	"CALICO":               1,
}

func (x NetworkPolicy_Provider) String() string {
	return proto.EnumName(NetworkPolicy_Provider_name, int32(x))
}
func (NetworkPolicy_Provider) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorClusterService, []int{10, 0}
}

// The current status of the cluster.
type Cluster_Status int32

const (
	// Not set.
	Cluster_STATUS_UNSPECIFIED Cluster_Status = 0
	// The PROVISIONING state indicates the cluster is being created.
	Cluster_PROVISIONING Cluster_Status = 1
	// The RUNNING state indicates the cluster has been created and is fully
	// usable.
	Cluster_RUNNING Cluster_Status = 2
	// The RECONCILING state indicates that some work is actively being done on
	// the cluster, such as upgrading the master or node software. Details can
	// be found in the `statusMessage` field.
	Cluster_RECONCILING Cluster_Status = 3
	// The STOPPING state indicates the cluster is being deleted.
	Cluster_STOPPING Cluster_Status = 4
	// The ERROR state indicates the cluster may be unusable. Details
	// can be found in the `statusMessage` field.
	Cluster_ERROR Cluster_Status = 5
)

var Cluster_Status_name = map[int32]string{
	0: "STATUS_UNSPECIFIED",
	1: "PROVISIONING",
	2: "RUNNING",
	3: "RECONCILING",
	4: "STOPPING",
	5: "ERROR",
}
var Cluster_Status_value = map[string]int32{
	"STATUS_UNSPECIFIED": 0,
	"PROVISIONING":       1,
	"RUNNING":            2,
	"RECONCILING":        3,
	"STOPPING":           4,
	"ERROR":              5,
}

func (x Cluster_Status) String() string {
	return proto.EnumName(Cluster_Status_name, int32(x))
}
func (Cluster_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorClusterService, []int{13, 0}
}

// Current status of the operation.
type Operation_Status int32

const (
	// Not set.
	Operation_STATUS_UNSPECIFIED Operation_Status = 0
	// The operation has been created.
	Operation_PENDING Operation_Status = 1
	// The operation is currently running.
	Operation_RUNNING Operation_Status = 2
	// The operation is done, either cancelled or completed.
	Operation_DONE Operation_Status = 3
	// The operation is aborting.
	Operation_ABORTING Operation_Status = 4
)

var Operation_Status_name = map[int32]string{
	0: "STATUS_UNSPECIFIED",
	1: "PENDING",
	2: "RUNNING",
	3: "DONE",
	4: "ABORTING",
}
var Operation_Status_value = map[string]int32{
	"STATUS_UNSPECIFIED": 0,
	"PENDING":            1,
	"RUNNING":            2,
	"DONE":               3,
	"ABORTING":           4,
}

func (x Operation_Status) String() string {
	return proto.EnumName(Operation_Status_name, int32(x))
}
func (Operation_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorClusterService, []int{15, 0}
}

// Operation type.
type Operation_Type int32

const (
	// Not set.
	Operation_TYPE_UNSPECIFIED Operation_Type = 0
	// Cluster create.
	Operation_CREATE_CLUSTER Operation_Type = 1
	// Cluster delete.
	Operation_DELETE_CLUSTER Operation_Type = 2
	// A master upgrade.
	Operation_UPGRADE_MASTER Operation_Type = 3
	// A node upgrade.
	Operation_UPGRADE_NODES Operation_Type = 4
	// Cluster repair.
	Operation_REPAIR_CLUSTER Operation_Type = 5
	// Cluster update.
	Operation_UPDATE_CLUSTER Operation_Type = 6
	// Node pool create.
	Operation_CREATE_NODE_POOL Operation_Type = 7
	// Node pool delete.
	Operation_DELETE_NODE_POOL Operation_Type = 8
	// Set node pool management.
	Operation_SET_NODE_POOL_MANAGEMENT Operation_Type = 9
	// Automatic node pool repair.
	Operation_AUTO_REPAIR_NODES Operation_Type = 10
	// Automatic node upgrade.
	Operation_AUTO_UPGRADE_NODES Operation_Type = 11
	// Set labels.
	Operation_SET_LABELS Operation_Type = 12
	// Set/generate master auth materials
	Operation_SET_MASTER_AUTH Operation_Type = 13
	// Set node pool size.
	Operation_SET_NODE_POOL_SIZE Operation_Type = 14
	// Updates network policy for a cluster.
	Operation_SET_NETWORK_POLICY Operation_Type = 15
	// Set the maintenance policy.
	Operation_SET_MAINTENANCE_POLICY Operation_Type = 16
)

var Operation_Type_name = map[int32]string{
	0:  "TYPE_UNSPECIFIED",
	1:  "CREATE_CLUSTER",
	2:  "DELETE_CLUSTER",
	3:  "UPGRADE_MASTER",
	4:  "UPGRADE_NODES",
	5:  "REPAIR_CLUSTER",
	6:  "UPDATE_CLUSTER",
	7:  "CREATE_NODE_POOL",
	8:  "DELETE_NODE_POOL",
	9:  "SET_NODE_POOL_MANAGEMENT",
	10: "AUTO_REPAIR_NODES",
	11: "AUTO_UPGRADE_NODES",
	12: "SET_LABELS",
	13: "SET_MASTER_AUTH",
	14: "SET_NODE_POOL_SIZE",
	15: "SET_NETWORK_POLICY",
	16: "SET_MAINTENANCE_POLICY",
}
var Operation_Type_value = map[string]int32{
	"TYPE_UNSPECIFIED":         0,
	"CREATE_CLUSTER":           1,
	"DELETE_CLUSTER":           2,
	"UPGRADE_MASTER":           3,
	"UPGRADE_NODES":            4,
	"REPAIR_CLUSTER":           5,
	"UPDATE_CLUSTER":           6,
	"CREATE_NODE_POOL":         7,
	"DELETE_NODE_POOL":         8,
	"SET_NODE_POOL_MANAGEMENT": 9,
	"AUTO_REPAIR_NODES":        10,
	"AUTO_UPGRADE_NODES":       11,
	"SET_LABELS":               12,
	"SET_MASTER_AUTH":          13,
	"SET_NODE_POOL_SIZE":       14,
	"SET_NETWORK_POLICY":       15,
	"SET_MAINTENANCE_POLICY":   16,
}

func (x Operation_Type) String() string {
	return proto.EnumName(Operation_Type_name, int32(x))
}
func (Operation_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorClusterService, []int{15, 1}
}

// Operation type: what type update to perform.
type SetMasterAuthRequest_Action int32

const (
	// Operation is unknown and will error out.
	SetMasterAuthRequest_UNKNOWN SetMasterAuthRequest_Action = 0
	// Set the password to a user generated value.
	SetMasterAuthRequest_SET_PASSWORD SetMasterAuthRequest_Action = 1
	// Generate a new password and set it to that.
	SetMasterAuthRequest_GENERATE_PASSWORD SetMasterAuthRequest_Action = 2
	// Set the username.  If an empty username is provided, basic authentication
	// is disabled for the cluster.  If a non-empty username is provided, basic
	// authentication is enabled, with either a provided password or a generated
	// one.
	SetMasterAuthRequest_SET_USERNAME SetMasterAuthRequest_Action = 3
)

var SetMasterAuthRequest_Action_name = map[int32]string{
	0: "UNKNOWN",
	1: "SET_PASSWORD",
	2: "GENERATE_PASSWORD",
	3: "SET_USERNAME",
}
var SetMasterAuthRequest_Action_value = map[string]int32{
	"UNKNOWN":           0,
	"SET_PASSWORD":      1,
	"GENERATE_PASSWORD": 2,
	"SET_USERNAME":      3,
}

func (x SetMasterAuthRequest_Action) String() string {
	return proto.EnumName(SetMasterAuthRequest_Action_name, int32(x))
}
func (SetMasterAuthRequest_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorClusterService, []int{19, 0}
}

// The current status of the node pool instance.
type NodePool_Status int32

const (
	// Not set.
	NodePool_STATUS_UNSPECIFIED NodePool_Status = 0
	// The PROVISIONING state indicates the node pool is being created.
	NodePool_PROVISIONING NodePool_Status = 1
	// The RUNNING state indicates the node pool has been created
	// and is fully usable.
	NodePool_RUNNING NodePool_Status = 2
	// The RUNNING_WITH_ERROR state indicates the node pool has been created
	// and is partially usable. Some error state has occurred and some
	// functionality may be impaired. Customer may need to reissue a request
	// or trigger a new update.
	NodePool_RUNNING_WITH_ERROR NodePool_Status = 3
	// The RECONCILING state indicates that some work is actively being done on
	// the node pool, such as upgrading node software. Details can
	// be found in the `statusMessage` field.
	NodePool_RECONCILING NodePool_Status = 4
	// The STOPPING state indicates the node pool is being deleted.
	NodePool_STOPPING NodePool_Status = 5
	// The ERROR state indicates the node pool may be unusable. Details
	// can be found in the `statusMessage` field.
	NodePool_ERROR NodePool_Status = 6
)

var NodePool_Status_name = map[int32]string{
	0: "STATUS_UNSPECIFIED",
	1: "PROVISIONING",
	2: "RUNNING",
	3: "RUNNING_WITH_ERROR",
	4: "RECONCILING",
	5: "STOPPING",
	6: "ERROR",
}
var NodePool_Status_value = map[string]int32{
	"STATUS_UNSPECIFIED": 0,
	"PROVISIONING":       1,
	"RUNNING":            2,
	"RUNNING_WITH_ERROR": 3,
	"RECONCILING":        4,
	"STOPPING":           5,
	"ERROR":              6,
}

func (x NodePool_Status) String() string {
	return proto.EnumName(NodePool_Status_name, int32(x))
}
func (NodePool_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorClusterService, []int{33, 0}
}

// Parameters that describe the nodes in a cluster.
type NodeConfig struct {
	// The name of a Google Compute Engine [machine
	// type](/compute/docs/machine-types) (e.g.
	// `n1-standard-1`).
	//
	// If unspecified, the default machine type is
	// `n1-standard-1`.
	MachineType string `protobuf:"bytes,1,opt,name=machine_type,json=machineType,proto3" json:"machine_type,omitempty"`
	// Size of the disk attached to each node, specified in GB.
	// The smallest allowed disk size is 10GB.
	//
	// If unspecified, the default disk size is 100GB.
	DiskSizeGb int32 `protobuf:"varint,2,opt,name=disk_size_gb,json=diskSizeGb,proto3" json:"disk_size_gb,omitempty"`
	// The set of Google API scopes to be made available on all of the
	// node VMs under the "default" service account.
	//
	// The following scopes are recommended, but not required, and by default are
	// not included:
	//
	// * `https://www.googleapis.com/auth/compute` is required for mounting
	// persistent storage on your nodes.
	// * `https://www.googleapis.com/auth/devstorage.read_only` is required for
	// communicating with **gcr.io**
	// (the [Google Container Registry](/container-registry/)).
	//
	// If unspecified, no scopes are added, unless Cloud Logging or Cloud
	// Monitoring are enabled, in which case their required scopes will be added.
	OauthScopes []string `protobuf:"bytes,3,rep,name=oauth_scopes,json=oauthScopes" json:"oauth_scopes,omitempty"`
	// The Google Cloud Platform Service Account to be used by the node VMs. If
	// no Service Account is specified, the "default" service account is used.
	ServiceAccount string `protobuf:"bytes,9,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
	// The metadata key/value pairs assigned to instances in the cluster.
	//
	// Keys must conform to the regexp [a-zA-Z0-9-_]+ and be less than 128 bytes
	// in length. These are reflected as part of a URL in the metadata server.
	// Additionally, to avoid ambiguity, keys must not conflict with any other
	// metadata keys for the project or be one of the four reserved keys:
	// "instance-template", "kube-env", "startup-script", and "user-data"
	//
	// Values are free-form strings, and only have meaning as interpreted by
	// the image running in the instance. The only restriction placed on them is
	// that each value's size must be less than or equal to 32 KB.
	//
	// The total size of all keys and values must be less than 512 KB.
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The image type to use for this node. Note that for a given image type,
	// the latest version of it will be used.
	ImageType string `protobuf:"bytes,5,opt,name=image_type,json=imageType,proto3" json:"image_type,omitempty"`
	// The map of Kubernetes labels (key/value pairs) to be applied to each node.
	// These will added in addition to any default label(s) that
	// Kubernetes may apply to the node.
	// In case of conflict in label keys, the applied set may differ depending on
	// the Kubernetes version -- it's best to assume the behavior is undefined
	// and conflicts should be avoided.
	// For more information, including usage and the valid values, see:
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
	Labels map[string]string `protobuf:"bytes,6,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The number of local SSD disks to be attached to the node.
	//
	// The limit for this value is dependant upon the maximum number of
	// disks available on a machine per zone. See:
	// https://cloud.google.com/compute/docs/disks/local-ssd#local_ssd_limits
	// for more information.
	LocalSsdCount int32 `protobuf:"varint,7,opt,name=local_ssd_count,json=localSsdCount,proto3" json:"local_ssd_count,omitempty"`
	// The list of instance tags applied to all nodes. Tags are used to identify
	// valid sources or targets for network firewalls and are specified by
	// the client during cluster or node pool creation. Each tag within the list
	// must comply with RFC1035.
	Tags []string `protobuf:"bytes,8,rep,name=tags" json:"tags,omitempty"`
	// Whether the nodes are created as preemptible VM instances. See:
	// https://cloud.google.com/compute/docs/instances/preemptible for more
	// inforamtion about preemptible VM instances.
	Preemptible bool `protobuf:"varint,10,opt,name=preemptible,proto3" json:"preemptible,omitempty"`
	// A list of hardware accelerators to be attached to each node.
	// See https://cloud.google.com/compute/docs/gpus for more information about
	// support for GPUs.
	Accelerators []*AcceleratorConfig `protobuf:"bytes,11,rep,name=accelerators" json:"accelerators,omitempty"`
	// Minimum CPU platform to be used by this instance. The instance may be
	// scheduled on the specified or newer CPU platform. Applicable values are the
	// friendly names of CPU platforms, such as
	// <code>minCpuPlatform: &quot;Intel Haswell&quot;</code> or
	// <code>minCpuPlatform: &quot;Intel Sandy Bridge&quot;</code>. For more
	// information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform)
	MinCpuPlatform string `protobuf:"bytes,13,opt,name=min_cpu_platform,json=minCpuPlatform,proto3" json:"min_cpu_platform,omitempty"`
	// List of kubernetes taints to be applied to each node.
	//
	// For more information, including usage and the valid values, see:
	// https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
	Taints []*NodeTaint `protobuf:"bytes,15,rep,name=taints" json:"taints,omitempty"`
}

func (m *NodeConfig) Reset()                    { *m = NodeConfig{} }
func (m *NodeConfig) String() string            { return proto.CompactTextString(m) }
func (*NodeConfig) ProtoMessage()               {}
func (*NodeConfig) Descriptor() ([]byte, []int) { return fileDescriptorClusterService, []int{0} }

func (m *NodeConfig) GetMachineType() string {
	if m != nil {
		return m.MachineType
	}
	return ""
}

func (m *NodeConfig) GetDiskSizeGb() int32 {
	if m != nil {
		return m.DiskSizeGb
	}
	return 0
}

func (m *NodeConfig) GetOauthScopes() []string {
	if m != nil {
		return m.OauthScopes
	}
	return nil
}

func (m *NodeConfig) GetServiceAccount() string {
	if m != nil {
		return m.ServiceAccount
	}
	return ""
}

func (m *NodeConfig) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *NodeConfig) GetImageType() string {
	if m != nil {
		return m.ImageType
	}
	return ""
}

func (m *NodeConfig) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *NodeConfig) GetLocalSsdCount() int32 {
	if m != nil {
		return m.LocalSsdCount
	}
	return 0
}

func (m *NodeConfig) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *NodeConfig) GetPreemptible() bool {
	if m != nil {
		return m.Preemptible
	}
	return false
}

func (m *NodeConfig) GetAccelerators() []*AcceleratorConfig {
	if m != nil {
		return m.Accelerators
	}
	return nil
}

func (m *NodeConfig) GetMinCpuPlatform() string {
	if m != nil {
		return m.MinCpuPlatform
	}
	return ""
}

func (m *NodeConfig) GetTaints() []*NodeTaint {
	if m != nil {
		return m.Taints
	}
	return nil
}

// Kubernetes taint is comprised of three fields: key, value, and effect. Effect
// can only be one of three types:  NoSchedule, PreferNoSchedule or NoExecute.
//
// For more information, including usage and the valid values, see:
// https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
type NodeTaint struct {
	// Key for taint.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Value for taint.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// Effect for taint.
	Effect NodeTaint_Effect `protobuf:"varint,3,opt,name=effect,proto3,enum=google.container.v1beta1.NodeTaint_Effect" json:"effect,omitempty"`
}

func (m *NodeTaint) Reset()                    { *m = NodeTaint{} }
func (m *NodeTaint) String() string            { return proto.CompactTextString(m) }
func (*NodeTaint) ProtoMessage()               {}
func (*NodeTaint) Descriptor() ([]byte, []int) { return fileDescriptorClusterService, []int{1} }

func (m *NodeTaint) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *NodeTaint) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *NodeTaint) GetEffect() NodeTaint_Effect {
	if m != nil {
		return m.Effect
	}
	return NodeTaint_EFFECT_UNSPECIFIED
}

// The authentication information for accessing the master endpoint.
// Authentication can be done using HTTP basic auth or using client
// certificates.
type MasterAuth struct {
	// The username to use for HTTP basic authentication to the master endpoint.
	// For clusters v1.6.0 and later, you can disable basic authentication by
	// providing an empty username.
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// The password to use for HTTP basic authentication to the master endpoint.
	// Because the master endpoint is open to the Internet, you should create a
	// strong password.  If a password is provided for cluster creation, username
	// must be non-empty.
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// Configuration for client certificate authentication on the cluster.  If no
	// configuration is specified, a client certificate is issued.
	ClientCertificateConfig *ClientCertificateConfig `protobuf:"bytes,3,opt,name=client_certificate_config,json=clientCertificateConfig" json:"client_certificate_config,omitempty"`
	// [Output only] Base64-encoded public certificate that is the root of
	// trust for the cluster.
	ClusterCaCertificate string `protobuf:"bytes,100,opt,name=cluster_ca_certificate,json=clusterCaCertificate,proto3" json:"cluster_ca_certificate,omitempty"`
	// [Output only] Base64-encoded public certificate used by clients to
	// authenticate to the cluster endpoint.
	ClientCertificate string `protobuf:"bytes,101,opt,name=client_certificate,json=clientCertificate,proto3" json:"client_certificate,omitempty"`
	// [Output only] Base64-encoded private key used by clients to authenticate
	// to the cluster endpoint.
	ClientKey string `protobuf:"bytes,102,opt,name=client_key,json=clientKey,proto3" json:"client_key,omitempty"`
}

func (m *MasterAuth) Reset()                    { *m = MasterAuth{} }
func (m *MasterAuth) String() string            { return proto.CompactTextString(m) }
func (*MasterAuth) ProtoMessage()               {}
func (*MasterAuth) Descriptor() ([]byte, []int) { return fileDescriptorClusterService, []int{2} }

func (m *MasterAuth) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *MasterAuth) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *MasterAuth) GetClientCertificateConfig() *ClientCertificateConfig {
	if m != nil {
		return m.ClientCertificateConfig
	}
	return nil
}

func (m *MasterAuth) GetClusterCaCertificate() string {
	if m != nil {
		return m.ClusterCaCertificate
	}
	return ""
}

func (m *MasterAuth) GetClientCertificate() string {
	if m != nil {
		return m.ClientCertificate
	}
	return ""
}

func (m *MasterAuth) GetClientKey() string {
	if m != nil {
		return m.ClientKey
	}
	return ""
}

// Configuration for client certificates on the cluster.
type ClientCertificateConfig struct {
	// Issue a client certificate.
	IssueClientCertificate bool `protobuf:"varint,1,opt,name=issue_client_certificate,json=issueClientCertificate,proto3" json:"issue_client_certificate,omitempty"`
}

func (m *ClientCertificateConfig) Reset()         { *m = ClientCertificateConfig{} }
func (m *ClientCertificateConfig) String() string { return proto.CompactTextString(m) }
func (*ClientCertificateConfig) ProtoMessage()    {}
func (*ClientCertificateConfig) Descriptor() ([]byte, []int) {
	return fileDescriptorClusterService, []int{3}
}

func (m *ClientCertificateConfig) GetIssueClientCertificate() bool {
	if m != nil {
		return m.IssueClientCertificate
	}
	return false
}

// Configuration for the addons that can be automatically spun up in the
// cluster, enabling additional functionality.
type AddonsConfig struct {
	// Configuration for the HTTP (L7) load balancing controller addon, which
	// makes it easy to set up HTTP load balancers for services in a cluster.
	HttpLoadBalancing *HttpLoadBalancing `protobuf:"bytes,1,opt,name=http_load_balancing,json=httpLoadBalancing" json:"http_load_balancing,omitempty"`
	// Configuration for the horizontal pod autoscaling feature, which
	// increases or decreases the number of replica pods a replication controller
	// has based on the resource usage of the existing pods.
	HorizontalPodAutoscaling *HorizontalPodAutoscaling `protobuf:"bytes,2,opt,name=horizontal_pod_autoscaling,json=horizontalPodAutoscaling" json:"horizontal_pod_autoscaling,omitempty"`
	// Configuration for the Kubernetes Dashboard.
	KubernetesDashboard *KubernetesDashboard `protobuf:"bytes,3,opt,name=kubernetes_dashboard,json=kubernetesDashboard" json:"kubernetes_dashboard,omitempty"`
	// Configuration for NetworkPolicy. This only tracks whether the addon
	// is enabled or not on the Master, it does not track whether network policy
	// is enabled for the nodes.
	NetworkPolicyConfig *NetworkPolicyConfig `protobuf:"bytes,4,opt,name=network_policy_config,json=networkPolicyConfig" json:"network_policy_config,omitempty"`
}

func (m *AddonsConfig) Reset()                    { *m = AddonsConfig{} }
func (m *AddonsConfig) String() string            { return proto.CompactTextString(m) }
func (*AddonsConfig) ProtoMessage()               {}
func (*AddonsConfig) Descriptor() ([]byte, []int) { return fileDescriptorClusterService, []int{4} }

func (m *AddonsConfig) GetHttpLoadBalancing() *HttpLoadBalancing {
	if m != nil {
		return m.HttpLoadBalancing
	}
	return nil
}

func (m *AddonsConfig) GetHorizontalPodAutoscaling() *HorizontalPodAutoscaling {
	if m != nil {
		return m.HorizontalPodAutoscaling
	}
	return nil
}

func (m *AddonsConfig) GetKubernetesDashboard() *KubernetesDashboard {
	if m != nil {
		return m.KubernetesDashboard
	}
	return nil
}

func (m *AddonsConfig) GetNetworkPolicyConfig() *NetworkPolicyConfig {
	if m != nil {
		return m.NetworkPolicyConfig
	}
	return nil
}

// Configuration options for the HTTP (L7) load balancing controller addon,
// which makes it easy to set up HTTP load balancers for services in a cluster.
type HttpLoadBalancing struct {
	// Whether the HTTP Load Balancing controller is enabled in the cluster.
	// When enabled, it runs a small pod in the cluster that manages the load
	// balancers.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
}

func (m *HttpLoadBalancing) Reset()                    { *m = HttpLoadBalancing{} }
func (m *HttpLoadBalancing) String() string            { return proto.CompactTextString(m) }
func (*HttpLoadBalancing) ProtoMessage()               {}
func (*HttpLoadBalancing) Descriptor() ([]byte, []int) { return fileDescriptorClusterService, []int{5} }

func (m *HttpLoadBalancing) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

// Configuration options for the horizontal pod autoscaling feature, which
// increases or decreases the number of replica pods a replication controller
// has based on the resource usage of the existing pods.
type HorizontalPodAutoscaling struct {
	// Whether the Horizontal Pod Autoscaling feature is enabled in the cluster.
	// When enabled, it ensures that a Heapster pod is running in the cluster,
	// which is also used by the Cloud Monitoring service.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
}

func (m *HorizontalPodAutoscaling) Reset()         { *m = HorizontalPodAutoscaling{} }
func (m *HorizontalPodAutoscaling) String() string { return proto.CompactTextString(m) }
func (*HorizontalPodAutoscaling) ProtoMessage()    {}
func (*HorizontalPodAutoscaling) Descriptor() ([]byte, []int) {
	return fileDescriptorClusterService, []int{6}
}

func (m *HorizontalPodAutoscaling) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

// Configuration for the Kubernetes Dashboard.
type KubernetesDashboard struct {
	// Whether the Kubernetes Dashboard is enabled for this cluster.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
}

func (m *KubernetesDashboard) Reset()         { *m = KubernetesDashboard{} }
func (m *KubernetesDashboard) String() string { return proto.CompactTextString(m) }
func (*KubernetesDashboard) ProtoMessage()    {}
func (*KubernetesDashboard) Descriptor() ([]byte, []int) {
	return fileDescriptorClusterService, []int{7}
}

func (m *KubernetesDashboard) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

// Configuration for NetworkPolicy. This only tracks whether the addon
// is enabled or not on the Master, it does not track whether network policy
// is enabled for the nodes.
type NetworkPolicyConfig struct {
	// Whether NetworkPolicy is enabled for this cluster.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
}

func (m *NetworkPolicyConfig) Reset()         { *m = NetworkPolicyConfig{} }
func (m *NetworkPolicyConfig) String() string { return proto.CompactTextString(m) }
func (*NetworkPolicyConfig) ProtoMessage()    {}
func (*NetworkPolicyConfig) Descriptor() ([]byte, []int) {
	return fileDescriptorClusterService, []int{8}
}

func (m *NetworkPolicyConfig) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

// Configuration options for the master authorized networks feature. Enabled
// master authorized networks will disallow all external traffic to access
// Kubernetes master through HTTPS except traffic from the given CIDR blocks,
// Google Compute Engine Public IPs and Google Prod IPs.
type MasterAuthorizedNetworksConfig struct {
	// Whether or not master authorized networks is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// cidr_blocks define up to 10 external networks that could access
	// Kubernetes master through HTTPS.
	CidrBlocks []*MasterAuthorizedNetworksConfig_CidrBlock `protobuf:"bytes,2,rep,name=cidr_blocks,json=cidrBlocks" json:"cidr_blocks,omitempty"`
}

func (m *MasterAuthorizedNetworksConfig) Reset()         { *m = MasterAuthorizedNetworksConfig{} }
func (m *MasterAuthorizedNetworksConfig) String() string { return proto.CompactTextString(m) }
func (*MasterAuthorizedNetworksConfig) ProtoMessage()    {}
func (*MasterAuthorizedNetworksConfig) Descriptor() ([]byte, []int) {
	return fileDescriptorClusterService, []int{9}
}

func (m *MasterAuthorizedNetworksConfig) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *MasterAuthorizedNetworksConfig) GetCidrBlocks() []*MasterAuthorizedNetworksConfig_CidrBlock {
	if m != nil {
		return m.CidrBlocks
	}
	return nil
}

// CidrBlock contains an optional name and one CIDR block.
type MasterAuthorizedNetworksConfig_CidrBlock struct {
	// display_name is an optional field for users to identify CIDR blocks.
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// cidr_block must be specified in CIDR notation.
	CidrBlock string `protobuf:"bytes,2,opt,name=cidr_block,json=cidrBlock,proto3" json:"cidr_block,omitempty"`
}

func (m *MasterAuthorizedNetworksConfig_CidrBlock) Reset() {
	*m = MasterAuthorizedNetworksConfig_CidrBlock{}
}
func (m *MasterAuthorizedNetworksConfig_CidrBlock) String() string { return proto.CompactTextString(m) }
func (*MasterAuthorizedNetworksConfig_CidrBlock) ProtoMessage()    {}
func (*MasterAuthorizedNetworksConfig_CidrBlock) Descriptor() ([]byte, []int) {
	return fileDescriptorClusterService, []int{9, 0}
}

func (m *MasterAuthorizedNetworksConfig_CidrBlock) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *MasterAuthorizedNetworksConfig_CidrBlock) GetCidrBlock() string {
	if m != nil {
		return m.CidrBlock
	}
	return ""
}

// Configuration options for the NetworkPolicy feature.
// https://kubernetes.io/docs/concepts/services-networking/networkpolicies/
type NetworkPolicy struct {
	// The selected network policy provider.
	Provider NetworkPolicy_Provider `protobuf:"varint,1,opt,name=provider,proto3,enum=google.container.v1beta1.NetworkPolicy_Provider" json:"provider,omitempty"`
	// Whether network policy is enabled on the cluster.
	Enabled bool `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (m *NetworkPolicy) Reset()                    { *m = NetworkPolicy{} }
func (m *NetworkPolicy) String() string            { return proto.CompactTextString(m) }
func (*NetworkPolicy) ProtoMessage()               {}
func (*NetworkPolicy) Descriptor() ([]byte, []int) { return fileDescriptorClusterService, []int{10} }

func (m *NetworkPolicy) GetProvider() NetworkPolicy_Provider {
	if m != nil {
		return m.Provider
	}
	return NetworkPolicy_PROVIDER_UNSPECIFIED
}

func (m *NetworkPolicy) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

// Configuration for controlling how IPs are allocated in the cluster.
type IPAllocationPolicy struct {
	// Whether alias IPs will be used for pod IPs in the cluster.
	UseIpAliases bool `protobuf:"varint,1,opt,name=use_ip_aliases,json=useIpAliases,proto3" json:"use_ip_aliases,omitempty"`
	// Whether a new subnetwork will be created automatically for the cluster.
	//
	// This field is only applicable when `use_ip_aliases` is true.
	CreateSubnetwork bool `protobuf:"varint,2,opt,name=create_subnetwork,json=createSubnetwork,proto3" json:"create_subnetwork,omitempty"`
	// A custom subnetwork name to be used if `create_subnetwork` is true.  If
	// this field is empty, then an automatic name will be chosen for the new
	// subnetwork.
	SubnetworkName string `protobuf:"bytes,3,opt,name=subnetwork_name,json=subnetworkName,proto3" json:"subnetwork_name,omitempty"`
	// This field is deprecated, use cluster_ipv4_cidr_block.
	ClusterIpv4Cidr string `protobuf:"bytes,4,opt,name=cluster_ipv4_cidr,json=clusterIpv4Cidr,proto3" json:"cluster_ipv4_cidr,omitempty"`
	// This field is deprecated, use node_ipv4_cidr_block.
	NodeIpv4Cidr string `protobuf:"bytes,5,opt,name=node_ipv4_cidr,json=nodeIpv4Cidr,proto3" json:"node_ipv4_cidr,omitempty"`
	// This field is deprecated, use services_ipv4_cidr_block.
	ServicesIpv4Cidr string `protobuf:"bytes,6,opt,name=services_ipv4_cidr,json=servicesIpv4Cidr,proto3" json:"services_ipv4_cidr,omitempty"`
	// The name of the secondary range to be used for the cluster CIDR
	// block.  The secondary range will be used for pod IP
	// addresses. This must be an existing secondary range associated
	// with the cluster subnetwork.
	//
	// This field is only applicable with use_ip_aliases and
	// create_subnetwork is false.
	ClusterSecondaryRangeName string `protobuf:"bytes,7,opt,name=cluster_secondary_range_name,json=clusterSecondaryRangeName,proto3" json:"cluster_secondary_range_name,omitempty"`
	// The name of the secondary range to be used as for the services
	// CIDR block.  The secondary range will be used for service
	// ClusterIPs. This must be an existing secondary range associated
	// with the cluster subnetwork.
	//
	// This field is only applicable with use_ip_aliases and
	// create_subnetwork is false.
	ServicesSecondaryRangeName string `protobuf:"bytes,8,opt,name=services_secondary_range_name,json=servicesSecondaryRangeName,proto3" json:"services_secondary_range_name,omitempty"`
	// The IP address range for the cluster pod IPs. If this field is set, then
	// `cluster.cluster_ipv4_cidr` must be left blank.
	//
	// This field is only applicable when `use_ip_aliases` is true.
	//
	// Set to blank to have a range chosen with the default size.
	//
	// Set to /netmask (e.g. `/14`) to have a range chosen with a specific
	// netmask.
	//
	// Set to a
	// [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing)
	// notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g.
	// `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range
	// to use.
	ClusterIpv4CidrBlock string `protobuf:"bytes,9,opt,name=cluster_ipv4_cidr_block,json=clusterIpv4CidrBlock,proto3" json:"cluster_ipv4_cidr_block,omitempty"`
	// The IP address range of the instance IPs in this cluster.
	//
	// This is applicable only if `create_subnetwork` is true.
	//
	// Set to blank to have a range chosen with the default size.
	//
	// Set to /netmask (e.g. `/14`) to have a range chosen with a specific
	// netmask.
	//
	// Set to a
	// [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing)
	// notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g.
	// `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range
	// to use.
	NodeIpv4CidrBlock string `protobuf:"bytes,10,opt,name=node_ipv4_cidr_block,json=nodeIpv4CidrBlock,proto3" json:"node_ipv4_cidr_block,omitempty"`
	// The IP address range of the services IPs in this cluster. If blank, a range
	// will be automatically chosen with the default size.
	//
	// This field is only applicable when `use_ip_aliases` is true.
	//
	// Set to blank to have a range chosen with the default size.
	//
	// Set to /netmask (e.g. `/14`) to have a range chosen with a specific
	// netmask.
	//
	// Set to a
	// [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing)
	// notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g.
	// `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range
	// to use.
	ServicesIpv4CidrBlock string `protobuf:"bytes,11,opt,name=services_ipv4_cidr_block,json=servicesIpv4CidrBlock,proto3" json:"services_ipv4_cidr_block,omitempty"`
}

func (m *IPAllocationPolicy) Reset()         { *m = IPAllocationPolicy{} }
func (m *IPAllocationPolicy) String() string { return proto.CompactTextString(m) }
func (*IPAllocationPolicy) ProtoMessage()    {}
func (*IPAllocationPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptorClusterService, []int{11}
}

func (m *IPAllocationPolicy) GetUseIpAliases() bool {
	if m != nil {
		return m.UseIpAliases
	}
	return false
}

func (m *IPAllocationPolicy) GetCreateSubnetwork() bool {
	if m != nil {
		return m.CreateSubnetwork
	}
	return false
}

func (m *IPAllocationPolicy) GetSubnetworkName() string {
	if m != nil {
		return m.SubnetworkName
	}
	return ""
}

func (m *IPAllocationPolicy) GetClusterIpv4Cidr() string {
	if m != nil {
		return m.ClusterIpv4Cidr
	}
	return ""
}

func (m *IPAllocationPolicy) GetNodeIpv4Cidr() string {
	if m != nil {
		return m.NodeIpv4Cidr
	}
	return ""
}

func (m *IPAllocationPolicy) GetServicesIpv4Cidr() string {
	if m != nil {
		return m.ServicesIpv4Cidr
	}
	return ""
}

func (m *IPAllocationPolicy) GetClusterSecondaryRangeName() string {
	if m != nil {
		return m.ClusterSecondaryRangeName
	}
	return ""
}

func (m *IPAllocationPolicy) GetServicesSecondaryRangeName() string {
	if m != nil {
		return m.ServicesSecondaryRangeName
	}
	return ""
}

func (m *IPAllocationPolicy) GetClusterIpv4CidrBlock() string {
	if m != nil {
		return m.ClusterIpv4CidrBlock
	}
	return ""
}

func (m *IPAllocationPolicy) GetNodeIpv4CidrBlock() string {
	if m != nil {
		return m.NodeIpv4CidrBlock
	}
	return ""
}

func (m *IPAllocationPolicy) GetServicesIpv4CidrBlock() string {
	if m != nil {
		return m.ServicesIpv4CidrBlock
	}
	return ""
}

// Configuration for the PodSecurityPolicy feature.
type PodSecurityPolicyConfig struct {
	// Enable the PodSecurityPolicy controller for this cluster. If enabled, pods
	// must be valid under a PodSecurityPolicy to be created.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (m *PodSecurityPolicyConfig) Reset()         { *m = PodSecurityPolicyConfig{} }
func (m *PodSecurityPolicyConfig) String() string { return proto.CompactTextString(m) }
func (*PodSecurityPolicyConfig) ProtoMessage()    {}
func (*PodSecurityPolicyConfig) Descriptor() ([]byte, []int) {
	return fileDescriptorClusterService, []int{12}
}

func (m *PodSecurityPolicyConfig) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

// A Google Container Engine cluster.
type Cluster struct {
	// The name of this cluster. The name must be unique within this project
	// and zone, and can be up to 40 characters with the following restrictions:
	//
	// * Lowercase letters, numbers, and hyphens only.
	// * Must start with a letter.
	// * Must end with a number or a letter.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// An optional description of this cluster.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// The number of nodes to create in this cluster. You must ensure that your
	// Compute Engine <a href="/compute/docs/resource-quotas">resource quota</a>
	// is sufficient for this number of instances. You must also have available
	// firewall and routes quota.
	// For requests, this field should only be used in lieu of a
	// "node_pool" object, since this configuration (along with the
	// "node_config") will be used to create a "NodePool" object with an
	// auto-generated name. Do not use this and a node_pool at the same time.
	InitialNodeCount int32 `protobuf:"varint,3,opt,name=initial_node_count,json=initialNodeCount,proto3" json:"initial_node_count,omitempty"`
	// Parameters used in creating the cluster's nodes.
	// See `nodeConfig` for the description of its properties.
	// For requests, this field should only be used in lieu of a
	// "node_pool" object, since this configuration (along with the
	// "initial_node_count") will be used to create a "NodePool" object with an
	// auto-generated name. Do not use this and a node_pool at the same time.
	// For responses, this field will be populated with the node configuration of
	// the first node pool.
	//
	// If unspecified, the defaults are used.
	NodeConfig *NodeConfig `protobuf:"bytes,4,opt,name=node_config,json=nodeConfig" json:"node_config,omitempty"`
	// The authentication information for accessing the master endpoint.
	MasterAuth *MasterAuth `protobuf:"bytes,5,opt,name=master_auth,json=masterAuth" json:"master_auth,omitempty"`
	// The logging service the cluster should use to write logs.
	// Currently available options:
	//
	// * `logging.googleapis.com` - the Google Cloud Logging service.
	// * `none` - no logs will be exported from the cluster.
	// * if left as an empty string,`logging.googleapis.com` will be used.
	LoggingService string `protobuf:"bytes,6,opt,name=logging_service,json=loggingService,proto3" json:"logging_service,omitempty"`
	// The monitoring service the cluster should use to write metrics.
	// Currently available options:
	//
	// * `monitoring.googleapis.com` - the Google Cloud Monitoring service.
	// * `none` - no metrics will be exported from the cluster.
	// * if left as an empty string, `monitoring.googleapis.com` will be used.
	MonitoringService string `protobuf:"bytes,7,opt,name=monitoring_service,json=monitoringService,proto3" json:"monitoring_service,omitempty"`
	// The name of the Google Compute Engine
	// [network](/compute/docs/networks-and-firewalls#networks) to which the
	// cluster is connected. If left unspecified, the `default` network
	// will be used.
	Network string `protobuf:"bytes,8,opt,name=network,proto3" json:"network,omitempty"`
	// The IP address range of the container pods in this cluster, in
	// [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing)
	// notation (e.g. `10.96.0.0/14`). Leave blank to have
	// one automatically chosen or specify a `/14` block in `10.0.0.0/8`.
	ClusterIpv4Cidr string `protobuf:"bytes,9,opt,name=cluster_ipv4_cidr,json=clusterIpv4Cidr,proto3" json:"cluster_ipv4_cidr,omitempty"`
	// Configurations for the various addons available to run in the cluster.
	AddonsConfig *AddonsConfig `protobuf:"bytes,10,opt,name=addons_config,json=addonsConfig" json:"addons_config,omitempty"`
	// The name of the Google Compute Engine
	// [subnetwork](/compute/docs/subnetworks) to which the
	// cluster is connected.
	Subnetwork string `protobuf:"bytes,11,opt,name=subnetwork,proto3" json:"subnetwork,omitempty"`
	// The node pools associated with this cluster.
	// This field should not be set if "node_config" or "initial_node_count" are
	// specified.
	NodePools []*NodePool `protobuf:"bytes,12,rep,name=node_pools,json=nodePools" json:"node_pools,omitempty"`
	// The list of Google Compute Engine
	// [locations](/compute/docs/zones#available) in which the cluster's nodes
	// should be located.
	Locations []string `protobuf:"bytes,13,rep,name=locations" json:"locations,omitempty"`
	// Kubernetes alpha features are enabled on this cluster. This includes alpha
	// API groups (e.g. v1beta1) and features that may not be production ready in
	// the kubernetes version of the master and nodes.
	// The cluster has no SLA for uptime and master/node upgrades are disabled.
	// Alpha enabled clusters are automatically deleted thirty days after
	// creation.
	EnableKubernetesAlpha bool `protobuf:"varint,14,opt,name=enable_kubernetes_alpha,json=enableKubernetesAlpha,proto3" json:"enable_kubernetes_alpha,omitempty"`
	// Configuration options for the NetworkPolicy feature.
	NetworkPolicy *NetworkPolicy `protobuf:"bytes,19,opt,name=network_policy,json=networkPolicy" json:"network_policy,omitempty"`
	// Configuration for cluster IP allocation.
	IpAllocationPolicy *IPAllocationPolicy `protobuf:"bytes,20,opt,name=ip_allocation_policy,json=ipAllocationPolicy" json:"ip_allocation_policy,omitempty"`
	// The configuration options for master authorized networks feature.
	MasterAuthorizedNetworksConfig *MasterAuthorizedNetworksConfig `protobuf:"bytes,22,opt,name=master_authorized_networks_config,json=masterAuthorizedNetworksConfig" json:"master_authorized_networks_config,omitempty"`
	// Configure the maintenance policy for this cluster.
	MaintenancePolicy *MaintenancePolicy `protobuf:"bytes,23,opt,name=maintenance_policy,json=maintenancePolicy" json:"maintenance_policy,omitempty"`
	// Configuration for the PodSecurityPolicy feature.
	PodSecurityPolicyConfig *PodSecurityPolicyConfig `protobuf:"bytes,25,opt,name=pod_security_policy_config,json=podSecurityPolicyConfig" json:"pod_security_policy_config,omitempty"`
	// [Output only] Server-defined URL for the resource.
	SelfLink string `protobuf:"bytes,100,opt,name=self_link,json=selfLink,proto3" json:"self_link,omitempty"`
	// [Output only] The name of the Google Compute Engine
	// [zone](/compute/docs/zones#available) in which the cluster
	// resides.
	// This field is deprecated, use location instead.
	Zone string `protobuf:"bytes,101,opt,name=zone,proto3" json:"zone,omitempty"`
	// [Output only] The IP address of this cluster's master endpoint.
	// The endpoint can be accessed from the internet at
	// `https://username:password@endpoint/`.
	//
	// See the `masterAuth` property of this resource for username and
	// password information.
	Endpoint string `protobuf:"bytes,102,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// The initial Kubernetes version for this cluster.  Valid versions are those
	// found in validMasterVersions returned by getServerConfig.  The version can
	// be upgraded over time; such upgrades are reflected in
	// currentMasterVersion and currentNodeVersion.
	InitialClusterVersion string `protobuf:"bytes,103,opt,name=initial_cluster_version,json=initialClusterVersion,proto3" json:"initial_cluster_version,omitempty"`
	// [Output only] The current software version of the master endpoint.
	CurrentMasterVersion string `protobuf:"bytes,104,opt,name=current_master_version,json=currentMasterVersion,proto3" json:"current_master_version,omitempty"`
	// [Output only] The current version of the node software components.
	// If they are currently at multiple versions because they're in the process
	// of being upgraded, this reflects the minimum version of all nodes.
	CurrentNodeVersion string `protobuf:"bytes,105,opt,name=current_node_version,json=currentNodeVersion,proto3" json:"current_node_version,omitempty"`
	// [Output only] The time the cluster was created, in
	// [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
	CreateTime string `protobuf:"bytes,106,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// [Output only] The current status of this cluster.
	Status Cluster_Status `protobuf:"varint,107,opt,name=status,proto3,enum=google.container.v1beta1.Cluster_Status" json:"status,omitempty"`
	// [Output only] Additional information about the current status of this
	// cluster, if available.
	StatusMessage string `protobuf:"bytes,108,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	// [Output only] The size of the address space on each node for hosting
	// containers. This is provisioned from within the `container_ipv4_cidr`
	// range.
	NodeIpv4CidrSize int32 `protobuf:"varint,109,opt,name=node_ipv4_cidr_size,json=nodeIpv4CidrSize,proto3" json:"node_ipv4_cidr_size,omitempty"`
	// [Output only] The IP address range of the Kubernetes services in
	// this cluster, in
	// [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing)
	// notation (e.g. `1.2.3.4/29`). Service addresses are
	// typically put in the last `/16` from the container CIDR.
	ServicesIpv4Cidr string `protobuf:"bytes,110,opt,name=services_ipv4_cidr,json=servicesIpv4Cidr,proto3" json:"services_ipv4_cidr,omitempty"`
	// [Output only] The resource URLs of [instance
	// groups](/compute/docs/instance-groups/) associated with this
	// cluster.
	InstanceGroupUrls []string `protobuf:"bytes,111,rep,name=instance_group_urls,json=instanceGroupUrls" json:"instance_group_urls,omitempty"`
	// [Output only] The number of nodes currently in the cluster.
	CurrentNodeCount int32 `protobuf:"varint,112,opt,name=current_node_count,json=currentNodeCount,proto3" json:"current_node_count,omitempty"`
	// [Output only] The time the cluster will be automatically
	// deleted in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
	ExpireTime string `protobuf:"bytes,113,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	// [Output only] The name of the Google Compute Engine
	// [zone](/compute/docs/regions-zones/regions-zones#available) or
	// [region](/compute/docs/regions-zones/regions-zones#available) in which
	// the cluster resides.
	Location string `protobuf:"bytes,114,opt,name=location,proto3" json:"location,omitempty"`
}

func (m *Cluster) Reset()                    { *m = Cluster{} }
func (m *Cluster) String() string            { return proto.CompactTextString(m) }
func (*Cluster) ProtoMessage()               {}
func (*Cluster) Descriptor() ([]byte, []int) { return fileDescriptorClusterService, []int{13} }

func (m *Cluster) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Cluster) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Cluster) GetInitialNodeCount() int32 {
	if m != nil {
		return m.InitialNodeCount
	}
	return 0
}

func (m *Cluster) GetNodeConfig() *NodeConfig {
	if m != nil {
		return m.NodeConfig
	}
	return nil
}

func (m *Cluster) GetMasterAuth() *MasterAuth {
	if m != nil {
		return m.MasterAuth
	}
	return nil
}

func (m *Cluster) GetLoggingService() string {
	if m != nil {
		return m.LoggingService
	}
	return ""
}

func (m *Cluster) GetMonitoringService() string {
	if m != nil {
		return m.MonitoringService
	}
	return ""
}

func (m *Cluster) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *Cluster) GetClusterIpv4Cidr() string {
	if m != nil {
		return m.ClusterIpv4Cidr
	}
	return ""
}

func (m *Cluster) GetAddonsConfig() *AddonsConfig {
	if m != nil {
		return m.AddonsConfig
	}
	return nil
}

func (m *Cluster) GetSubnetwork() string {
	if m != nil {
		return m.Subnetwork
	}
	return ""
}

func (m *Cluster) GetNodePools() []*NodePool {
	if m != nil {
		return m.NodePools
	}
	return nil
}

func (m *Cluster) GetLocations() []string {
	if m != nil {
		return m.Locations
	}
	return nil
}

func (m *Cluster) GetEnableKubernetesAlpha() bool {
	if m != nil {
		return m.EnableKubernetesAlpha
	}
	return false
}

func (m *Cluster) GetNetworkPolicy() *NetworkPolicy {
	if m != nil {
		return m.NetworkPolicy
	}
	return nil
}

func (m *Cluster) GetIpAllocationPolicy() *IPAllocationPolicy {
	if m != nil {
		return m.IpAllocationPolicy
	}
	return nil
}

func (m *Cluster) GetMasterAuthorizedNetworksConfig() *MasterAuthorizedNetworksConfig {
	if m != nil {
		return m.MasterAuthorizedNetworksConfig
	}
	return nil
}

func (m *Cluster) GetMaintenancePolicy() *MaintenancePolicy {
	if m != nil {
		return m.MaintenancePolicy
	}
	return nil
}

func (m *Cluster) GetPodSecurityPolicyConfig() *PodSecurityPolicyConfig {
	if m != nil {
		return m.PodSecurityPolicyConfig
	}
	return nil
}

func (m *Cluster) GetSelfLink() string {
	if m != nil {
		return m.SelfLink
	}
	return ""
}

func (m *Cluster) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *Cluster) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *Cluster) GetInitialClusterVersion() string {
	if m != nil {
		return m.InitialClusterVersion
	}
	return ""
}

func (m *Cluster) GetCurrentMasterVersion() string {
	if m != nil {
		return m.CurrentMasterVersion
	}
	return ""
}

func (m *Cluster) GetCurrentNodeVersion() string {
	if m != nil {
		return m.CurrentNodeVersion
	}
	return ""
}

func (m *Cluster) GetCreateTime() string {
	if m != nil {
		return m.CreateTime
	}
	return ""
}

func (m *Cluster) GetStatus() Cluster_Status {
	if m != nil {
		return m.Status
	}
	return Cluster_STATUS_UNSPECIFIED
}

func (m *Cluster) GetStatusMessage() string {
	if m != nil {
		return m.StatusMessage
	}
	return ""
}

func (m *Cluster) GetNodeIpv4CidrSize() int32 {
	if m != nil {
		return m.NodeIpv4CidrSize
	}
	return 0
}

func (m *Cluster) GetServicesIpv4Cidr() string {
	if m != nil {
		return m.ServicesIpv4Cidr
	}
	return ""
}

func (m *Cluster) GetInstanceGroupUrls() []string {
	if m != nil {
		return m.InstanceGroupUrls
	}
	return nil
}

func (m *Cluster) GetCurrentNodeCount() int32 {
	if m != nil {
		return m.CurrentNodeCount
	}
	return 0
}

func (m *Cluster) GetExpireTime() string {
	if m != nil {
		return m.ExpireTime
	}
	return ""
}

func (m *Cluster) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

// ClusterUpdate describes an update to the cluster. Exactly one update can
// be applied to a cluster with each request, so at most one field can be
// provided.
type ClusterUpdate struct {
	// The Kubernetes version to change the nodes to (typically an
	// upgrade). Use `-` to upgrade to the latest version supported by
	// the server.
	DesiredNodeVersion string `protobuf:"bytes,4,opt,name=desired_node_version,json=desiredNodeVersion,proto3" json:"desired_node_version,omitempty"`
	// The monitoring service the cluster should use to write metrics.
	// Currently available options:
	//
	// * "monitoring.googleapis.com" - the Google Cloud Monitoring service
	// * "none" - no metrics will be exported from the cluster
	DesiredMonitoringService string `protobuf:"bytes,5,opt,name=desired_monitoring_service,json=desiredMonitoringService,proto3" json:"desired_monitoring_service,omitempty"`
	// Configurations for the various addons available to run in the cluster.
	DesiredAddonsConfig *AddonsConfig `protobuf:"bytes,6,opt,name=desired_addons_config,json=desiredAddonsConfig" json:"desired_addons_config,omitempty"`
	// The node pool to be upgraded. This field is mandatory if
	// "desired_node_version", "desired_image_family" or
	// "desired_node_pool_autoscaling" is specified and there is more than one
	// node pool on the cluster.
	DesiredNodePoolId string `protobuf:"bytes,7,opt,name=desired_node_pool_id,json=desiredNodePoolId,proto3" json:"desired_node_pool_id,omitempty"`
	// The desired image type for the node pool.
	// NOTE: Set the "desired_node_pool" field as well.
	DesiredImageType string `protobuf:"bytes,8,opt,name=desired_image_type,json=desiredImageType,proto3" json:"desired_image_type,omitempty"`
	// Autoscaler configuration for the node pool specified in
	// desired_node_pool_id. If there is only one pool in the
	// cluster and desired_node_pool_id is not provided then
	// the change applies to that single node pool.
	DesiredNodePoolAutoscaling *NodePoolAutoscaling `protobuf:"bytes,9,opt,name=desired_node_pool_autoscaling,json=desiredNodePoolAutoscaling" json:"desired_node_pool_autoscaling,omitempty"`
	// The desired list of Google Compute Engine
	// [locations](/compute/docs/zones#available) in which the cluster's nodes
	// should be located. Changing the locations a cluster is in will result
	// in nodes being either created or removed from the cluster, depending on
	// whether locations are being added or removed.
	//
	// This list must always include the cluster's primary zone.
	DesiredLocations []string `protobuf:"bytes,10,rep,name=desired_locations,json=desiredLocations" json:"desired_locations,omitempty"`
	// The desired configuration options for master authorized networks feature.
	DesiredMasterAuthorizedNetworksConfig *MasterAuthorizedNetworksConfig `protobuf:"bytes,12,opt,name=desired_master_authorized_networks_config,json=desiredMasterAuthorizedNetworksConfig" json:"desired_master_authorized_networks_config,omitempty"`
	// The desired configuration options for the PodSecurityPolicy feature.
	DesiredPodSecurityPolicyConfig *PodSecurityPolicyConfig `protobuf:"bytes,14,opt,name=desired_pod_security_policy_config,json=desiredPodSecurityPolicyConfig" json:"desired_pod_security_policy_config,omitempty"`
	// The Kubernetes version to change the master to. The only valid value is the
	// latest supported version. Use "-" to have the server automatically select
	// the latest version.
	DesiredMasterVersion string `protobuf:"bytes,100,opt,name=desired_master_version,json=desiredMasterVersion,proto3" json:"desired_master_version,omitempty"`
}

func (m *ClusterUpdate) Reset()                    { *m = ClusterUpdate{} }
func (m *ClusterUpdate) String() string            { return proto.CompactTextString(m) }
func (*ClusterUpdate) ProtoMessage()               {}
func (*ClusterUpdate) Descriptor() ([]byte, []int) { return fileDescriptorClusterService, []int{14} }

func (m *ClusterUpdate) GetDesiredNodeVersion() string {
	if m != nil {
		return m.DesiredNodeVersion
	}
	return ""
}

func (m *ClusterUpdate) GetDesiredMonitoringService() string {
	if m != nil {
		return m.DesiredMonitoringService
	}
	return ""
}

func (m *ClusterUpdate) GetDesiredAddonsConfig() *AddonsConfig {
	if m != nil {
		return m.DesiredAddonsConfig
	}
	return nil
}

func (m *ClusterUpdate) GetDesiredNodePoolId() string {
	if m != nil {
		return m.DesiredNodePoolId
	}
	return ""
}

func (m *ClusterUpdate) GetDesiredImageType() string {
	if m != nil {
		return m.DesiredImageType
	}
	return ""
}

func (m *ClusterUpdate) GetDesiredNodePoolAutoscaling() *NodePoolAutoscaling {
	if m != nil {
		return m.DesiredNodePoolAutoscaling
	}
	return nil
}

func (m *ClusterUpdate) GetDesiredLocations() []string {
	if m != nil {
		return m.DesiredLocations
	}
	return nil
}

func (m *ClusterUpdate) GetDesiredMasterAuthorizedNetworksConfig() *MasterAuthorizedNetworksConfig {
	if m != nil {
		return m.DesiredMasterAuthorizedNetworksConfig
	}
	return nil
}

func (m *ClusterUpdate) GetDesiredPodSecurityPolicyConfig() *PodSecurityPolicyConfig {
	if m != nil {
		return m.DesiredPodSecurityPolicyConfig
	}
	return nil
}

func (m *ClusterUpdate) GetDesiredMasterVersion() string {
	if m != nil {
		return m.DesiredMasterVersion
	}
	return ""
}

// This operation resource represents operations that may have happened or are
// happening on the cluster. All fields are output only.
type Operation struct {
	// The server-assigned ID for the operation.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The name of the Google Compute Engine
	// [zone](/compute/docs/zones#available) in which the operation
	// is taking place.
	// This field is deprecated, use location instead.
	Zone string `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
	// The operation type.
	OperationType Operation_Type `protobuf:"varint,3,opt,name=operation_type,json=operationType,proto3,enum=google.container.v1beta1.Operation_Type" json:"operation_type,omitempty"`
	// The current status of the operation.
	Status Operation_Status `protobuf:"varint,4,opt,name=status,proto3,enum=google.container.v1beta1.Operation_Status" json:"status,omitempty"`
	// Detailed operation progress, if available.
	Detail string `protobuf:"bytes,8,opt,name=detail,proto3" json:"detail,omitempty"`
	// If an error has occurred, a textual description of the error.
	StatusMessage string `protobuf:"bytes,5,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	// Server-defined URL for the resource.
	SelfLink string `protobuf:"bytes,6,opt,name=self_link,json=selfLink,proto3" json:"self_link,omitempty"`
	// Server-defined URL for the target of the operation.
	TargetLink string `protobuf:"bytes,7,opt,name=target_link,json=targetLink,proto3" json:"target_link,omitempty"`
	// [Output only] The name of the Google Compute Engine
	// [zone](/compute/docs/regions-zones/regions-zones#available) or
	// [region](/compute/docs/regions-zones/regions-zones#available) in which
	// the cluster resides.
	Location string `protobuf:"bytes,9,opt,name=location,proto3" json:"location,omitempty"`
	// [Output only] The time the operation started, in
	// [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
	StartTime string `protobuf:"bytes,10,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// [Output only] The time the operation completed, in
	// [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
	EndTime string `protobuf:"bytes,11,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (m *Operation) Reset()                    { *m = Operation{} }
func (m *Operation) String() string            { return proto.CompactTextString(m) }
func (*Operation) ProtoMessage()               {}
func (*Operation) Descriptor() ([]byte, []int) { return fileDescriptorClusterService, []int{15} }

func (m *Operation) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Operation) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *Operation) GetOperationType() Operation_Type {
	if m != nil {
		return m.OperationType
	}
	return Operation_TYPE_UNSPECIFIED
}

func (m *Operation) GetStatus() Operation_Status {
	if m != nil {
		return m.Status
	}
	return Operation_STATUS_UNSPECIFIED
}

func (m *Operation) GetDetail() string {
	if m != nil {
		return m.Detail
	}
	return ""
}

func (m *Operation) GetStatusMessage() string {
	if m != nil {
		return m.StatusMessage
	}
	return ""
}

func (m *Operation) GetSelfLink() string {
	if m != nil {
		return m.SelfLink
	}
	return ""
}

func (m *Operation) GetTargetLink() string {
	if m != nil {
		return m.TargetLink
	}
	return ""
}

func (m *Operation) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *Operation) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *Operation) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

// CreateClusterRequest creates a cluster.
type CreateClusterRequest struct {
	// The Google Developers Console [project ID or project
	// number](https://support.google.com/cloud/answer/6158840).
	// This field is deprecated, use parent instead.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The name of the Google Compute Engine
	// [zone](/compute/docs/zones#available) in which the cluster
	// resides.
	// This field is deprecated, use parent instead.
	Zone string `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
	// A [cluster
	// resource](/container-engine/reference/rest/v1beta1/projects.zones.clusters)
	Cluster *Cluster `protobuf:"bytes,3,opt,name=cluster" json:"cluster,omitempty"`
	// The parent (project and location) where the cluster will be created.
	// Specified in the format 'projects/*/locations/*'.
	Parent string `protobuf:"bytes,5,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (m *CreateClusterRequest) Reset()         { *m = CreateClusterRequest{} }
func (m *CreateClusterRequest) String() string { return proto.CompactTextString(m) }
func (*CreateClusterRequest) ProtoMessage()    {}
func (*CreateClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorClusterService, []int{16}
}

func (m *CreateClusterRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *CreateClusterRequest) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *CreateClusterRequest) GetCluster() *Cluster {
	if m != nil {
		return m.Cluster
	}
	return nil
}

func (m *CreateClusterRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

// GetClusterRequest gets the settings of a cluster.
type GetClusterRequest struct {
	// The Google Developers Console [project ID or project
	// number](https://support.google.com/cloud/answer/6158840).
	// This field is deprecated, use name instead.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The name of the Google Compute Engine
	// [zone](/compute/docs/zones#available) in which the cluster
	// resides.
	// This field is deprecated, use name instead.
	Zone string `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
	// The name of the cluster to retrieve.
	// This field is deprecated, use name instead.
	ClusterId string `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The name (project, location, cluster) of the cluster to retrieve.
	// Specified in the format 'projects/*/locations/*/clusters/*'.
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *GetClusterRequest) Reset()                    { *m = GetClusterRequest{} }
func (m *GetClusterRequest) String() string            { return proto.CompactTextString(m) }
func (*GetClusterRequest) ProtoMessage()               {}
func (*GetClusterRequest) Descriptor() ([]byte, []int) { return fileDescriptorClusterService, []int{17} }

func (m *GetClusterRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *GetClusterRequest) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *GetClusterRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *GetClusterRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// UpdateClusterRequest updates the settings of a cluster.
type UpdateClusterRequest struct {
	// The Google Developers Console [project ID or project
	// number](https://support.google.com/cloud/answer/6158840).
	// This field is deprecated, use name instead.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The name of the Google Compute Engine
	// [zone](/compute/docs/zones#available) in which the cluster
	// resides.
	// This field is deprecated, use name instead.
	Zone string `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
	// The name of the cluster to upgrade.
	// This field is deprecated, use name instead.
	ClusterId string `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// A description of the update.
	Update *ClusterUpdate `protobuf:"bytes,4,opt,name=update" json:"update,omitempty"`
	// The name (project, location, cluster) of the cluster to update.
	// Specified in the format 'projects/*/locations/*/clusters/*'.
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *UpdateClusterRequest) Reset()         { *m = UpdateClusterRequest{} }
func (m *UpdateClusterRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateClusterRequest) ProtoMessage()    {}
func (*UpdateClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorClusterService, []int{18}
}

func (m *UpdateClusterRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *UpdateClusterRequest) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *UpdateClusterRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *UpdateClusterRequest) GetUpdate() *ClusterUpdate {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *UpdateClusterRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// SetMasterAuthRequest updates the admin password of a cluster.
type SetMasterAuthRequest struct {
	// The Google Developers Console [project ID or project
	// number](https://support.google.com/cloud/answer/6158840).
	// This field is deprecated, use name instead.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The name of the Google Compute Engine
	// [zone](/compute/docs/zones#available) in which the cluster
	// resides.
	// This field is deprecated, use name instead.
	Zone string `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
	// The name of the cluster to upgrade.
	// This field is deprecated, use name instead.
	ClusterId string `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The exact form of action to be taken on the master auth.
	Action SetMasterAuthRequest_Action `protobuf:"varint,4,opt,name=action,proto3,enum=google.container.v1beta1.SetMasterAuthRequest_Action" json:"action,omitempty"`
	// A description of the update.
	Update *MasterAuth `protobuf:"bytes,5,opt,name=update" json:"update,omitempty"`
	// The name (project, location, cluster) of the cluster to set auth.
	// Specified in the format 'projects/*/locations/*/clusters/*'.
	Name string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *SetMasterAuthRequest) Reset()         { *m = SetMasterAuthRequest{} }
func (m *SetMasterAuthRequest) String() string { return proto.CompactTextString(m) }
func (*SetMasterAuthRequest) ProtoMessage()    {}
func (*SetMasterAuthRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorClusterService, []int{19}
}

func (m *SetMasterAuthRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *SetMasterAuthRequest) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *SetMasterAuthRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *SetMasterAuthRequest) GetAction() SetMasterAuthRequest_Action {
	if m != nil {
		return m.Action
	}
	return SetMasterAuthRequest_UNKNOWN
}

func (m *SetMasterAuthRequest) GetUpdate() *MasterAuth {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *SetMasterAuthRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// DeleteClusterRequest deletes a cluster.
type DeleteClusterRequest struct {
	// The Google Developers Console [project ID or project
	// number](https://support.google.com/cloud/answer/6158840).
	// This field is deprecated, use name instead.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The name of the Google Compute Engine
	// [zone](/compute/docs/zones#available) in which the cluster
	// resides.
	// This field is deprecated, use name instead.
	Zone string `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
	// The name of the cluster to delete.
	// This field is deprecated, use name instead.
	ClusterId string `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The name (project, location, cluster) of the cluster to delete.
	// Specified in the format 'projects/*/locations/*/clusters/*'.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *DeleteClusterRequest) Reset()         { *m = DeleteClusterRequest{} }
func (m *DeleteClusterRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteClusterRequest) ProtoMessage()    {}
func (*DeleteClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorClusterService, []int{20}
}

func (m *DeleteClusterRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *DeleteClusterRequest) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *DeleteClusterRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *DeleteClusterRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// ListClustersRequest lists clusters.
type ListClustersRequest struct {
	// The Google Developers Console [project ID or project
	// number](https://support.google.com/cloud/answer/6158840).
	// This field is deprecated, use parent instead.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The name of the Google Compute Engine
	// [zone](/compute/docs/zones#available) in which the cluster
	// resides, or "-" for all zones.
	// This field is deprecated, use parent instead.
	Zone string `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
	// The parent (project and location) where the clusters will be listed.
	// Specified in the format 'projects/*/locations/*'.
	// Location "-" matches all zones and all regions.
	Parent string `protobuf:"bytes,4,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (m *ListClustersRequest) Reset()         { *m = ListClustersRequest{} }
func (m *ListClustersRequest) String() string { return proto.CompactTextString(m) }
func (*ListClustersRequest) ProtoMessage()    {}
func (*ListClustersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorClusterService, []int{21}
}

func (m *ListClustersRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *ListClustersRequest) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *ListClustersRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

// ListClustersResponse is the result of ListClustersRequest.
type ListClustersResponse struct {
	// A list of clusters in the project in the specified zone, or
	// across all ones.
	Clusters []*Cluster `protobuf:"bytes,1,rep,name=clusters" json:"clusters,omitempty"`
	// If any zones are listed here, the list of clusters returned
	// may be missing those zones.
	MissingZones []string `protobuf:"bytes,2,rep,name=missing_zones,json=missingZones" json:"missing_zones,omitempty"`
}

func (m *ListClustersResponse) Reset()         { *m = ListClustersResponse{} }
func (m *ListClustersResponse) String() string { return proto.CompactTextString(m) }
func (*ListClustersResponse) ProtoMessage()    {}
func (*ListClustersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorClusterService, []int{22}
}

func (m *ListClustersResponse) GetClusters() []*Cluster {
	if m != nil {
		return m.Clusters
	}
	return nil
}

func (m *ListClustersResponse) GetMissingZones() []string {
	if m != nil {
		return m.MissingZones
	}
	return nil
}

// GetOperationRequest gets a single operation.
type GetOperationRequest struct {
	// The Google Developers Console [project ID or project
	// number](https://support.google.com/cloud/answer/6158840).
	// This field is deprecated, use name instead.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The name of the Google Compute Engine
	// [zone](/compute/docs/zones#available) in which the cluster
	// resides.
	// This field is deprecated, use name instead.
	Zone string `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
	// The server-assigned `name` of the operation.
	// This field is deprecated, use name instead.
	OperationId string `protobuf:"bytes,3,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
	// The name (project, location, operation id) of the operation to get.
	// Specified in the format 'projects/*/locations/*/operations/*'.
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *GetOperationRequest) Reset()         { *m = GetOperationRequest{} }
func (m *GetOperationRequest) String() string { return proto.CompactTextString(m) }
func (*GetOperationRequest) ProtoMessage()    {}
func (*GetOperationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorClusterService, []int{23}
}

func (m *GetOperationRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *GetOperationRequest) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *GetOperationRequest) GetOperationId() string {
	if m != nil {
		return m.OperationId
	}
	return ""
}

func (m *GetOperationRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// ListOperationsRequest lists operations.
type ListOperationsRequest struct {
	// The Google Developers Console [project ID or project
	// number](https://support.google.com/cloud/answer/6158840).
	// This field is deprecated, use parent instead.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The name of the Google Compute Engine [zone](/compute/docs/zones#available)
	// to return operations for, or `-` for all zones.
	// This field is deprecated, use parent instead.
	Zone string `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
	// The parent (project and location) where the operations will be listed.
	// Specified in the format 'projects/*/locations/*'.
	// Location "-" matches all zones and all regions.
	Parent string `protobuf:"bytes,4,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (m *ListOperationsRequest) Reset()         { *m = ListOperationsRequest{} }
func (m *ListOperationsRequest) String() string { return proto.CompactTextString(m) }
func (*ListOperationsRequest) ProtoMessage()    {}
func (*ListOperationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorClusterService, []int{24}
}

func (m *ListOperationsRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *ListOperationsRequest) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *ListOperationsRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

// CancelOperationRequest cancels a single operation.
type CancelOperationRequest struct {
	// The Google Developers Console [project ID or project
	// number](https://support.google.com/cloud/answer/6158840).
	// This field is deprecated, use name instead.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The name of the Google Compute Engine
	// [zone](/compute/docs/zones#available) in which the operation resides.
	// This field is deprecated, use name instead.
	Zone string `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
	// The server-assigned `name` of the operation.
	// This field is deprecated, use name instead.
	OperationId string `protobuf:"bytes,3,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
	// The name (project, location, operation id) of the operation to cancel.
	// Specified in the format 'projects/*/locations/*/operations/*'.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *CancelOperationRequest) Reset()         { *m = CancelOperationRequest{} }
func (m *CancelOperationRequest) String() string { return proto.CompactTextString(m) }
func (*CancelOperationRequest) ProtoMessage()    {}
func (*CancelOperationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorClusterService, []int{25}
}

func (m *CancelOperationRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *CancelOperationRequest) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *CancelOperationRequest) GetOperationId() string {
	if m != nil {
		return m.OperationId
	}
	return ""
}

func (m *CancelOperationRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// ListOperationsResponse is the result of ListOperationsRequest.
type ListOperationsResponse struct {
	// A list of operations in the project in the specified zone.
	Operations []*Operation `protobuf:"bytes,1,rep,name=operations" json:"operations,omitempty"`
	// If any zones are listed here, the list of operations returned
	// may be missing the operations from those zones.
	MissingZones []string `protobuf:"bytes,2,rep,name=missing_zones,json=missingZones" json:"missing_zones,omitempty"`
}

func (m *ListOperationsResponse) Reset()         { *m = ListOperationsResponse{} }
func (m *ListOperationsResponse) String() string { return proto.CompactTextString(m) }
func (*ListOperationsResponse) ProtoMessage()    {}
func (*ListOperationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorClusterService, []int{26}
}

func (m *ListOperationsResponse) GetOperations() []*Operation {
	if m != nil {
		return m.Operations
	}
	return nil
}

func (m *ListOperationsResponse) GetMissingZones() []string {
	if m != nil {
		return m.MissingZones
	}
	return nil
}

// Gets the current Container Engine service configuration.
type GetServerConfigRequest struct {
	// The Google Developers Console [project ID or project
	// number](https://support.google.com/cloud/answer/6158840).
	// This field is deprecated, use name instead.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The name of the Google Compute Engine [zone](/compute/docs/zones#available)
	// to return operations for.
	// This field is deprecated, use name instead.
	Zone string `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
	// The name (project and location) of the server config to get
	// Specified in the format 'projects/*/locations/*'.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *GetServerConfigRequest) Reset()         { *m = GetServerConfigRequest{} }
func (m *GetServerConfigRequest) String() string { return proto.CompactTextString(m) }
func (*GetServerConfigRequest) ProtoMessage()    {}
func (*GetServerConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorClusterService, []int{27}
}

func (m *GetServerConfigRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *GetServerConfigRequest) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *GetServerConfigRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Container Engine service configuration.
type ServerConfig struct {
	// Version of Kubernetes the service deploys by default.
	DefaultClusterVersion string `protobuf:"bytes,1,opt,name=default_cluster_version,json=defaultClusterVersion,proto3" json:"default_cluster_version,omitempty"`
	// List of valid node upgrade target versions.
	ValidNodeVersions []string `protobuf:"bytes,3,rep,name=valid_node_versions,json=validNodeVersions" json:"valid_node_versions,omitempty"`
	// Default image type.
	DefaultImageType string `protobuf:"bytes,4,opt,name=default_image_type,json=defaultImageType,proto3" json:"default_image_type,omitempty"`
	// List of valid image types.
	ValidImageTypes []string `protobuf:"bytes,5,rep,name=valid_image_types,json=validImageTypes" json:"valid_image_types,omitempty"`
	// List of valid master versions.
	ValidMasterVersions []string `protobuf:"bytes,6,rep,name=valid_master_versions,json=validMasterVersions" json:"valid_master_versions,omitempty"`
}

func (m *ServerConfig) Reset()                    { *m = ServerConfig{} }
func (m *ServerConfig) String() string            { return proto.CompactTextString(m) }
func (*ServerConfig) ProtoMessage()               {}
func (*ServerConfig) Descriptor() ([]byte, []int) { return fileDescriptorClusterService, []int{28} }

func (m *ServerConfig) GetDefaultClusterVersion() string {
	if m != nil {
		return m.DefaultClusterVersion
	}
	return ""
}

func (m *ServerConfig) GetValidNodeVersions() []string {
	if m != nil {
		return m.ValidNodeVersions
	}
	return nil
}

func (m *ServerConfig) GetDefaultImageType() string {
	if m != nil {
		return m.DefaultImageType
	}
	return ""
}

func (m *ServerConfig) GetValidImageTypes() []string {
	if m != nil {
		return m.ValidImageTypes
	}
	return nil
}

func (m *ServerConfig) GetValidMasterVersions() []string {
	if m != nil {
		return m.ValidMasterVersions
	}
	return nil
}

// CreateNodePoolRequest creates a node pool for a cluster.
type CreateNodePoolRequest struct {
	// The Google Developers Console [project ID or project
	// number](https://developers.google.com/console/help/new/#projectnumber).
	// This field is deprecated, use parent instead.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The name of the Google Compute Engine
	// [zone](/compute/docs/zones#available) in which the cluster
	// resides.
	// This field is deprecated, use parent instead.
	Zone string `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
	// The name of the cluster.
	// This field is deprecated, use parent instead.
	ClusterId string `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The node pool to create.
	NodePool *NodePool `protobuf:"bytes,4,opt,name=node_pool,json=nodePool" json:"node_pool,omitempty"`
	// The parent (project, location, cluster id) where the node pool will be created.
	// Specified in the format 'projects/*/locations/*/clusters/*/nodePools/*'.
	Parent string `protobuf:"bytes,6,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (m *CreateNodePoolRequest) Reset()         { *m = CreateNodePoolRequest{} }
func (m *CreateNodePoolRequest) String() string { return proto.CompactTextString(m) }
func (*CreateNodePoolRequest) ProtoMessage()    {}
func (*CreateNodePoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorClusterService, []int{29}
}

func (m *CreateNodePoolRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *CreateNodePoolRequest) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *CreateNodePoolRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *CreateNodePoolRequest) GetNodePool() *NodePool {
	if m != nil {
		return m.NodePool
	}
	return nil
}

func (m *CreateNodePoolRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

// DeleteNodePoolRequest deletes a node pool for a cluster.
type DeleteNodePoolRequest struct {
	// The Google Developers Console [project ID or project
	// number](https://developers.google.com/console/help/new/#projectnumber).
	// This field is deprecated, use name instead.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The name of the Google Compute Engine
	// [zone](/compute/docs/zones#available) in which the cluster
	// resides.
	// This field is deprecated, use name instead.
	Zone string `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
	// The name of the cluster.
	// This field is deprecated, use name instead.
	ClusterId string `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The name of the node pool to delete.
	// This field is deprecated, use name instead.
	NodePoolId string `protobuf:"bytes,4,opt,name=node_pool_id,json=nodePoolId,proto3" json:"node_pool_id,omitempty"`
	// The name (project, location, cluster, node pool id) of the node pool to delete.
	// Specified in the format 'projects/*/locations/*/clusters/*/nodePools/*'.
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *DeleteNodePoolRequest) Reset()         { *m = DeleteNodePoolRequest{} }
func (m *DeleteNodePoolRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteNodePoolRequest) ProtoMessage()    {}
func (*DeleteNodePoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorClusterService, []int{30}
}

func (m *DeleteNodePoolRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *DeleteNodePoolRequest) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *DeleteNodePoolRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *DeleteNodePoolRequest) GetNodePoolId() string {
	if m != nil {
		return m.NodePoolId
	}
	return ""
}

func (m *DeleteNodePoolRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// ListNodePoolsRequest lists the node pool(s) for a cluster.
type ListNodePoolsRequest struct {
	// The Google Developers Console [project ID or project
	// number](https://developers.google.com/console/help/new/#projectnumber).
	// This field is deprecated, use parent instead.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The name of the Google Compute Engine
	// [zone](/compute/docs/zones#available) in which the cluster
	// resides.
	// This field is deprecated, use parent instead.
	Zone string `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
	// The name of the cluster.
	// This field is deprecated, use parent instead.
	ClusterId string `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The parent (project, location, cluster id) where the node pools will be listed.
	// Specified in the format 'projects/*/locations/*/clusters/*'.
	Parent string `protobuf:"bytes,5,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (m *ListNodePoolsRequest) Reset()         { *m = ListNodePoolsRequest{} }
func (m *ListNodePoolsRequest) String() string { return proto.CompactTextString(m) }
func (*ListNodePoolsRequest) ProtoMessage()    {}
func (*ListNodePoolsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorClusterService, []int{31}
}

func (m *ListNodePoolsRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *ListNodePoolsRequest) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *ListNodePoolsRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *ListNodePoolsRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

// GetNodePoolRequest retrieves a node pool for a cluster.
type GetNodePoolRequest struct {
	// The Google Developers Console [project ID or project
	// number](https://developers.google.com/console/help/new/#projectnumber).
	// This field is deprecated, use name instead.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The name of the Google Compute Engine
	// [zone](/compute/docs/zones#available) in which the cluster
	// resides.
	// This field is deprecated, use name instead.
	Zone string `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
	// The name of the cluster.
	// This field is deprecated, use name instead.
	ClusterId string `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The name of the node pool.
	// This field is deprecated, use name instead.
	NodePoolId string `protobuf:"bytes,4,opt,name=node_pool_id,json=nodePoolId,proto3" json:"node_pool_id,omitempty"`
	// The name (project, location, cluster, node pool id) of the node pool to get.
	// Specified in the format 'projects/*/locations/*/clusters/*/nodePools/*'.
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *GetNodePoolRequest) Reset()         { *m = GetNodePoolRequest{} }
func (m *GetNodePoolRequest) String() string { return proto.CompactTextString(m) }
func (*GetNodePoolRequest) ProtoMessage()    {}
func (*GetNodePoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorClusterService, []int{32}
}

func (m *GetNodePoolRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *GetNodePoolRequest) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *GetNodePoolRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *GetNodePoolRequest) GetNodePoolId() string {
	if m != nil {
		return m.NodePoolId
	}
	return ""
}

func (m *GetNodePoolRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// NodePool contains the name and configuration for a cluster's node pool.
// Node pools are a set of nodes (i.e. VM's), with a common configuration and
// specification, under the control of the cluster master. They may have a set
// of Kubernetes labels applied to them, which may be used to reference them
// during pod scheduling. They may also be resized up or down, to accommodate
// the workload.
type NodePool struct {
	// The name of the node pool.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The node configuration of the pool.
	Config *NodeConfig `protobuf:"bytes,2,opt,name=config" json:"config,omitempty"`
	// The initial node count for the pool. You must ensure that your
	// Compute Engine <a href="/compute/docs/resource-quotas">resource quota</a>
	// is sufficient for this number of instances. You must also have available
	// firewall and routes quota.
	InitialNodeCount int32 `protobuf:"varint,3,opt,name=initial_node_count,json=initialNodeCount,proto3" json:"initial_node_count,omitempty"`
	// [Output only] Server-defined URL for the resource.
	SelfLink string `protobuf:"bytes,100,opt,name=self_link,json=selfLink,proto3" json:"self_link,omitempty"`
	// [Output only] The version of the Kubernetes of this node.
	Version string `protobuf:"bytes,101,opt,name=version,proto3" json:"version,omitempty"`
	// [Output only] The resource URLs of [instance
	// groups](/compute/docs/instance-groups/) associated with this
	// node pool.
	InstanceGroupUrls []string `protobuf:"bytes,102,rep,name=instance_group_urls,json=instanceGroupUrls" json:"instance_group_urls,omitempty"`
	// [Output only] The status of the nodes in this pool instance.
	Status NodePool_Status `protobuf:"varint,103,opt,name=status,proto3,enum=google.container.v1beta1.NodePool_Status" json:"status,omitempty"`
	// [Output only] Additional information about the current status of this
	// node pool instance, if available.
	StatusMessage string `protobuf:"bytes,104,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	// Autoscaler configuration for this NodePool. Autoscaler is enabled
	// only if a valid configuration is present.
	Autoscaling *NodePoolAutoscaling `protobuf:"bytes,4,opt,name=autoscaling" json:"autoscaling,omitempty"`
	// NodeManagement configuration for this NodePool.
	Management *NodeManagement `protobuf:"bytes,5,opt,name=management" json:"management,omitempty"`
}

func (m *NodePool) Reset()                    { *m = NodePool{} }
func (m *NodePool) String() string            { return proto.CompactTextString(m) }
func (*NodePool) ProtoMessage()               {}
func (*NodePool) Descriptor() ([]byte, []int) { return fileDescriptorClusterService, []int{33} }

func (m *NodePool) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NodePool) GetConfig() *NodeConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *NodePool) GetInitialNodeCount() int32 {
	if m != nil {
		return m.InitialNodeCount
	}
	return 0
}

func (m *NodePool) GetSelfLink() string {
	if m != nil {
		return m.SelfLink
	}
	return ""
}

func (m *NodePool) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *NodePool) GetInstanceGroupUrls() []string {
	if m != nil {
		return m.InstanceGroupUrls
	}
	return nil
}

func (m *NodePool) GetStatus() NodePool_Status {
	if m != nil {
		return m.Status
	}
	return NodePool_STATUS_UNSPECIFIED
}

func (m *NodePool) GetStatusMessage() string {
	if m != nil {
		return m.StatusMessage
	}
	return ""
}

func (m *NodePool) GetAutoscaling() *NodePoolAutoscaling {
	if m != nil {
		return m.Autoscaling
	}
	return nil
}

func (m *NodePool) GetManagement() *NodeManagement {
	if m != nil {
		return m.Management
	}
	return nil
}

// NodeManagement defines the set of node management services turned on for the
// node pool.
type NodeManagement struct {
	// Whether the nodes will be automatically upgraded.
	AutoUpgrade bool `protobuf:"varint,1,opt,name=auto_upgrade,json=autoUpgrade,proto3" json:"auto_upgrade,omitempty"`
	// Whether the nodes will be automatically repaired.
	AutoRepair bool `protobuf:"varint,2,opt,name=auto_repair,json=autoRepair,proto3" json:"auto_repair,omitempty"`
	// Specifies the Auto Upgrade knobs for the node pool.
	UpgradeOptions *AutoUpgradeOptions `protobuf:"bytes,10,opt,name=upgrade_options,json=upgradeOptions" json:"upgrade_options,omitempty"`
}

func (m *NodeManagement) Reset()                    { *m = NodeManagement{} }
func (m *NodeManagement) String() string            { return proto.CompactTextString(m) }
func (*NodeManagement) ProtoMessage()               {}
func (*NodeManagement) Descriptor() ([]byte, []int) { return fileDescriptorClusterService, []int{34} }

func (m *NodeManagement) GetAutoUpgrade() bool {
	if m != nil {
		return m.AutoUpgrade
	}
	return false
}

func (m *NodeManagement) GetAutoRepair() bool {
	if m != nil {
		return m.AutoRepair
	}
	return false
}

func (m *NodeManagement) GetUpgradeOptions() *AutoUpgradeOptions {
	if m != nil {
		return m.UpgradeOptions
	}
	return nil
}

// AutoUpgradeOptions defines the set of options for the user to control how
// the Auto Upgrades will proceed.
type AutoUpgradeOptions struct {
	// [Output only] This field is set when upgrades are about to commence
	// with the approximate start time for the upgrades, in
	// [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
	AutoUpgradeStartTime string `protobuf:"bytes,1,opt,name=auto_upgrade_start_time,json=autoUpgradeStartTime,proto3" json:"auto_upgrade_start_time,omitempty"`
	// [Output only] This field is set when upgrades are about to commence
	// with the description of the upgrade.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *AutoUpgradeOptions) Reset()         { *m = AutoUpgradeOptions{} }
func (m *AutoUpgradeOptions) String() string { return proto.CompactTextString(m) }
func (*AutoUpgradeOptions) ProtoMessage()    {}
func (*AutoUpgradeOptions) Descriptor() ([]byte, []int) {
	return fileDescriptorClusterService, []int{35}
}

func (m *AutoUpgradeOptions) GetAutoUpgradeStartTime() string {
	if m != nil {
		return m.AutoUpgradeStartTime
	}
	return ""
}

func (m *AutoUpgradeOptions) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// MaintenancePolicy defines the maintenance policy to be used for the cluster.
type MaintenancePolicy struct {
	// Specifies the maintenance window in which maintenance may be performed.
	Window *MaintenanceWindow `protobuf:"bytes,1,opt,name=window" json:"window,omitempty"`
}

func (m *MaintenancePolicy) Reset()                    { *m = MaintenancePolicy{} }
func (m *MaintenancePolicy) String() string            { return proto.CompactTextString(m) }
func (*MaintenancePolicy) ProtoMessage()               {}
func (*MaintenancePolicy) Descriptor() ([]byte, []int) { return fileDescriptorClusterService, []int{36} }

func (m *MaintenancePolicy) GetWindow() *MaintenanceWindow {
	if m != nil {
		return m.Window
	}
	return nil
}

// MaintenanceWindow defines the maintenance window to be used for the cluster.
type MaintenanceWindow struct {
	// Unimplemented, reserved for future use.
	// HourlyMaintenanceWindow hourly_maintenance_window = 1;
	//
	// Types that are valid to be assigned to Policy:
	//	*MaintenanceWindow_DailyMaintenanceWindow
	Policy isMaintenanceWindow_Policy `protobuf_oneof:"policy"`
}

func (m *MaintenanceWindow) Reset()                    { *m = MaintenanceWindow{} }
func (m *MaintenanceWindow) String() string            { return proto.CompactTextString(m) }
func (*MaintenanceWindow) ProtoMessage()               {}
func (*MaintenanceWindow) Descriptor() ([]byte, []int) { return fileDescriptorClusterService, []int{37} }

type isMaintenanceWindow_Policy interface {
	isMaintenanceWindow_Policy()
}

type MaintenanceWindow_DailyMaintenanceWindow struct {
	DailyMaintenanceWindow *DailyMaintenanceWindow `protobuf:"bytes,2,opt,name=daily_maintenance_window,json=dailyMaintenanceWindow,oneof"`
}

func (*MaintenanceWindow_DailyMaintenanceWindow) isMaintenanceWindow_Policy() {}

func (m *MaintenanceWindow) GetPolicy() isMaintenanceWindow_Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (m *MaintenanceWindow) GetDailyMaintenanceWindow() *DailyMaintenanceWindow {
	if x, ok := m.GetPolicy().(*MaintenanceWindow_DailyMaintenanceWindow); ok {
		return x.DailyMaintenanceWindow
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*MaintenanceWindow) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _MaintenanceWindow_OneofMarshaler, _MaintenanceWindow_OneofUnmarshaler, _MaintenanceWindow_OneofSizer, []interface{}{
		(*MaintenanceWindow_DailyMaintenanceWindow)(nil),
	}
}

func _MaintenanceWindow_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*MaintenanceWindow)
	// policy
	switch x := m.Policy.(type) {
	case *MaintenanceWindow_DailyMaintenanceWindow:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DailyMaintenanceWindow); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("MaintenanceWindow.Policy has unexpected type %T", x)
	}
	return nil
}

func _MaintenanceWindow_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*MaintenanceWindow)
	switch tag {
	case 2: // policy.daily_maintenance_window
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DailyMaintenanceWindow)
		err := b.DecodeMessage(msg)
		m.Policy = &MaintenanceWindow_DailyMaintenanceWindow{msg}
		return true, err
	default:
		return false, nil
	}
}

func _MaintenanceWindow_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*MaintenanceWindow)
	// policy
	switch x := m.Policy.(type) {
	case *MaintenanceWindow_DailyMaintenanceWindow:
		s := proto.Size(x.DailyMaintenanceWindow)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Time window specified for daily maintenance operations.
type DailyMaintenanceWindow struct {
	// Time within the maintenance window to start the maintenance operations.
	// It must be in format "HH:MM”, where HH : [00-23] and MM : [00-59] GMT.
	StartTime string `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// [Output only] Duration of the time window, automatically chosen to be
	// smallest possible in the given scenario.
	Duration string `protobuf:"bytes,3,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *DailyMaintenanceWindow) Reset()         { *m = DailyMaintenanceWindow{} }
func (m *DailyMaintenanceWindow) String() string { return proto.CompactTextString(m) }
func (*DailyMaintenanceWindow) ProtoMessage()    {}
func (*DailyMaintenanceWindow) Descriptor() ([]byte, []int) {
	return fileDescriptorClusterService, []int{38}
}

func (m *DailyMaintenanceWindow) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *DailyMaintenanceWindow) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

// SetNodePoolManagementRequest sets the node management properties of a node
// pool.
type SetNodePoolManagementRequest struct {
	// The Google Developers Console [project ID or project
	// number](https://support.google.com/cloud/answer/6158840).
	// This field is deprecated, use name instead.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The name of the Google Compute Engine
	// [zone](/compute/docs/zones#available) in which the cluster
	// resides.
	// This field is deprecated, use name instead.
	Zone string `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
	// The name of the cluster to update.
	// This field is deprecated, use name instead.
	ClusterId string `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The name of the node pool to update.
	// This field is deprecated, use name instead.
	NodePoolId string `protobuf:"bytes,4,opt,name=node_pool_id,json=nodePoolId,proto3" json:"node_pool_id,omitempty"`
	// NodeManagement configuration for the node pool.
	Management *NodeManagement `protobuf:"bytes,5,opt,name=management" json:"management,omitempty"`
	// The name (project, location, cluster, node pool id) of the node pool to set
	// management properties. Specified in the format
	// 'projects/*/locations/*/clusters/*/nodePools/*'.
	Name string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *SetNodePoolManagementRequest) Reset()         { *m = SetNodePoolManagementRequest{} }
func (m *SetNodePoolManagementRequest) String() string { return proto.CompactTextString(m) }
func (*SetNodePoolManagementRequest) ProtoMessage()    {}
func (*SetNodePoolManagementRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorClusterService, []int{39}
}

func (m *SetNodePoolManagementRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *SetNodePoolManagementRequest) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *SetNodePoolManagementRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *SetNodePoolManagementRequest) GetNodePoolId() string {
	if m != nil {
		return m.NodePoolId
	}
	return ""
}

func (m *SetNodePoolManagementRequest) GetManagement() *NodeManagement {
	if m != nil {
		return m.Management
	}
	return nil
}

func (m *SetNodePoolManagementRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// RollbackNodePoolUpgradeRequest rollbacks the previously Aborted or Failed
// NodePool upgrade. This will be an no-op if the last upgrade successfully
// completed.
type RollbackNodePoolUpgradeRequest struct {
	// The Google Developers Console [project ID or project
	// number](https://support.google.com/cloud/answer/6158840).
	// This field is deprecated, use name instead.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The name of the Google Compute Engine
	// [zone](/compute/docs/zones#available) in which the cluster
	// resides.
	// This field is deprecated, use name instead.
	Zone string `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
	// The name of the cluster to rollback.
	// This field is deprecated, use name instead.
	ClusterId string `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The name of the node pool to rollback.
	// This field is deprecated, use name instead.
	NodePoolId string `protobuf:"bytes,4,opt,name=node_pool_id,json=nodePoolId,proto3" json:"node_pool_id,omitempty"`
	// The name (project, location, cluster, node pool id) of the node poll to
	// rollback upgrade.
	// Specified in the format 'projects/*/locations/*/clusters/*/nodePools/*'.
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *RollbackNodePoolUpgradeRequest) Reset()         { *m = RollbackNodePoolUpgradeRequest{} }
func (m *RollbackNodePoolUpgradeRequest) String() string { return proto.CompactTextString(m) }
func (*RollbackNodePoolUpgradeRequest) ProtoMessage()    {}
func (*RollbackNodePoolUpgradeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorClusterService, []int{40}
}

func (m *RollbackNodePoolUpgradeRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *RollbackNodePoolUpgradeRequest) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *RollbackNodePoolUpgradeRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *RollbackNodePoolUpgradeRequest) GetNodePoolId() string {
	if m != nil {
		return m.NodePoolId
	}
	return ""
}

func (m *RollbackNodePoolUpgradeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// ListNodePoolsResponse is the result of ListNodePoolsRequest.
type ListNodePoolsResponse struct {
	// A list of node pools for a cluster.
	NodePools []*NodePool `protobuf:"bytes,1,rep,name=node_pools,json=nodePools" json:"node_pools,omitempty"`
}

func (m *ListNodePoolsResponse) Reset()         { *m = ListNodePoolsResponse{} }
func (m *ListNodePoolsResponse) String() string { return proto.CompactTextString(m) }
func (*ListNodePoolsResponse) ProtoMessage()    {}
func (*ListNodePoolsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorClusterService, []int{41}
}

func (m *ListNodePoolsResponse) GetNodePools() []*NodePool {
	if m != nil {
		return m.NodePools
	}
	return nil
}

// NodePoolAutoscaling contains information required by cluster autoscaler to
// adjust the size of the node pool to the current cluster usage.
type NodePoolAutoscaling struct {
	// Is autoscaling enabled for this node pool.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Minimum number of nodes in the NodePool. Must be >= 1 and <=
	// max_node_count.
	MinNodeCount int32 `protobuf:"varint,2,opt,name=min_node_count,json=minNodeCount,proto3" json:"min_node_count,omitempty"`
	// Maximum number of nodes in the NodePool. Must be >= min_node_count. There
	// has to enough quota to scale up the cluster.
	MaxNodeCount int32 `protobuf:"varint,3,opt,name=max_node_count,json=maxNodeCount,proto3" json:"max_node_count,omitempty"`
}

func (m *NodePoolAutoscaling) Reset()         { *m = NodePoolAutoscaling{} }
func (m *NodePoolAutoscaling) String() string { return proto.CompactTextString(m) }
func (*NodePoolAutoscaling) ProtoMessage()    {}
func (*NodePoolAutoscaling) Descriptor() ([]byte, []int) {
	return fileDescriptorClusterService, []int{42}
}

func (m *NodePoolAutoscaling) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *NodePoolAutoscaling) GetMinNodeCount() int32 {
	if m != nil {
		return m.MinNodeCount
	}
	return 0
}

func (m *NodePoolAutoscaling) GetMaxNodeCount() int32 {
	if m != nil {
		return m.MaxNodeCount
	}
	return 0
}

// SetLabelsRequest sets the Google Cloud Platform labels on a Google Container
// Engine cluster, which will in turn set them for Google Compute Engine
// resources used by that cluster
type SetLabelsRequest struct {
	// The Google Developers Console [project ID or project
	// number](https://developers.google.com/console/help/new/#projectnumber).
	// This field is deprecated, use name instead.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The name of the Google Compute Engine
	// [zone](/compute/docs/zones#available) in which the cluster
	// resides.
	// This field is deprecated, use name instead.
	Zone string `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
	// The name of the cluster.
	// This field is deprecated, use name instead.
	ClusterId string `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The labels to set for that cluster.
	ResourceLabels map[string]string `protobuf:"bytes,4,rep,name=resource_labels,json=resourceLabels" json:"resource_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The fingerprint of the previous set of labels for this resource,
	// used to detect conflicts. The fingerprint is initially generated by
	// Container Engine and changes after every request to modify or update
	// labels. You must always provide an up-to-date fingerprint hash when
	// updating or changing labels. Make a <code>get()</code> request to the
	// resource to get the latest fingerprint.
	LabelFingerprint string `protobuf:"bytes,5,opt,name=label_fingerprint,json=labelFingerprint,proto3" json:"label_fingerprint,omitempty"`
	// The name (project, location, cluster id) of the cluster to set labels.
	// Specified in the format 'projects/*/locations/*/clusters/*'.
	Name string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *SetLabelsRequest) Reset()                    { *m = SetLabelsRequest{} }
func (m *SetLabelsRequest) String() string            { return proto.CompactTextString(m) }
func (*SetLabelsRequest) ProtoMessage()               {}
func (*SetLabelsRequest) Descriptor() ([]byte, []int) { return fileDescriptorClusterService, []int{43} }

func (m *SetLabelsRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *SetLabelsRequest) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *SetLabelsRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *SetLabelsRequest) GetResourceLabels() map[string]string {
	if m != nil {
		return m.ResourceLabels
	}
	return nil
}

func (m *SetLabelsRequest) GetLabelFingerprint() string {
	if m != nil {
		return m.LabelFingerprint
	}
	return ""
}

func (m *SetLabelsRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// SetLegacyAbacRequest enables or disables the ABAC authorization mechanism for
// a cluster.
type SetLegacyAbacRequest struct {
	// The Google Developers Console [project ID or project
	// number](https://support.google.com/cloud/answer/6158840).
	// This field is deprecated, use name instead.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The name of the Google Compute Engine
	// [zone](/compute/docs/zones#available) in which the cluster
	// resides.
	// This field is deprecated, use name instead.
	Zone string `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
	// The name of the cluster to update.
	// This field is deprecated, use name instead.
	ClusterId string `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Whether ABAC authorization will be enabled in the cluster.
	Enabled bool `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// The name (project, location, cluster id) of the cluster to set legacy abac.
	// Specified in the format 'projects/*/locations/*/clusters/*'.
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *SetLegacyAbacRequest) Reset()         { *m = SetLegacyAbacRequest{} }
func (m *SetLegacyAbacRequest) String() string { return proto.CompactTextString(m) }
func (*SetLegacyAbacRequest) ProtoMessage()    {}
func (*SetLegacyAbacRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorClusterService, []int{44}
}

func (m *SetLegacyAbacRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *SetLegacyAbacRequest) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *SetLegacyAbacRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *SetLegacyAbacRequest) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *SetLegacyAbacRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// StartIPRotationRequest creates a new IP for the cluster and then performs
// a node upgrade on each node pool to point to the new IP.
type StartIPRotationRequest struct {
	// The Google Developers Console [project ID or project
	// number](https://developers.google.com/console/help/new/#projectnumber).
	// This field is deprecated, use name instead.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The name of the Google Compute Engine
	// [zone](/compute/docs/zones#available) in which the cluster
	// resides.
	// This field is deprecated, use name instead.
	Zone string `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
	// The name of the cluster.
	// This field is deprecated, use name instead.
	ClusterId string `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The name (project, location, cluster id) of the cluster to start IP rotation.
	// Specified in the format 'projects/*/locations/*/clusters/*'.
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *StartIPRotationRequest) Reset()         { *m = StartIPRotationRequest{} }
func (m *StartIPRotationRequest) String() string { return proto.CompactTextString(m) }
func (*StartIPRotationRequest) ProtoMessage()    {}
func (*StartIPRotationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorClusterService, []int{45}
}

func (m *StartIPRotationRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *StartIPRotationRequest) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *StartIPRotationRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *StartIPRotationRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// CompleteIPRotationRequest moves the cluster master back into single-IP mode.
type CompleteIPRotationRequest struct {
	// The Google Developers Console [project ID or project
	// number](https://developers.google.com/console/help/new/#projectnumber).
	// This field is deprecated, use name instead.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The name of the Google Compute Engine
	// [zone](/compute/docs/zones#available) in which the cluster
	// resides.
	// This field is deprecated, use name instead.
	Zone string `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
	// The name of the cluster.
	// This field is deprecated, use name instead.
	ClusterId string `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The name (project, location, cluster id) of the cluster to complete IP rotation.
	// Specified in the format 'projects/*/locations/*/clusters/*'.
	Name string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *CompleteIPRotationRequest) Reset()         { *m = CompleteIPRotationRequest{} }
func (m *CompleteIPRotationRequest) String() string { return proto.CompactTextString(m) }
func (*CompleteIPRotationRequest) ProtoMessage()    {}
func (*CompleteIPRotationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorClusterService, []int{46}
}

func (m *CompleteIPRotationRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *CompleteIPRotationRequest) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *CompleteIPRotationRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *CompleteIPRotationRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// AcceleratorConfig represents a Hardware Accelerator request.
type AcceleratorConfig struct {
	// The number of the accelerator cards exposed to an instance.
	AcceleratorCount int64 `protobuf:"varint,1,opt,name=accelerator_count,json=acceleratorCount,proto3" json:"accelerator_count,omitempty"`
	// The accelerator type resource name. List of supported accelerators
	// [here](/compute/docs/gpus/#Introduction)
	AcceleratorType string `protobuf:"bytes,2,opt,name=accelerator_type,json=acceleratorType,proto3" json:"accelerator_type,omitempty"`
}

func (m *AcceleratorConfig) Reset()                    { *m = AcceleratorConfig{} }
func (m *AcceleratorConfig) String() string            { return proto.CompactTextString(m) }
func (*AcceleratorConfig) ProtoMessage()               {}
func (*AcceleratorConfig) Descriptor() ([]byte, []int) { return fileDescriptorClusterService, []int{47} }

func (m *AcceleratorConfig) GetAcceleratorCount() int64 {
	if m != nil {
		return m.AcceleratorCount
	}
	return 0
}

func (m *AcceleratorConfig) GetAcceleratorType() string {
	if m != nil {
		return m.AcceleratorType
	}
	return ""
}

// SetNetworkPolicyRequest enables/disables network policy for a cluster.
type SetNetworkPolicyRequest struct {
	// The Google Developers Console [project ID or project
	// number](https://developers.google.com/console/help/new/#projectnumber).
	// This field is deprecated, use name instead.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The name of the Google Compute Engine
	// [zone](/compute/docs/zones#available) in which the cluster
	// resides.
	// This field is deprecated, use name instead.
	Zone string `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
	// The name of the cluster.
	// This field is deprecated, use name instead.
	ClusterId string `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Configuration options for the NetworkPolicy feature.
	NetworkPolicy *NetworkPolicy `protobuf:"bytes,4,opt,name=network_policy,json=networkPolicy" json:"network_policy,omitempty"`
	// The name (project, location, cluster id) of the cluster to set networking policy.
	// Specified in the format 'projects/*/locations/*/clusters/*'.
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *SetNetworkPolicyRequest) Reset()         { *m = SetNetworkPolicyRequest{} }
func (m *SetNetworkPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*SetNetworkPolicyRequest) ProtoMessage()    {}
func (*SetNetworkPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorClusterService, []int{48}
}

func (m *SetNetworkPolicyRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *SetNetworkPolicyRequest) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *SetNetworkPolicyRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *SetNetworkPolicyRequest) GetNetworkPolicy() *NetworkPolicy {
	if m != nil {
		return m.NetworkPolicy
	}
	return nil
}

func (m *SetNetworkPolicyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// SetMaintenancePolicyRequest sets the maintenance policy for a cluster.
type SetMaintenancePolicyRequest struct {
	// The Google Developers Console [project ID or project
	// number](https://support.google.com/cloud/answer/6158840).
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The name of the Google Compute Engine
	// [zone](/compute/docs/zones#available) in which the cluster
	// resides.
	Zone string `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
	// The name of the cluster to update.
	ClusterId string `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The maintenance policy to be set for the cluster. An empty field
	// clears the existing maintenance policy.
	MaintenancePolicy *MaintenancePolicy `protobuf:"bytes,4,opt,name=maintenance_policy,json=maintenancePolicy" json:"maintenance_policy,omitempty"`
	// The name (project, location, cluster id) of the cluster to set maintenance
	// policy.
	// Specified in the format 'projects/*/locations/*/clusters/*'.
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *SetMaintenancePolicyRequest) Reset()         { *m = SetMaintenancePolicyRequest{} }
func (m *SetMaintenancePolicyRequest) String() string { return proto.CompactTextString(m) }
func (*SetMaintenancePolicyRequest) ProtoMessage()    {}
func (*SetMaintenancePolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorClusterService, []int{49}
}

func (m *SetMaintenancePolicyRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *SetMaintenancePolicyRequest) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *SetMaintenancePolicyRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *SetMaintenancePolicyRequest) GetMaintenancePolicy() *MaintenancePolicy {
	if m != nil {
		return m.MaintenancePolicy
	}
	return nil
}

func (m *SetMaintenancePolicyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*NodeConfig)(nil), "google.container.v1beta1.NodeConfig")
	proto.RegisterType((*NodeTaint)(nil), "google.container.v1beta1.NodeTaint")
	proto.RegisterType((*MasterAuth)(nil), "google.container.v1beta1.MasterAuth")
	proto.RegisterType((*ClientCertificateConfig)(nil), "google.container.v1beta1.ClientCertificateConfig")
	proto.RegisterType((*AddonsConfig)(nil), "google.container.v1beta1.AddonsConfig")
	proto.RegisterType((*HttpLoadBalancing)(nil), "google.container.v1beta1.HttpLoadBalancing")
	proto.RegisterType((*HorizontalPodAutoscaling)(nil), "google.container.v1beta1.HorizontalPodAutoscaling")
	proto.RegisterType((*KubernetesDashboard)(nil), "google.container.v1beta1.KubernetesDashboard")
	proto.RegisterType((*NetworkPolicyConfig)(nil), "google.container.v1beta1.NetworkPolicyConfig")
	proto.RegisterType((*MasterAuthorizedNetworksConfig)(nil), "google.container.v1beta1.MasterAuthorizedNetworksConfig")
	proto.RegisterType((*MasterAuthorizedNetworksConfig_CidrBlock)(nil), "google.container.v1beta1.MasterAuthorizedNetworksConfig.CidrBlock")
	proto.RegisterType((*NetworkPolicy)(nil), "google.container.v1beta1.NetworkPolicy")
	proto.RegisterType((*IPAllocationPolicy)(nil), "google.container.v1beta1.IPAllocationPolicy")
	proto.RegisterType((*PodSecurityPolicyConfig)(nil), "google.container.v1beta1.PodSecurityPolicyConfig")
	proto.RegisterType((*Cluster)(nil), "google.container.v1beta1.Cluster")
	proto.RegisterType((*ClusterUpdate)(nil), "google.container.v1beta1.ClusterUpdate")
	proto.RegisterType((*Operation)(nil), "google.container.v1beta1.Operation")
	proto.RegisterType((*CreateClusterRequest)(nil), "google.container.v1beta1.CreateClusterRequest")
	proto.RegisterType((*GetClusterRequest)(nil), "google.container.v1beta1.GetClusterRequest")
	proto.RegisterType((*UpdateClusterRequest)(nil), "google.container.v1beta1.UpdateClusterRequest")
	proto.RegisterType((*SetMasterAuthRequest)(nil), "google.container.v1beta1.SetMasterAuthRequest")
	proto.RegisterType((*DeleteClusterRequest)(nil), "google.container.v1beta1.DeleteClusterRequest")
	proto.RegisterType((*ListClustersRequest)(nil), "google.container.v1beta1.ListClustersRequest")
	proto.RegisterType((*ListClustersResponse)(nil), "google.container.v1beta1.ListClustersResponse")
	proto.RegisterType((*GetOperationRequest)(nil), "google.container.v1beta1.GetOperationRequest")
	proto.RegisterType((*ListOperationsRequest)(nil), "google.container.v1beta1.ListOperationsRequest")
	proto.RegisterType((*CancelOperationRequest)(nil), "google.container.v1beta1.CancelOperationRequest")
	proto.RegisterType((*ListOperationsResponse)(nil), "google.container.v1beta1.ListOperationsResponse")
	proto.RegisterType((*GetServerConfigRequest)(nil), "google.container.v1beta1.GetServerConfigRequest")
	proto.RegisterType((*ServerConfig)(nil), "google.container.v1beta1.ServerConfig")
	proto.RegisterType((*CreateNodePoolRequest)(nil), "google.container.v1beta1.CreateNodePoolRequest")
	proto.RegisterType((*DeleteNodePoolRequest)(nil), "google.container.v1beta1.DeleteNodePoolRequest")
	proto.RegisterType((*ListNodePoolsRequest)(nil), "google.container.v1beta1.ListNodePoolsRequest")
	proto.RegisterType((*GetNodePoolRequest)(nil), "google.container.v1beta1.GetNodePoolRequest")
	proto.RegisterType((*NodePool)(nil), "google.container.v1beta1.NodePool")
	proto.RegisterType((*NodeManagement)(nil), "google.container.v1beta1.NodeManagement")
	proto.RegisterType((*AutoUpgradeOptions)(nil), "google.container.v1beta1.AutoUpgradeOptions")
	proto.RegisterType((*MaintenancePolicy)(nil), "google.container.v1beta1.MaintenancePolicy")
	proto.RegisterType((*MaintenanceWindow)(nil), "google.container.v1beta1.MaintenanceWindow")
	proto.RegisterType((*DailyMaintenanceWindow)(nil), "google.container.v1beta1.DailyMaintenanceWindow")
	proto.RegisterType((*SetNodePoolManagementRequest)(nil), "google.container.v1beta1.SetNodePoolManagementRequest")
	proto.RegisterType((*RollbackNodePoolUpgradeRequest)(nil), "google.container.v1beta1.RollbackNodePoolUpgradeRequest")
	proto.RegisterType((*ListNodePoolsResponse)(nil), "google.container.v1beta1.ListNodePoolsResponse")
	proto.RegisterType((*NodePoolAutoscaling)(nil), "google.container.v1beta1.NodePoolAutoscaling")
	proto.RegisterType((*SetLabelsRequest)(nil), "google.container.v1beta1.SetLabelsRequest")
	proto.RegisterType((*SetLegacyAbacRequest)(nil), "google.container.v1beta1.SetLegacyAbacRequest")
	proto.RegisterType((*StartIPRotationRequest)(nil), "google.container.v1beta1.StartIPRotationRequest")
	proto.RegisterType((*CompleteIPRotationRequest)(nil), "google.container.v1beta1.CompleteIPRotationRequest")
	proto.RegisterType((*AcceleratorConfig)(nil), "google.container.v1beta1.AcceleratorConfig")
	proto.RegisterType((*SetNetworkPolicyRequest)(nil), "google.container.v1beta1.SetNetworkPolicyRequest")
	proto.RegisterType((*SetMaintenancePolicyRequest)(nil), "google.container.v1beta1.SetMaintenancePolicyRequest")
	proto.RegisterEnum("google.container.v1beta1.NodeTaint_Effect", NodeTaint_Effect_name, NodeTaint_Effect_value)
	proto.RegisterEnum("google.container.v1beta1.NetworkPolicy_Provider", NetworkPolicy_Provider_name, NetworkPolicy_Provider_value)
	proto.RegisterEnum("google.container.v1beta1.Cluster_Status", Cluster_Status_name, Cluster_Status_value)
	proto.RegisterEnum("google.container.v1beta1.Operation_Status", Operation_Status_name, Operation_Status_value)
	proto.RegisterEnum("google.container.v1beta1.Operation_Type", Operation_Type_name, Operation_Type_value)
	proto.RegisterEnum("google.container.v1beta1.SetMasterAuthRequest_Action", SetMasterAuthRequest_Action_name, SetMasterAuthRequest_Action_value)
	proto.RegisterEnum("google.container.v1beta1.NodePool_Status", NodePool_Status_name, NodePool_Status_value)
}

func init() {
	proto.RegisterFile("google/container/v1beta1/cluster_service.proto", fileDescriptorClusterService)
}

var fileDescriptorClusterService = []byte{
	// 4349 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5b, 0x5b, 0x6c, 0xe3, 0x56,
	0x7a, 0x5e, 0xfa, 0x22, 0x5b, 0xbf, 0x64, 0x59, 0x3e, 0xbe, 0x29, 0xca, 0x64, 0x32, 0x61, 0xb2,
	0xc9, 0xc4, 0x49, 0xec, 0xb9, 0x24, 0xd3, 0xec, 0x24, 0x69, 0x2a, 0xcb, 0x1c, 0x5b, 0x1d, 0x5b,
	0x52, 0x29, 0x79, 0x66, 0x33, 0x0d, 0xca, 0xa5, 0xc9, 0x63, 0x99, 0x6b, 0x8a, 0xe4, 0x92, 0xd4,
	0x4c, 0x3c, 0xdb, 0xb4, 0xdd, 0x6d, 0xdf, 0xfa, 0xd6, 0x02, 0xed, 0x4b, 0xd1, 0x00, 0x5b, 0xa0,
	0x48, 0x6f, 0xc0, 0xbe, 0xb4, 0x8b, 0x3e, 0x14, 0x05, 0x0a, 0xf4, 0xa5, 0x2d, 0x50, 0xb4, 0x7d,
	0x2c, 0x8a, 0xbe, 0xec, 0x73, 0xdb, 0xe7, 0x16, 0x05, 0x8a, 0x73, 0x21, 0x45, 0x4a, 0x14, 0x25,
	0xdb, 0xeb, 0x74, 0xdf, 0xc4, 0xff, 0x9c, 0xff, 0x9c, 0xef, 0xfc, 0xfc, 0xef, 0x3c, 0x82, 0xcd,
	0x8e, 0x6d, 0x77, 0x4c, 0xbc, 0xa5, 0xd9, 0x96, 0xaf, 0x1a, 0x16, 0x76, 0xb7, 0x9e, 0xde, 0x3e,
	0xc2, 0xbe, 0x7a, 0x7b, 0x4b, 0x33, 0x7b, 0x9e, 0x8f, 0x5d, 0xc5, 0xc3, 0xee, 0x53, 0x43, 0xc3,
	0x9b, 0x8e, 0x6b, 0xfb, 0x36, 0x2a, 0xb1, 0xf9, 0x9b, 0xe1, 0xfc, 0x4d, 0x3e, 0xbf, 0x7c, 0x8d,
	0xaf, 0xa4, 0x3a, 0xc6, 0x96, 0x6a, 0x59, 0xb6, 0xaf, 0xfa, 0x86, 0x6d, 0x79, 0x8c, 0xaf, 0xfc,
	0x22, 0x1f, 0xa5, 0x4f, 0x47, 0xbd, 0xe3, 0x2d, 0xdc, 0x75, 0xfc, 0x33, 0x36, 0x28, 0xfe, 0x78,
	0x16, 0xa0, 0x6e, 0xeb, 0xb8, 0x6a, 0x5b, 0xc7, 0x46, 0x07, 0xbd, 0x02, 0xf9, 0xae, 0xaa, 0x9d,
	0x18, 0x16, 0x56, 0xfc, 0x33, 0x07, 0x97, 0x84, 0x1b, 0xc2, 0xcd, 0xac, 0x9c, 0xe3, 0xb4, 0xf6,
	0x99, 0x83, 0xd1, 0x0d, 0xc8, 0xeb, 0x86, 0x77, 0xaa, 0x78, 0xc6, 0x73, 0xac, 0x74, 0x8e, 0x4a,
	0x53, 0x37, 0x84, 0x9b, 0xb3, 0x32, 0x10, 0x5a, 0xcb, 0x78, 0x8e, 0x77, 0x8f, 0xc8, 0x22, 0xb6,
	0xda, 0xf3, 0x4f, 0x14, 0x4f, 0xb3, 0x1d, 0xec, 0x95, 0xa6, 0x6f, 0x4c, 0x93, 0x45, 0x28, 0xad,
	0x45, 0x49, 0xe8, 0x0d, 0x58, 0xe4, 0x87, 0x53, 0x54, 0x4d, 0xb3, 0x7b, 0x96, 0x5f, 0xca, 0xd2,
	0xad, 0x0a, 0x9c, 0x5c, 0x61, 0x54, 0x54, 0x87, 0xf9, 0x2e, 0xf6, 0x55, 0x5d, 0xf5, 0xd5, 0xd2,
	0xcc, 0x8d, 0xe9, 0x9b, 0xb9, 0x3b, 0x77, 0x36, 0x47, 0xc9, 0x61, 0xb3, 0x7f, 0x90, 0xcd, 0x03,
	0xce, 0x24, 0x59, 0xbe, 0x7b, 0x26, 0x87, 0x6b, 0xa0, 0x97, 0x00, 0x8c, 0xae, 0xda, 0xe1, 0xc7,
	0x9b, 0xa5, 0x7b, 0x66, 0x29, 0x85, 0x1e, 0x6e, 0x0f, 0x32, 0xa6, 0x7a, 0x84, 0x4d, 0xaf, 0x94,
	0xa1, 0x9b, 0xdd, 0x9a, 0x68, 0xb3, 0x7d, 0xca, 0xc2, 0xb6, 0xe2, 0xfc, 0xe8, 0x75, 0x58, 0x34,
	0x6d, 0x4d, 0x35, 0x15, 0xcf, 0xd3, 0x15, 0x76, 0xc2, 0x39, 0x2a, 0xa9, 0x05, 0x4a, 0x6e, 0x79,
	0x7a, 0x95, 0x1e, 0x10, 0xc1, 0x8c, 0xaf, 0x76, 0xbc, 0xd2, 0x3c, 0x15, 0x12, 0xfd, 0x8d, 0x6e,
	0x40, 0xce, 0x71, 0x31, 0x79, 0x4d, 0xc6, 0x91, 0x89, 0x4b, 0x70, 0x43, 0xb8, 0x39, 0x2f, 0x47,
	0x49, 0xa8, 0x01, 0x79, 0x55, 0xd3, 0xb0, 0x89, 0x5d, 0xd5, 0xb7, 0x5d, 0xaf, 0x94, 0xa3, 0x68,
	0xdf, 0x1a, 0x8d, 0xb6, 0xd2, 0x9f, 0xcd, 0x40, 0xcb, 0xb1, 0x05, 0xd0, 0x4d, 0x28, 0x76, 0x0d,
	0x4b, 0xd1, 0x9c, 0x9e, 0xe2, 0x98, 0xaa, 0x7f, 0x6c, 0xbb, 0xdd, 0xd2, 0x02, 0x7b, 0x23, 0x5d,
	0xc3, 0xaa, 0x3a, 0xbd, 0x26, 0xa7, 0xa2, 0x0f, 0x20, 0x43, 0xd6, 0xf6, 0xbd, 0xd2, 0x22, 0xdd,
	0xf4, 0xd5, 0x74, 0x11, 0xb5, 0xc9, 0x5c, 0x99, 0xb3, 0x94, 0x3f, 0x80, 0x85, 0xd8, 0x9b, 0x41,
	0x45, 0x98, 0x3e, 0xc5, 0x67, 0x5c, 0xcf, 0xc8, 0x4f, 0xb4, 0x02, 0xb3, 0x4f, 0x55, 0xb3, 0x87,
	0xa9, 0x62, 0x65, 0x65, 0xf6, 0x70, 0x7f, 0xea, 0x7d, 0xa1, 0xfc, 0x0d, 0xc8, 0x45, 0x24, 0x7d,
	0x1e, 0x56, 0xf1, 0x9f, 0x05, 0xc8, 0x86, 0x68, 0x26, 0xe5, 0x44, 0xdb, 0x90, 0xc1, 0xc7, 0xc7,
	0x58, 0xf3, 0x4b, 0xd3, 0x37, 0x84, 0x9b, 0x85, 0x3b, 0x1b, 0x13, 0x1c, 0x75, 0x53, 0xa2, 0x1c,
	0x32, 0xe7, 0x14, 0x3f, 0x81, 0x0c, 0xa3, 0xa0, 0x35, 0x40, 0xd2, 0x83, 0x07, 0x52, 0xb5, 0xad,
	0x1c, 0xd6, 0x5b, 0x4d, 0xa9, 0x5a, 0x7b, 0x50, 0x93, 0x76, 0x8a, 0x5f, 0x43, 0x8b, 0x90, 0xab,
	0x37, 0x94, 0x56, 0x75, 0x4f, 0xda, 0x39, 0xdc, 0x97, 0x8a, 0x02, 0x99, 0xd8, 0x94, 0xa5, 0x07,
	0x92, 0xac, 0x44, 0xe9, 0x53, 0xa8, 0x00, 0x50, 0x6f, 0x28, 0xd2, 0x37, 0xa5, 0xea, 0x61, 0x5b,
	0x2a, 0x4e, 0x8b, 0x3f, 0x9a, 0x02, 0x38, 0x50, 0x89, 0xa7, 0xa8, 0xf4, 0xfc, 0x13, 0x54, 0x86,
	0xf9, 0x9e, 0x87, 0x5d, 0x4b, 0xed, 0x06, 0x76, 0x1b, 0x3e, 0x93, 0x31, 0x47, 0xf5, 0xbc, 0x67,
	0xb6, 0xab, 0xf3, 0x23, 0x86, 0xcf, 0xa8, 0x0b, 0x2f, 0x68, 0xa6, 0x81, 0x2d, 0x5f, 0xd1, 0xb0,
	0xeb, 0x1b, 0xc7, 0x86, 0xa6, 0xfa, 0x58, 0xd1, 0xa8, 0x96, 0xd0, 0x83, 0xe7, 0xee, 0xdc, 0x1e,
	0x7d, 0xf0, 0x2a, 0x65, 0xad, 0xf6, 0x39, 0xb9, 0x7a, 0xad, 0x6b, 0xc9, 0x03, 0xe8, 0x5d, 0x58,
	0x0b, 0xfc, 0x9b, 0xa6, 0x46, 0xb7, 0x2c, 0xe9, 0x14, 0xd8, 0x0a, 0x1f, 0xad, 0xaa, 0x11, 0x5e,
	0xf4, 0x0e, 0xa0, 0x61, 0x90, 0x25, 0x4c, 0x39, 0x96, 0x86, 0xb6, 0x22, 0x66, 0xce, 0xa7, 0x93,
	0x17, 0x7d, 0xcc, 0xcc, 0x9c, 0x51, 0x1e, 0xe2, 0x33, 0xb1, 0x05, 0xeb, 0x23, 0x70, 0xa3, 0xf7,
	0xa1, 0x64, 0x78, 0x5e, 0x0f, 0x2b, 0x09, 0xdb, 0x09, 0xd4, 0x10, 0xd7, 0xe8, 0xf8, 0x10, 0xbf,
	0xf8, 0x83, 0x69, 0xc8, 0x57, 0x74, 0xdd, 0xb6, 0x3c, 0xbe, 0xd4, 0x2f, 0xc2, 0xf2, 0x89, 0xef,
	0x3b, 0x8a, 0x69, 0xab, 0xba, 0x72, 0xa4, 0x9a, 0xaa, 0xa5, 0x19, 0x56, 0x87, 0xae, 0x92, 0x6a,
	0xab, 0x7b, 0xbe, 0xef, 0xec, 0xdb, 0xaa, 0xbe, 0x1d, 0xb0, 0xc8, 0x4b, 0x27, 0x83, 0x24, 0xe4,
	0x40, 0xf9, 0xc4, 0x76, 0x8d, 0xe7, 0x84, 0xdb, 0x54, 0x1c, 0x5b, 0x57, 0xd4, 0x9e, 0x6f, 0x7b,
	0x9a, 0x6a, 0x92, 0x3d, 0xa6, 0xe8, 0x1e, 0x29, 0xae, 0x72, 0x2f, 0xe4, 0x6d, 0xda, 0x7a, 0xa5,
	0xcf, 0x29, 0x97, 0x4e, 0x46, 0x8c, 0xa0, 0x6f, 0xc1, 0xca, 0x69, 0xef, 0x08, 0xbb, 0x16, 0xf6,
	0xb1, 0xa7, 0xe8, 0xaa, 0x77, 0x72, 0x64, 0xab, 0xae, 0xce, 0x55, 0xe4, 0x9d, 0xd1, 0x7b, 0x3d,
	0x0c, 0xb9, 0x76, 0x02, 0x26, 0x79, 0xf9, 0x74, 0x98, 0x88, 0x54, 0x58, 0xb5, 0xb0, 0xff, 0xcc,
	0x76, 0x4f, 0x15, 0xc7, 0x36, 0x0d, 0xed, 0x2c, 0xd0, 0xc2, 0x99, 0x71, 0x5b, 0xd4, 0x19, 0x5b,
	0x93, 0x72, 0x71, 0x0d, 0x5c, 0xb6, 0x86, 0x89, 0xe2, 0x16, 0x2c, 0x0d, 0x89, 0x97, 0x58, 0x87,
	0x6e, 0x78, 0xea, 0x91, 0x89, 0x75, 0xfe, 0x8e, 0xc3, 0x67, 0xf1, 0x1e, 0x94, 0x46, 0xc9, 0x2a,
	0x95, 0xef, 0x36, 0x2c, 0x27, 0x9c, 0x7b, 0x1c, 0x4b, 0xc2, 0x39, 0x52, 0x59, 0xfe, 0x43, 0x80,
	0xeb, 0x7d, 0x17, 0x40, 0x70, 0x62, 0x9d, 0xaf, 0x11, 0x68, 0x61, 0x09, 0xe6, 0xb0, 0x15, 0xe5,
	0x0e, 0x1e, 0x91, 0x06, 0x39, 0xcd, 0xd0, 0x5d, 0xe5, 0xc8, 0xb4, 0xb5, 0x53, 0xaf, 0x34, 0x45,
	0xdd, 0xf9, 0xf6, 0x68, 0x21, 0xa7, 0x6f, 0xb4, 0x59, 0x35, 0x74, 0x77, 0x9b, 0x2c, 0x25, 0x83,
	0x16, 0xfc, 0xf4, 0xca, 0x07, 0x90, 0x0d, 0x07, 0x48, 0x66, 0xa0, 0x1b, 0x9e, 0x63, 0xaa, 0x67,
	0x4a, 0xc4, 0x4d, 0xe5, 0x38, 0xad, 0x4e, 0x3c, 0x15, 0xb1, 0xdc, 0x10, 0x14, 0xf7, 0x55, 0xd9,
	0x70, 0x3d, 0xf1, 0x8f, 0x04, 0x58, 0x88, 0x09, 0x09, 0xed, 0xc3, 0xbc, 0xe3, 0xda, 0x4f, 0x0d,
	0x1d, 0xbb, 0x74, 0xbd, 0x42, 0x6a, 0xd0, 0x8e, 0xb2, 0x6e, 0x36, 0x39, 0x9f, 0x1c, 0xae, 0x10,
	0x95, 0xd6, 0x54, 0x4c, 0x5a, 0xe2, 0x2d, 0x98, 0x6f, 0xf6, 0x67, 0xad, 0x34, 0xe5, 0xc6, 0xa3,
	0xda, 0x8e, 0x24, 0x0f, 0x38, 0x73, 0x80, 0x4c, 0xb5, 0xb2, 0x5f, 0xab, 0x36, 0x8a, 0x82, 0xf8,
	0xe7, 0x33, 0x80, 0x6a, 0xcd, 0x8a, 0x49, 0x02, 0x3e, 0x49, 0xc8, 0x38, 0xe0, 0xd7, 0xa0, 0xd0,
	0xf3, 0xb0, 0x62, 0x38, 0x8a, 0x6a, 0x1a, 0xaa, 0x87, 0x3d, 0xfe, 0x5e, 0xf2, 0x3d, 0x0f, 0xd7,
	0x9c, 0x0a, 0xa3, 0xa1, 0xb7, 0x60, 0x49, 0x73, 0x31, 0xf1, 0xc4, 0x5e, 0xef, 0x88, 0x6b, 0x32,
	0x87, 0x54, 0x64, 0x03, 0xad, 0x90, 0x4e, 0xd3, 0xa9, 0xf0, 0x89, 0x89, 0x76, 0x9a, 0xa7, 0x53,
	0x21, 0x99, 0x4a, 0x77, 0x03, 0x96, 0x02, 0xe7, 0x6b, 0x38, 0x4f, 0xdf, 0x55, 0x88, 0x60, 0xa9,
	0x75, 0x65, 0xe5, 0x45, 0x3e, 0x50, 0x73, 0x9e, 0xbe, 0x4b, 0xde, 0x18, 0xc1, 0x69, 0xd9, 0x3a,
	0x8e, 0x4c, 0x64, 0xe9, 0x52, 0x9e, 0x50, 0xc3, 0x59, 0x6f, 0x03, 0xe2, 0x29, 0x9b, 0x17, 0x99,
	0x99, 0xa1, 0x33, 0x8b, 0xc1, 0x48, 0x38, 0xfb, 0x63, 0xb8, 0xd6, 0x4f, 0x6e, 0x35, 0xdb, 0xd2,
	0x55, 0xf7, 0x4c, 0x71, 0x55, 0xab, 0x83, 0x19, 0xea, 0x39, 0xca, 0xf7, 0x02, 0x9f, 0xd3, 0x0a,
	0xa6, 0xc8, 0x64, 0x06, 0x3d, 0x40, 0x05, 0x5e, 0x0a, 0xb7, 0x4b, 0x5c, 0x61, 0x9e, 0xae, 0x50,
	0x0e, 0x26, 0x25, 0x2c, 0xf1, 0x1e, 0xac, 0x0f, 0xc9, 0x80, 0xab, 0x5b, 0x36, 0x16, 0x81, 0x02,
	0xd4, 0x4c, 0x77, 0xb7, 0x60, 0x25, 0x2e, 0x0e, 0xce, 0x03, 0x2c, 0x06, 0x45, 0x85, 0xc2, 0x18,
	0x7e, 0x06, 0x4a, 0xc3, 0x92, 0xe1, 0x4c, 0x39, 0xca, 0xb4, 0x3a, 0x28, 0x1f, 0xa6, 0xe3, 0x77,
	0x61, 0xbd, 0x69, 0xeb, 0x2d, 0xac, 0xf5, 0x5c, 0xc3, 0x3f, 0x8b, 0xf9, 0x82, 0x91, 0xc6, 0x2c,
	0xfe, 0x4f, 0x01, 0xe6, 0xaa, 0x0c, 0x37, 0xc9, 0x29, 0x23, 0xe6, 0x45, 0x7f, 0x93, 0x9c, 0x52,
	0xc7, 0x9e, 0xe6, 0x1a, 0x0e, 0x51, 0x45, 0x6e, 0x58, 0x51, 0x12, 0x79, 0x93, 0x86, 0x65, 0xf8,
	0x86, 0x6a, 0x2a, 0xf4, 0xa0, 0x2c, 0x69, 0x9d, 0xa6, 0x49, 0x6b, 0x91, 0x8f, 0xb0, 0xa4, 0x97,
	0xe4, 0xad, 0x12, 0xe4, 0xf8, 0xac, 0x88, 0x87, 0x7e, 0x6d, 0x92, 0x74, 0x59, 0x06, 0xab, 0x5f,
	0x70, 0x48, 0x90, 0xeb, 0x52, 0xb7, 0x42, 0xc2, 0xd7, 0x09, 0xd5, 0xb0, 0xd4, 0x65, 0xfa, 0x3e,
	0x48, 0x86, 0x6e, 0x3f, 0xf7, 0x79, 0x83, 0x64, 0xdb, 0x9d, 0x8e, 0x61, 0x75, 0x82, 0xa2, 0x89,
	0xab, 0x60, 0x81, 0x93, 0x5b, 0x8c, 0x4a, 0xf2, 0x88, 0xae, 0x6d, 0x19, 0xbe, 0xed, 0x46, 0xe7,
	0x32, 0xb5, 0x5b, 0xea, 0x8f, 0x04, 0xd3, 0x4b, 0x30, 0x17, 0xd8, 0x1e, 0x53, 0xac, 0xe0, 0x31,
	0xd9, 0x92, 0xb2, 0xc9, 0x96, 0xf4, 0x10, 0x16, 0x54, 0x9a, 0x18, 0x04, 0xd2, 0x02, 0x7a, 0xcc,
	0xd7, 0x53, 0xd2, 0xf5, 0x48, 0x1e, 0x21, 0xe7, 0xd5, 0x68, 0x56, 0x71, 0x1d, 0x20, 0xe2, 0x11,
	0x98, 0x22, 0x45, 0x28, 0xa8, 0x02, 0x54, 0xbe, 0x8a, 0x63, 0xdb, 0xa6, 0x57, 0xca, 0x53, 0xa7,
	0x2e, 0xa6, 0xbf, 0x97, 0xa6, 0x6d, 0x9b, 0x72, 0xd6, 0xe2, 0xbf, 0x3c, 0x74, 0x0d, 0xb2, 0x81,
	0xcf, 0xf2, 0x4a, 0x0b, 0xb4, 0x30, 0xe9, 0x13, 0xd0, 0x3d, 0x58, 0x67, 0x4a, 0xa7, 0x44, 0xd2,
	0x01, 0xd5, 0x74, 0x4e, 0xd4, 0x52, 0x81, 0xea, 0xe4, 0x2a, 0x1b, 0xee, 0x87, 0xbf, 0x0a, 0x19,
	0x44, 0x75, 0x28, 0xc4, 0xa3, 0x7b, 0x69, 0x99, 0x8a, 0xe1, 0x8d, 0x09, 0xdd, 0xb5, 0xbc, 0x10,
	0x0b, 0xe8, 0xe8, 0x97, 0x60, 0x85, 0xfa, 0xd0, 0x00, 0x59, 0xb0, 0xea, 0x0a, 0x5d, 0xf5, 0xed,
	0xd1, 0xab, 0x0e, 0xfb, 0x64, 0x19, 0x19, 0xce, 0x90, 0x9f, 0xfe, 0x75, 0x01, 0x5e, 0x89, 0xe8,
	0x26, 0x8b, 0x79, 0x0a, 0xc7, 0x10, 0xbe, 0xca, 0x35, 0xba, 0xdb, 0xfb, 0x17, 0x8d, 0x9a, 0xf2,
	0xf5, 0x6e, 0x7a, 0xf8, 0x7e, 0x02, 0xa8, 0x4b, 0xea, 0x0a, 0x6c, 0xa9, 0x96, 0x86, 0x83, 0x33,
	0xae, 0x8f, 0xcb, 0x21, 0x0f, 0xfa, 0x3c, 0xfc, 0x88, 0x4b, 0xdd, 0x41, 0x12, 0xb2, 0xa0, 0x4c,
	0x12, 0x47, 0x8f, 0x7b, 0x9a, 0x81, 0xa4, 0xeb, 0x85, 0x71, 0xa9, 0xff, 0x08, 0x27, 0x25, 0xaf,
	0x3b, 0x23, 0xbc, 0xd7, 0x8b, 0x90, 0xf5, 0xb0, 0x79, 0xac, 0x98, 0x86, 0x75, 0xca, 0xb3, 0xfd,
	0x79, 0x42, 0xd8, 0x37, 0xac, 0x53, 0xe2, 0xb4, 0x9e, 0xdb, 0x56, 0x90, 0xd3, 0xd3, 0xdf, 0x24,
	0xf5, 0xc1, 0x96, 0xee, 0xd8, 0x86, 0xe5, 0xf3, 0x24, 0x3e, 0x7c, 0x26, 0x6a, 0x18, 0xb8, 0xab,
	0xc0, 0x10, 0x9f, 0x62, 0xd7, 0x23, 0xce, 0xad, 0xc3, 0xbc, 0x2b, 0x1f, 0xe6, 0x5e, 0xf1, 0x11,
	0x1b, 0xa4, 0xf5, 0x47, 0xcf, 0x75, 0x49, 0x6e, 0xcf, 0xdf, 0x6e, 0xc0, 0x76, 0xc2, 0xbd, 0x3f,
	0x1b, 0x65, 0xef, 0x2d, 0xe0, 0xba, 0x05, 0x01, 0x9d, 0x39, 0xc7, 0x80, 0xc7, 0xa0, 0x3c, 0x88,
	0x8f, 0x11, 0x63, 0x0a, 0x38, 0x5e, 0x86, 0x1c, 0x0f, 0xe0, 0xbe, 0xd1, 0xc5, 0xa5, 0x6f, 0x33,
	0x43, 0x65, 0xa4, 0xb6, 0xd1, 0xc5, 0xe8, 0xe7, 0x20, 0xe3, 0xf9, 0xaa, 0xdf, 0xf3, 0x4a, 0xa7,
	0x34, 0x6d, 0xb9, 0x99, 0x56, 0x64, 0xd1, 0x23, 0x6c, 0xb6, 0xe8, 0x7c, 0x99, 0xf3, 0xa1, 0xaf,
	0x43, 0x81, 0xfd, 0x52, 0xba, 0xd8, 0xf3, 0xd4, 0x0e, 0x2e, 0x99, 0x74, 0x97, 0x05, 0x46, 0x3d,
	0x60, 0x44, 0xf4, 0x0e, 0x2c, 0x0f, 0x44, 0x2e, 0xcf, 0x78, 0x8e, 0x4b, 0x5d, 0xe6, 0xd9, 0xa3,
	0x81, 0xab, 0x65, 0x3c, 0xc7, 0x23, 0x22, 0xba, 0x35, 0x22, 0xa2, 0x6f, 0xc2, 0xb2, 0x61, 0x79,
	0x3e, 0x55, 0xce, 0x8e, 0x6b, 0xf7, 0x1c, 0xa5, 0xe7, 0x9a, 0x5e, 0xc9, 0xa6, 0x5e, 0x63, 0x29,
	0x18, 0xda, 0x25, 0x23, 0x87, 0xae, 0xe9, 0x91, 0xd5, 0x63, 0x82, 0x64, 0x51, 0xc6, 0x61, 0x58,
	0x22, 0x62, 0x64, 0x51, 0xe6, 0x65, 0xc8, 0xe1, 0xcf, 0x1c, 0xc3, 0xe5, 0x42, 0xfc, 0x0e, 0x13,
	0x22, 0x23, 0x51, 0x21, 0x96, 0x61, 0x3e, 0x30, 0xdb, 0x92, 0xcb, 0x34, 0x24, 0x78, 0x16, 0x0d,
	0xc8, 0x30, 0x81, 0x91, 0x8a, 0xba, 0xd5, 0xae, 0xb4, 0x0f, 0x5b, 0x03, 0xd9, 0x5a, 0x11, 0xf2,
	0x34, 0x8f, 0x6b, 0xd5, 0x1a, 0xf5, 0x5a, 0x7d, 0xb7, 0x28, 0xa0, 0x1c, 0xcc, 0xc9, 0x87, 0x75,
	0xfa, 0x30, 0x45, 0x2a, 0x73, 0x59, 0xaa, 0x36, 0xea, 0xd5, 0xda, 0x3e, 0x21, 0x4c, 0xa3, 0x3c,
	0xcc, 0xb7, 0xda, 0x8d, 0x66, 0x93, 0x3c, 0xcd, 0xa0, 0x2c, 0xcc, 0x4a, 0xb2, 0xdc, 0x90, 0x8b,
	0xb3, 0xe2, 0x1f, 0x64, 0x60, 0x81, 0xbf, 0xa4, 0x43, 0x47, 0x27, 0x15, 0xe8, 0x2d, 0x58, 0xd1,
	0xb1, 0x67, 0xb8, 0xc4, 0x65, 0x44, 0x15, 0x86, 0x25, 0x5b, 0x88, 0x8f, 0x45, 0x15, 0xe6, 0x43,
	0x28, 0x07, 0x1c, 0x09, 0x21, 0x8a, 0xe5, 0x5e, 0x25, 0x3e, 0xe3, 0x60, 0x28, 0x52, 0x3d, 0x81,
	0xd5, 0x80, 0x3b, 0x1e, 0x6b, 0x32, 0xe7, 0x8a, 0x35, 0xcb, 0x7c, 0x91, 0x58, 0x21, 0xbb, 0x35,
	0x70, 0x16, 0x12, 0x5a, 0x14, 0x43, 0x0f, 0xc2, 0x66, 0xe4, 0x2c, 0x24, 0x7e, 0xd4, 0x74, 0xf2,
	0x92, 0x03, 0x86, 0x48, 0xb7, 0x8d, 0x45, 0xd0, 0x22, 0x1f, 0xa9, 0x85, 0x4d, 0x37, 0x07, 0x5e,
	0x1a, 0x5e, 0x3e, 0x5a, 0xcd, 0x66, 0xc7, 0x96, 0x7f, 0x7c, 0xeb, 0x68, 0x21, 0x5b, 0x1e, 0x80,
	0x15, 0x2d, 0xdc, 0xde, 0x82, 0x00, 0xb4, 0xd2, 0x0f, 0x74, 0x40, 0x55, 0x36, 0x80, 0xb7, 0x1f,
	0xc6, 0xbb, 0xdf, 0x12, 0xe0, 0xcd, 0xf0, 0xc5, 0x8c, 0x8d, 0x07, 0xf9, 0x4b, 0xc6, 0x83, 0xaf,
	0x07, 0x6f, 0x38, 0x3d, 0x2c, 0x7c, 0x0e, 0x62, 0x80, 0x29, 0xc5, 0x85, 0x17, 0x2e, 0xea, 0xc2,
	0xaf, 0xf3, 0xc5, 0x47, 0xe5, 0xa1, 0xef, 0xc2, 0xda, 0x80, 0x48, 0x02, 0xfd, 0xe6, 0x4d, 0x9c,
	0xd8, 0x29, 0xb8, 0x86, 0x8b, 0xff, 0x99, 0x81, 0x6c, 0xc3, 0xc1, 0x2e, 0x15, 0x6c, 0x62, 0x96,
	0x1a, 0x04, 0x81, 0xa9, 0x48, 0x10, 0x68, 0x40, 0xc1, 0x0e, 0x98, 0x98, 0x22, 0x4d, 0x8f, 0xf3,
	0x97, 0xe1, 0x26, 0x9b, 0x44, 0xc1, 0xe4, 0x85, 0x90, 0x9f, 0xea, 0xdb, 0x76, 0xe8, 0x78, 0x67,
	0xc6, 0xb5, 0xf5, 0xfa, 0x0b, 0x0d, 0xb8, 0xde, 0x35, 0xc8, 0xe8, 0xd8, 0x57, 0x0d, 0x93, 0x6b,
	0x35, 0x7f, 0x4a, 0x70, 0xc9, 0xb3, 0x49, 0x2e, 0x39, 0x16, 0x09, 0x33, 0x03, 0x91, 0xf0, 0x65,
	0xc8, 0xf9, 0xaa, 0xdb, 0xc1, 0x3e, 0x1b, 0x66, 0x56, 0x06, 0x8c, 0x44, 0x27, 0x44, 0x9d, 0x5e,
	0x36, 0xee, 0xf4, 0x48, 0xfd, 0xec, 0xf9, 0xaa, 0xeb, 0x33, 0x87, 0xc9, 0x8a, 0x93, 0x2c, 0xa5,
	0x50, 0x7f, 0xf9, 0x02, 0x8d, 0xa8, 0x6c, 0x90, 0xe5, 0x8e, 0x73, 0xd8, 0xd2, 0xc9, 0x90, 0x28,
	0x8f, 0x75, 0x97, 0x39, 0x98, 0x6b, 0x4a, 0xf5, 0x9d, 0x04, 0x4f, 0x39, 0x0f, 0x33, 0x3b, 0x8d,
	0xba, 0xc4, 0x5c, 0x64, 0x65, 0xbb, 0x21, 0xb7, 0xa9, 0x8b, 0x14, 0xff, 0x77, 0x0a, 0x66, 0xa8,
	0xcc, 0x57, 0xa0, 0xd8, 0xfe, 0xa4, 0x29, 0x0d, 0x2c, 0x88, 0xa0, 0x50, 0x95, 0xa5, 0x4a, 0x5b,
	0x52, 0xaa, 0xfb, 0x87, 0xad, 0xb6, 0x24, 0x17, 0x05, 0x42, 0xdb, 0x91, 0xf6, 0xa5, 0x08, 0x6d,
	0x8a, 0xd0, 0x0e, 0x9b, 0xbb, 0x72, 0x65, 0x47, 0x52, 0x0e, 0x2a, 0x94, 0x36, 0x8d, 0x96, 0x60,
	0x21, 0xa0, 0xd5, 0x1b, 0x3b, 0x52, 0xab, 0x38, 0x43, 0xa6, 0xc9, 0x52, 0xb3, 0x52, 0x93, 0x43,
	0xd6, 0x59, 0xc6, 0xba, 0x13, 0xdd, 0x22, 0x43, 0xc0, 0xf0, 0x6d, 0x09, 0xa7, 0xd2, 0x6c, 0x34,
	0xf6, 0x8b, 0x73, 0x84, 0xca, 0x37, 0xee, 0x53, 0xe7, 0xd1, 0x35, 0x28, 0xb5, 0xa4, 0x76, 0x9f,
	0xa4, 0x1c, 0x54, 0xea, 0x95, 0x5d, 0xe9, 0x40, 0xaa, 0xb7, 0x8b, 0x59, 0xb4, 0x0a, 0x4b, 0x95,
	0xc3, 0x76, 0x43, 0xe1, 0xdb, 0x32, 0x20, 0x40, 0x04, 0x48, 0xc9, 0x71, 0x80, 0x39, 0x54, 0x00,
	0x20, 0x8b, 0xed, 0x57, 0xb6, 0xa5, 0xfd, 0x56, 0x31, 0x8f, 0x96, 0x61, 0x91, 0x3c, 0xb3, 0x33,
	0x29, 0x95, 0xc3, 0xf6, 0x5e, 0x71, 0x81, 0x4a, 0x3f, 0xb6, 0x63, 0xab, 0xf6, 0x44, 0x2a, 0x16,
	0x42, 0xba, 0xd4, 0x7e, 0xdc, 0x90, 0x1f, 0x2a, 0xcd, 0xc6, 0x7e, 0xad, 0xfa, 0x49, 0x71, 0x11,
	0x95, 0x61, 0x8d, 0x2d, 0x52, 0xab, 0xb7, 0xa5, 0x7a, 0xa5, 0x5e, 0x95, 0x82, 0xb1, 0xa2, 0xf8,
	0xfb, 0x02, 0xac, 0x54, 0x69, 0xca, 0xc1, 0xa3, 0x93, 0x8c, 0xbf, 0xd3, 0xc3, 0x9e, 0x4f, 0xd4,
	0xc4, 0x71, 0xed, 0x6f, 0x63, 0xcd, 0x27, 0x8e, 0x9c, 0x99, 0x60, 0x96, 0x53, 0x6a, 0x7a, 0xa2,
	0x1d, 0x7e, 0x00, 0x73, 0x3c, 0xd1, 0xe2, 0x2d, 0xbf, 0x57, 0xc6, 0x26, 0x2c, 0x72, 0xc0, 0x41,
	0xec, 0xc5, 0x51, 0x49, 0x6c, 0xe7, 0xf6, 0xc0, 0x9f, 0xc4, 0x33, 0x58, 0xda, 0xc5, 0xfe, 0xe5,
	0xc1, 0xd1, 0x86, 0x2f, 0x2f, 0xc7, 0x74, 0xde, 0xfc, 0xc8, 0x06, 0x75, 0x98, 0x1e, 0xfa, 0x9a,
	0xd9, 0xbe, 0xaf, 0x11, 0xff, 0x4a, 0x80, 0x15, 0x16, 0xac, 0xaf, 0x7c, 0xfb, 0x8f, 0x21, 0xd3,
	0xa3, 0x3b, 0xf1, 0x3a, 0xf9, 0x8d, 0xb1, 0x92, 0x63, 0xc0, 0x64, 0xce, 0x96, 0x88, 0xff, 0x5f,
	0xa7, 0x60, 0xa5, 0x85, 0xfd, 0x48, 0x45, 0x7c, 0x65, 0xf8, 0x0f, 0x20, 0xa3, 0x6a, 0x7e, 0x90,
	0xbe, 0x14, 0xee, 0xbc, 0x37, 0x1a, 0x7f, 0x12, 0xa2, 0xcd, 0x0a, 0x65, 0x96, 0xf9, 0x22, 0xe8,
	0xc3, 0x50, 0x1c, 0xe7, 0xa9, 0xf7, 0x07, 0x65, 0x31, 0x17, 0x91, 0x45, 0x13, 0x32, 0x6c, 0x0f,
	0xe2, 0x96, 0x0e, 0xeb, 0x0f, 0xeb, 0x8d, 0xc7, 0x75, 0x96, 0xdf, 0x11, 0xd3, 0x68, 0x56, 0x5a,
	0xad, 0xc7, 0x0d, 0x79, 0xa7, 0x28, 0x10, 0x83, 0xdd, 0x95, 0xea, 0x92, 0x4c, 0x8c, 0x3f, 0x24,
	0x4f, 0x05, 0x13, 0x0f, 0x5b, 0x92, 0x5c, 0xaf, 0x1c, 0x48, 0xc5, 0x69, 0xf1, 0x97, 0x61, 0x65,
	0x07, 0x9b, 0xf8, 0x2b, 0x50, 0x8e, 0xe0, 0x3c, 0x33, 0x91, 0xf3, 0x7c, 0x0b, 0x96, 0xf7, 0x0d,
	0x2f, 0xb0, 0x0b, 0xef, 0x12, 0x9b, 0xf7, 0x0d, 0x6f, 0x26, 0x66, 0x78, 0xcf, 0x61, 0x25, 0xbe,
	0x83, 0xe7, 0xd8, 0x96, 0x87, 0xd1, 0x47, 0x30, 0xcf, 0xa1, 0x79, 0x25, 0x81, 0x36, 0x0f, 0x26,
	0x30, 0xf3, 0x90, 0x05, 0xbd, 0x0a, 0x0b, 0x5d, 0xc3, 0xf3, 0x48, 0xe6, 0x4a, 0xb6, 0x67, 0x5d,
	0xe5, 0xac, 0x9c, 0xe7, 0xc4, 0x27, 0x84, 0x26, 0xfe, 0x2a, 0x2c, 0xef, 0x62, 0x3f, 0x8c, 0xad,
	0x97, 0x38, 0xdd, 0x2b, 0x90, 0xef, 0xe7, 0x06, 0xa1, 0x70, 0x73, 0x21, 0x6d, 0x84, 0xe9, 0x1f,
	0xc1, 0x2a, 0x39, 0x7c, 0x88, 0xe0, 0x2a, 0x04, 0xfc, 0x7d, 0x01, 0xd6, 0xaa, 0xa4, 0xf6, 0x31,
	0xbf, 0xe2, 0x83, 0x46, 0xf5, 0x88, 0x80, 0x18, 0x3c, 0x29, 0x7f, 0xd1, 0x55, 0x80, 0x90, 0x3b,
	0x78, 0xd5, 0xaf, 0x4e, 0x90, 0x09, 0xc9, 0x11, 0xb6, 0xc9, 0x5e, 0xb7, 0x02, 0x6b, 0xbb, 0xd8,
	0x27, 0x85, 0x0a, 0x0e, 0x3e, 0x3e, 0x5f, 0x5c, 0x10, 0x49, 0xa7, 0xfc, 0x8d, 0x29, 0xc8, 0x47,
	0x97, 0x47, 0xf7, 0x60, 0x5d, 0xc7, 0xc7, 0x6a, 0xcf, 0xf4, 0x87, 0x7a, 0x03, 0x6c, 0x93, 0x55,
	0x3e, 0x3c, 0xd0, 0x1b, 0xd8, 0x84, 0xe5, 0xa7, 0xaa, 0x69, 0xc4, 0x4b, 0xb6, 0xe0, 0x02, 0xc3,
	0x12, 0x1d, 0x8a, 0x54, 0x6c, 0x1e, 0xab, 0x73, 0xd8, 0x3e, 0x91, 0x3a, 0x67, 0x26, 0xa8, 0x73,
	0xe8, 0x48, 0xbf, 0xce, 0xd9, 0x00, 0xb6, 0x44, 0x64, 0xae, 0x57, 0x9a, 0xa5, 0x6b, 0x2f, 0xd2,
	0x81, 0x70, 0xaa, 0x87, 0xee, 0xc0, 0x2a, 0x9b, 0x1b, 0x4f, 0xaf, 0xd9, 0xbd, 0x84, 0xac, 0xcc,
	0x60, 0xc6, 0xb2, 0x6b, 0x4f, 0xfc, 0x1b, 0x01, 0x56, 0x59, 0xb0, 0x0f, 0x9b, 0x7a, 0x57, 0x18,
	0xd1, 0xb2, 0x61, 0xad, 0xc6, 0x83, 0xda, 0x24, 0x4d, 0xc6, 0xf9, 0xa0, 0xc9, 0x18, 0x31, 0x9b,
	0x4c, 0xcc, 0x6c, 0xbe, 0x10, 0x60, 0x95, 0x39, 0xde, 0xab, 0x3f, 0xc4, 0x0d, 0xc8, 0xc7, 0xea,
	0x59, 0xf6, 0xe2, 0xc0, 0xea, 0x17, 0xb2, 0x81, 0xb6, 0x65, 0x22, 0xda, 0xf6, 0x6b, 0x02, 0x73,
	0x9d, 0x01, 0x3e, 0xef, 0xea, 0x00, 0x8e, 0xca, 0x9a, 0x7e, 0x4f, 0x00, 0xb4, 0x8b, 0xfd, 0x9f,
	0x56, 0x09, 0xfd, 0xf7, 0x0c, 0xcc, 0x07, 0xd8, 0x12, 0xcb, 0xbc, 0x0f, 0x21, 0xc3, 0x2b, 0xd4,
	0xa9, 0x73, 0x7c, 0x37, 0xe0, 0x3c, 0xe7, 0xfc, 0x50, 0x91, 0xda, 0x74, 0x2c, 0xc1, 0x5c, 0xe0,
	0x18, 0x58, 0xdf, 0x31, 0x78, 0x1c, 0xd5, 0xd7, 0x3a, 0x1e, 0xd5, 0xd7, 0xaa, 0x84, 0x45, 0x65,
	0x87, 0xa6, 0x48, 0x6f, 0x8e, 0xb7, 0x86, 0xf1, 0xed, 0xbc, 0x93, 0xa4, 0xda, 0xb1, 0x01, 0xb9,
	0x68, 0x73, 0x64, 0xe6, 0x22, 0xcd, 0x91, 0xe8, 0x0a, 0x68, 0x0f, 0xa0, 0xab, 0x5a, 0x6a, 0x07,
	0x77, 0x03, 0x4d, 0xcb, 0xa5, 0x15, 0xd7, 0x64, 0xbd, 0x83, 0x70, 0xbe, 0x1c, 0xe1, 0x15, 0xbf,
	0x27, 0x5c, 0xb6, 0xe5, 0xb6, 0x06, 0x88, 0x3f, 0x28, 0x8f, 0x6b, 0xed, 0x3d, 0x85, 0x35, 0xd8,
	0xa6, 0x07, 0x5b, 0x71, 0x33, 0xb1, 0x56, 0xdc, 0x6c, 0xbf, 0x15, 0x97, 0x11, 0xff, 0x44, 0x80,
	0x42, 0x1c, 0x22, 0x09, 0x9e, 0xe4, 0xbc, 0x4a, 0xcf, 0xe9, 0xb8, 0xaa, 0x1e, 0xdc, 0xe3, 0xa0,
	0x32, 0x38, 0x64, 0x24, 0x52, 0x73, 0xd3, 0x29, 0x2e, 0x76, 0x54, 0xc3, 0xe5, 0x1f, 0x5a, 0x81,
	0x90, 0x64, 0x4a, 0x41, 0x87, 0xb0, 0xc8, 0xd9, 0x15, 0xdb, 0x09, 0x1a, 0x46, 0x63, 0x3e, 0x34,
	0x54, 0xfa, 0x1b, 0x34, 0x18, 0x8f, 0x5c, 0xe8, 0xc5, 0x9e, 0xc5, 0x2e, 0xa0, 0xe1, 0x59, 0xe8,
	0x3d, 0x58, 0x8f, 0x02, 0x56, 0x22, 0x15, 0x3d, 0x33, 0xa3, 0x95, 0x08, 0xf6, 0x56, 0x58, 0xdc,
	0x8f, 0xfd, 0xc6, 0x27, 0x7e, 0x13, 0x96, 0x86, 0xbe, 0x0c, 0xa0, 0x2a, 0x64, 0x9e, 0x19, 0x96,
	0x6e, 0x3f, 0x1b, 0x7f, 0x35, 0x25, 0xc2, 0xfc, 0x98, 0xb2, 0xc8, 0x9c, 0x55, 0xfc, 0x4d, 0x21,
	0xb6, 0x34, 0x1b, 0x45, 0x26, 0x94, 0x74, 0xd5, 0x30, 0xcf, 0x94, 0xe8, 0x37, 0x0c, 0xbe, 0x19,
	0x33, 0xfd, 0x94, 0x8f, 0xf5, 0x3b, 0x84, 0x73, 0x68, 0xcd, 0xbd, 0xaf, 0xc9, 0x6b, 0x7a, 0xe2,
	0xc8, 0xf6, 0x3c, 0x64, 0x58, 0xff, 0x4b, 0x6c, 0xc1, 0x5a, 0x32, 0xf7, 0x40, 0x7f, 0x64, 0x6a,
	0xb0, 0x3f, 0x52, 0x86, 0x79, 0xbd, 0xc7, 0xb2, 0x1b, 0xee, 0x0d, 0xc3, 0x67, 0xf1, 0xbf, 0x04,
	0xb8, 0xd6, 0xea, 0x7b, 0xdd, 0x88, 0x0d, 0xfc, 0x3f, 0xfa, 0xdf, 0x9f, 0x98, 0xf1, 0x26, 0xd6,
	0x55, 0x5f, 0x0a, 0x70, 0x5d, 0xb6, 0x4d, 0xf3, 0x48, 0xd5, 0x4e, 0x83, 0x73, 0x73, 0xb5, 0xfb,
	0x69, 0x0b, 0x3a, 0x4f, 0x58, 0x4e, 0x1f, 0x89, 0xca, 0x3c, 0xd1, 0x8d, 0x7f, 0x10, 0x15, 0x2e,
	0xf0, 0x41, 0x54, 0xfc, 0x2e, 0x2c, 0x27, 0xb5, 0x91, 0x47, 0x5f, 0xad, 0x79, 0x0d, 0x0a, 0x5d,
	0xc3, 0x8a, 0x86, 0x27, 0x76, 0x4d, 0x36, 0xdf, 0x35, 0xac, 0x7e, 0x68, 0x22, 0xb3, 0xd4, 0xcf,
	0x86, 0x83, 0x58, 0xbe, 0xab, 0x7e, 0x16, 0xce, 0x12, 0xff, 0x69, 0x0a, 0x8a, 0x2d, 0xec, 0xb3,
	0xab, 0x8f, 0x57, 0x27, 0xf5, 0x0e, 0x2c, 0xba, 0xd8, 0xb3, 0x7b, 0xae, 0x86, 0x15, 0x7e, 0x07,
	0x96, 0x5d, 0xb8, 0xfd, 0xd9, 0xd4, 0x62, 0x3f, 0x06, 0x6b, 0x53, 0xe6, 0x2b, 0x44, 0x6f, 0xc4,
	0x16, 0xdc, 0x18, 0x11, 0xbd, 0x05, 0x4b, 0x74, 0x7d, 0xe5, 0xd8, 0xb0, 0x3a, 0xd8, 0x75, 0x5c,
	0x23, 0xcc, 0x6f, 0x8a, 0x74, 0xe0, 0x41, 0x9f, 0x9e, 0xa4, 0x94, 0xe5, 0x0a, 0x2c, 0x27, 0xec,
	0x73, 0xae, 0xfb, 0xa0, 0xbf, 0x23, 0xd0, 0xde, 0xc9, 0x3e, 0xee, 0xa8, 0xda, 0x59, 0xe5, 0x48,
	0xd5, 0xae, 0x4e, 0xae, 0x11, 0x25, 0x99, 0x89, 0x2b, 0x49, 0x92, 0x16, 0xff, 0x0a, 0xac, 0x51,
	0x7f, 0x5e, 0x6b, 0xca, 0xfc, 0x1a, 0xf7, 0xd5, 0x37, 0x1e, 0xa2, 0xfb, 0x7f, 0x4f, 0x80, 0x17,
	0xaa, 0x76, 0xd7, 0x21, 0x09, 0xf8, 0x57, 0x89, 0x21, 0xea, 0x74, 0x4e, 0x61, 0x69, 0xe8, 0xba,
	0x32, 0xd1, 0x9a, 0xc8, 0x85, 0x65, 0x6e, 0x2e, 0x04, 0xc1, 0xb4, 0x5c, 0x54, 0xa3, 0xb3, 0x89,
	0x61, 0xbd, 0x09, 0x51, 0x1a, 0xab, 0xca, 0x18, 0xa8, 0xc5, 0x08, 0x9d, 0x54, 0x5a, 0xe2, 0x3f,
	0x0a, 0xb0, 0x4e, 0x9c, 0x7a, 0xec, 0xa6, 0xc1, 0x95, 0x1d, 0x77, 0xf8, 0x0e, 0xc4, 0xcc, 0xa5,
	0xee, 0x40, 0x24, 0xbd, 0xc2, 0x7f, 0x17, 0xe0, 0x45, 0xda, 0x85, 0x1b, 0xbc, 0x01, 0x70, 0x65,
	0xa7, 0x4a, 0xbe, 0xa3, 0x30, 0xf3, 0x13, 0xb9, 0xa3, 0x90, 0xd0, 0xbe, 0xb9, 0xf3, 0x6f, 0xd7,
	0xa1, 0xc0, 0x2b, 0x77, 0x16, 0xcb, 0x5c, 0xf4, 0xa5, 0x00, 0xf9, 0x68, 0x3f, 0x0b, 0xa5, 0x24,
	0xc4, 0x09, 0x9d, 0xb5, 0xf2, 0xe6, 0xa4, 0xd3, 0x59, 0x50, 0x11, 0xbf, 0xf1, 0xfd, 0x7f, 0xf9,
	0xf1, 0x6f, 0x4f, 0xdd, 0x45, 0xb7, 0xc3, 0x3f, 0x6d, 0x7c, 0x97, 0xd5, 0x66, 0x1f, 0x71, 0x49,
	0x7a, 0x5b, 0x1b, 0x5b, 0xe1, 0xb7, 0xc5, 0xad, 0x8d, 0xcf, 0xb7, 0xc2, 0x16, 0xd9, 0xef, 0x0a,
	0x00, 0xfd, 0x9e, 0x37, 0x4a, 0x11, 0xd0, 0x50, 0x67, 0xbc, 0x3c, 0xbe, 0x17, 0x97, 0x84, 0x8c,
	0x08, 0x6d, 0x04, 0xae, 0x10, 0xd6, 0xd6, 0xc6, 0xe7, 0xe8, 0x07, 0x02, 0x2c, 0xc4, 0xbe, 0x16,
	0xa0, 0x14, 0xb1, 0x24, 0x7d, 0x56, 0x28, 0x4f, 0xd2, 0x40, 0x12, 0x3f, 0xa4, 0x08, 0xef, 0x89,
	0xe7, 0x97, 0xdd, 0x7d, 0x61, 0x83, 0x82, 0x8c, 0xb5, 0xed, 0xd3, 0x40, 0x26, 0xf5, 0xf7, 0xcf,
	0x05, 0xb2, 0x7c, 0x7e, 0x31, 0x12, 0x90, 0x3f, 0x14, 0x60, 0x21, 0xd6, 0x09, 0x4f, 0x03, 0x99,
	0xd4, 0x32, 0x9f, 0x0c, 0xe4, 0xcf, 0x53, 0x90, 0x3b, 0xe2, 0xc7, 0xe7, 0x07, 0xe9, 0x45, 0x37,
	0x25, 0x90, 0xbf, 0x10, 0x60, 0x21, 0xd6, 0xf1, 0x4e, 0x83, 0x9c, 0xd4, 0x1a, 0x9f, 0x0c, 0x32,
	0x57, 0xcf, 0x8d, 0x0b, 0xa8, 0xe7, 0x0f, 0x05, 0x28, 0xc4, 0x9b, 0x99, 0x68, 0x2b, 0xdd, 0x6c,
	0x87, 0x1a, 0xbc, 0xe5, 0x5b, 0x93, 0x33, 0x70, 0x4b, 0xff, 0x80, 0x02, 0x7e, 0x0f, 0xdd, 0x9d,
	0x58, 0x5b, 0x23, 0xfd, 0xd1, 0x2f, 0x04, 0xc8, 0x47, 0x5b, 0xdd, 0x69, 0x6e, 0x29, 0xa1, 0x25,
	0x3e, 0x99, 0x48, 0x13, 0x10, 0xa6, 0x89, 0xb4, 0x0f, 0x8f, 0xdb, 0xfc, 0xe2, 0x40, 0x9b, 0x1a,
	0xa5, 0x08, 0x29, 0xb9, 0xa3, 0x5d, 0x5e, 0x0b, 0x38, 0x82, 0x3f, 0x99, 0x6d, 0x4a, 0x5d, 0xc7,
	0x3f, 0x13, 0x25, 0x0a, 0xed, 0x63, 0xf1, 0xfe, 0x05, 0xa0, 0xdd, 0xd7, 0xe8, 0x5e, 0x44, 0x37,
	0xbf, 0x14, 0x60, 0x71, 0xa0, 0x85, 0x9c, 0x06, 0x32, 0xb9, 0xdb, 0x5c, 0x7e, 0x3d, 0xcd, 0x04,
	0xfb, 0xd3, 0xcf, 0x29, 0xcf, 0xcf, 0xb7, 0xbc, 0x28, 0xac, 0x1f, 0x09, 0xb0, 0x10, 0xab, 0x43,
	0xd0, 0x98, 0xd0, 0x32, 0xd8, 0x46, 0x2c, 0x6f, 0x4d, 0x3c, 0x9f, 0x6b, 0x28, 0x17, 0x32, 0xfa,
	0x68, 0x42, 0x0d, 0x8d, 0x1a, 0xd5, 0x56, 0xff, 0xd6, 0xe7, 0x1f, 0x0a, 0x90, 0x8b, 0x34, 0x15,
	0xd1, 0xdb, 0xa9, 0x02, 0x1e, 0xe8, 0x3d, 0x96, 0x27, 0xa8, 0xa8, 0x92, 0x80, 0x4e, 0x66, 0xfb,
	0x7d, 0x94, 0x81, 0x1f, 0x88, 0xf7, 0xb9, 0xd3, 0xfc, 0x40, 0x62, 0x47, 0x7c, 0x32, 0xc3, 0xda,
	0xa3, 0x78, 0xb7, 0xc5, 0xcb, 0x09, 0x96, 0x28, 0xf0, 0x9f, 0x09, 0x50, 0x88, 0x77, 0xb5, 0xd3,
	0x20, 0x27, 0xf6, 0xbf, 0x27, 0x83, 0xcc, 0x45, 0xbc, 0x71, 0x49, 0x11, 0xff, 0xbd, 0x00, 0xeb,
	0x23, 0xea, 0x7e, 0x94, 0x72, 0xb7, 0x29, 0xbd, 0x55, 0x30, 0xd9, 0x09, 0x7e, 0x81, 0x9e, 0xe0,
	0xa1, 0xf8, 0xe0, 0x52, 0x27, 0xb8, 0xef, 0x72, 0x28, 0x44, 0xfa, 0xff, 0x20, 0xc0, 0x6a, 0x62,
	0xe3, 0x06, 0xdd, 0x4b, 0x8d, 0xca, 0x23, 0x3b, 0x3d, 0x93, 0x9d, 0xe4, 0x11, 0x3d, 0x49, 0x53,
	0x7c, 0x78, 0xb9, 0x93, 0xd0, 0x48, 0x1d, 0x00, 0x20, 0xc7, 0xf9, 0x53, 0x01, 0xb2, 0x61, 0xe5,
	0x8d, 0x36, 0x26, 0x2f, 0xcf, 0x27, 0x83, 0x5d, 0xa7, 0xb0, 0xf7, 0xc4, 0xea, 0x85, 0x92, 0x8a,
	0x78, 0x65, 0x1e, 0xc9, 0x85, 0xfa, 0xb5, 0xf6, 0x98, 0x5c, 0x68, 0xa8, 0x28, 0xff, 0x2a, 0x72,
	0xa1, 0xfe, 0xa6, 0x04, 0xf2, 0x5f, 0x08, 0xb0, 0x38, 0x50, 0x86, 0xa7, 0xc5, 0x9b, 0xe4, 0x8a,
	0x7d, 0x32, 0xd8, 0xfb, 0x14, 0xf6, 0x03, 0xb1, 0x72, 0x01, 0xd8, 0x74, 0x5b, 0x27, 0xd8, 0x96,
	0x00, 0xff, 0x6b, 0x01, 0xd0, 0x70, 0xf9, 0x8e, 0xee, 0xa6, 0xb8, 0xc7, 0x51, 0xc5, 0xfe, 0x64,
	0xf0, 0x1b, 0x14, 0x7e, 0x4d, 0xdc, 0x39, 0x3f, 0x7c, 0x2d, 0xd8, 0x39, 0x76, 0x82, 0xbf, 0x14,
	0x68, 0xb7, 0x2b, 0xfe, 0x1f, 0xaf, 0xdb, 0xe9, 0x66, 0x9a, 0x50, 0xbb, 0x4f, 0x86, 0xfe, 0x80,
	0xa2, 0xdf, 0x15, 0xb7, 0x2f, 0xa4, 0x33, 0xb1, 0x7d, 0x09, 0xf6, 0xbf, 0x15, 0xf8, 0x8d, 0x9c,
	0xc1, 0x22, 0x76, 0xdc, 0x7d, 0x99, 0xe4, 0x4a, 0xfd, 0x8a, 0xfd, 0x25, 0xf7, 0x2c, 0x03, 0x7b,
	0xdf, 0x17, 0x36, 0xb6, 0x9f, 0xc1, 0x35, 0xcd, 0xee, 0x8e, 0xdc, 0x7c, 0x7b, 0xb9, 0x1a, 0xfc,
	0x3f, 0x8b, 0xde, 0x3d, 0x6e, 0x92, 0x9c, 0xaf, 0x29, 0xfc, 0xf1, 0xd4, 0xf5, 0x5d, 0xc6, 0x51,
	0x35, 0xed, 0x9e, 0xbe, 0x59, 0x0d, 0xf9, 0x1e, 0xdd, 0xde, 0x26, 0x7c, 0x7f, 0x17, 0x4c, 0xf8,
	0x94, 0x4e, 0xf8, 0x34, 0x9c, 0xf0, 0xe9, 0x23, 0xb6, 0xf0, 0x51, 0x86, 0xa6, 0x8f, 0x77, 0xff,
	0x2f, 0x00, 0x00, 0xff, 0xff, 0xde, 0x22, 0x71, 0x35, 0x1b, 0x41, 0x00, 0x00,
}
