// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: google/genomics/v1/cigar.proto

package google_genomics_v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "go.pedge.io/pb/gogo/google/api"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Describes the different types of CIGAR alignment operations that exist.
// Used wherever CIGAR alignments are used.
type CigarUnit_Operation int32

const (
	CigarUnit_OPERATION_UNSPECIFIED CigarUnit_Operation = 0
	// An alignment match indicates that a sequence can be aligned to the
	// reference without evidence of an INDEL. Unlike the
	// `SEQUENCE_MATCH` and `SEQUENCE_MISMATCH` operators,
	// the `ALIGNMENT_MATCH` operator does not indicate whether the
	// reference and read sequences are an exact match. This operator is
	// equivalent to SAM's `M`.
	CigarUnit_ALIGNMENT_MATCH CigarUnit_Operation = 1
	// The insert operator indicates that the read contains evidence of bases
	// being inserted into the reference. This operator is equivalent to SAM's
	// `I`.
	CigarUnit_INSERT CigarUnit_Operation = 2
	// The delete operator indicates that the read contains evidence of bases
	// being deleted from the reference. This operator is equivalent to SAM's
	// `D`.
	CigarUnit_DELETE CigarUnit_Operation = 3
	// The skip operator indicates that this read skips a long segment of the
	// reference, but the bases have not been deleted. This operator is commonly
	// used when working with RNA-seq data, where reads may skip long segments
	// of the reference between exons. This operator is equivalent to SAM's
	// `N`.
	CigarUnit_SKIP CigarUnit_Operation = 4
	// The soft clip operator indicates that bases at the start/end of a read
	// have not been considered during alignment. This may occur if the majority
	// of a read maps, except for low quality bases at the start/end of a read.
	// This operator is equivalent to SAM's `S`. Bases that are soft
	// clipped will still be stored in the read.
	CigarUnit_CLIP_SOFT CigarUnit_Operation = 5
	// The hard clip operator indicates that bases at the start/end of a read
	// have been omitted from this alignment. This may occur if this linear
	// alignment is part of a chimeric alignment, or if the read has been
	// trimmed (for example, during error correction or to trim poly-A tails for
	// RNA-seq). This operator is equivalent to SAM's `H`.
	CigarUnit_CLIP_HARD CigarUnit_Operation = 6
	// The pad operator indicates that there is padding in an alignment. This
	// operator is equivalent to SAM's `P`.
	CigarUnit_PAD CigarUnit_Operation = 7
	// This operator indicates that this portion of the aligned sequence exactly
	// matches the reference. This operator is equivalent to SAM's `=`.
	CigarUnit_SEQUENCE_MATCH CigarUnit_Operation = 8
	// This operator indicates that this portion of the aligned sequence is an
	// alignment match to the reference, but a sequence mismatch. This can
	// indicate a SNP or a read error. This operator is equivalent to SAM's
	// `X`.
	CigarUnit_SEQUENCE_MISMATCH CigarUnit_Operation = 9
)

var CigarUnit_Operation_name = map[int32]string{
	0: "OPERATION_UNSPECIFIED",
	1: "ALIGNMENT_MATCH",
	2: "INSERT",
	3: "DELETE",
	4: "SKIP",
	5: "CLIP_SOFT",
	6: "CLIP_HARD",
	7: "PAD",
	8: "SEQUENCE_MATCH",
	9: "SEQUENCE_MISMATCH",
}
var CigarUnit_Operation_value = map[string]int32{
	"OPERATION_UNSPECIFIED": 0,
	"ALIGNMENT_MATCH":       1,
	"INSERT":                2,
	"DELETE":                3,
	"SKIP":                  4,
	"CLIP_SOFT":             5,
	"CLIP_HARD":             6,
	"PAD":                   7,
	"SEQUENCE_MATCH":        8,
	"SEQUENCE_MISMATCH":     9,
}

func (x CigarUnit_Operation) String() string {
	return proto.EnumName(CigarUnit_Operation_name, int32(x))
}
func (CigarUnit_Operation) EnumDescriptor() ([]byte, []int) { return fileDescriptorCigar, []int{0, 0} }

// A single CIGAR operation.
type CigarUnit struct {
	Operation CigarUnit_Operation `protobuf:"varint,1,opt,name=operation,proto3,enum=google.genomics.v1.CigarUnit_Operation" json:"operation,omitempty"`
	// The number of genomic bases that the operation runs for. Required.
	OperationLength int64 `protobuf:"varint,2,opt,name=operation_length,json=operationLength,proto3" json:"operation_length,omitempty"`
	// `referenceSequence` is only used at mismatches
	// (`SEQUENCE_MISMATCH`) and deletions (`DELETE`).
	// Filling this field replaces SAM's MD tag. If the relevant information is
	// not available, this field is unset.
	ReferenceSequence string `protobuf:"bytes,3,opt,name=reference_sequence,json=referenceSequence,proto3" json:"reference_sequence,omitempty"`
}

func (m *CigarUnit) Reset()                    { *m = CigarUnit{} }
func (m *CigarUnit) String() string            { return proto.CompactTextString(m) }
func (*CigarUnit) ProtoMessage()               {}
func (*CigarUnit) Descriptor() ([]byte, []int) { return fileDescriptorCigar, []int{0} }

func (m *CigarUnit) GetOperation() CigarUnit_Operation {
	if m != nil {
		return m.Operation
	}
	return CigarUnit_OPERATION_UNSPECIFIED
}

func (m *CigarUnit) GetOperationLength() int64 {
	if m != nil {
		return m.OperationLength
	}
	return 0
}

func (m *CigarUnit) GetReferenceSequence() string {
	if m != nil {
		return m.ReferenceSequence
	}
	return ""
}

func init() {
	proto.RegisterType((*CigarUnit)(nil), "google.genomics.v1.CigarUnit")
	proto.RegisterEnum("google.genomics.v1.CigarUnit_Operation", CigarUnit_Operation_name, CigarUnit_Operation_value)
}

func init() { proto.RegisterFile("google/genomics/v1/cigar.proto", fileDescriptorCigar) }

var fileDescriptorCigar = []byte{
	// 343 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xc1, 0x4e, 0xfa, 0x40,
	0x10, 0xc6, 0xff, 0x4b, 0xf9, 0x03, 0x9d, 0x44, 0x58, 0xd6, 0x60, 0xd0, 0x18, 0x43, 0xb8, 0x08,
	0x07, 0xdb, 0xa0, 0x4f, 0x50, 0xda, 0x45, 0x36, 0x96, 0xb6, 0xb6, 0xe5, 0xdc, 0xd4, 0x66, 0xad,
	0x4d, 0xa0, 0x8b, 0xa5, 0xf2, 0x5a, 0xbe, 0x91, 0xcf, 0xe1, 0xd1, 0xb4, 0x40, 0x39, 0xe8, 0x6d,
	0xe6, 0xfb, 0xe6, 0xf7, 0x4d, 0x32, 0x03, 0x37, 0xb1, 0x10, 0xf1, 0x8a, 0xab, 0x31, 0x4f, 0xc5,
	0x3a, 0x89, 0xb6, 0xea, 0x6e, 0xa2, 0x46, 0x49, 0x1c, 0x66, 0xca, 0x26, 0x13, 0xb9, 0x20, 0x64,
	0xef, 0x2b, 0x47, 0x5f, 0xd9, 0x4d, 0xae, 0xae, 0x0f, 0x4c, 0xb8, 0x49, 0xd4, 0x30, 0x4d, 0x45,
	0x1e, 0xe6, 0x89, 0x48, 0xb7, 0x7b, 0x62, 0xf8, 0x55, 0x03, 0x59, 0x2f, 0x12, 0x96, 0x69, 0x92,
	0x13, 0x0a, 0xb2, 0xd8, 0xf0, 0xac, 0x9c, 0xe8, 0xa3, 0x01, 0x1a, 0xb5, 0xef, 0x6f, 0x95, 0xdf,
	0x99, 0x4a, 0x45, 0x28, 0xf6, 0x71, 0xdc, 0x3d, 0x91, 0x64, 0x0c, 0xb8, 0x6a, 0x82, 0x15, 0x4f,
	0xe3, 0xfc, 0xad, 0x5f, 0x1b, 0xa0, 0x91, 0xe4, 0x76, 0x2a, 0xdd, 0x2c, 0x65, 0x72, 0x07, 0x24,
	0xe3, 0xaf, 0x3c, 0xe3, 0x69, 0xc4, 0x83, 0x2d, 0x7f, 0xff, 0x28, 0x8a, 0xbe, 0x34, 0x40, 0x23,
	0xd9, 0xed, 0x56, 0x8e, 0x77, 0x30, 0x86, 0x9f, 0x08, 0xe4, 0x6a, 0x25, 0xb9, 0x84, 0x9e, 0xed,
	0x50, 0x57, 0xf3, 0x99, 0x6d, 0x05, 0x4b, 0xcb, 0x73, 0xa8, 0xce, 0x66, 0x8c, 0x1a, 0xf8, 0x1f,
	0x39, 0x87, 0x8e, 0x66, 0xb2, 0x47, 0x6b, 0x41, 0x2d, 0x3f, 0x58, 0x68, 0xbe, 0x3e, 0xc7, 0x88,
	0x00, 0x34, 0x98, 0xe5, 0x51, 0xd7, 0xc7, 0xb5, 0xa2, 0x36, 0xa8, 0x49, 0x7d, 0x8a, 0x25, 0xd2,
	0x82, 0xba, 0xf7, 0xc4, 0x1c, 0x5c, 0x27, 0x67, 0x20, 0xeb, 0x26, 0x73, 0x02, 0xcf, 0x9e, 0xf9,
	0xf8, 0x7f, 0xd5, 0xce, 0x35, 0xd7, 0xc0, 0x0d, 0xd2, 0x04, 0xc9, 0xd1, 0x0c, 0xdc, 0x24, 0x04,
	0xda, 0x1e, 0x7d, 0x5e, 0x52, 0x4b, 0xa7, 0x87, 0xf0, 0x16, 0xe9, 0x41, 0xf7, 0xa4, 0x31, 0x6f,
	0x2f, 0xcb, 0xd3, 0x31, 0x5c, 0x44, 0x62, 0xfd, 0xc7, 0x11, 0xa7, 0x50, 0x5e, 0xd1, 0x29, 0xde,
	0xe0, 0xa0, 0x6f, 0x84, 0x5e, 0x1a, 0xe5, 0x4b, 0x1e, 0x7e, 0x02, 0x00, 0x00, 0xff, 0xff, 0x2e,
	0x2a, 0x9c, 0x94, 0xe6, 0x01, 0x00, 0x00,
}
