// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: google/cloud/ml/v1beta1/prediction_service.proto

package google_cloud_ml_v1beta1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "go.pedge.io/pb/gogo/google/api"
import google_api3 "go.pedge.io/pb/gogo/google/api"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Request for predictions to be issued against a trained model.
//
// The body of the request is a single JSON object with a single top-level
// field:
//
// <dl>
//   <dt>instances</dt>
//   <dd>A JSON array containing values representing the instances to use for
//       prediction.</dd>
// </dl>
//
// The structure of each element of the instances list is determined by your
// model's input definition. Instances can include named inputs or can contain
// only unlabeled values.
//
// Not all data includes named inputs. Some instances will be simple
// JSON values (boolean, number, or string). However, instances are often lists
// of simple values, or complex nested lists. Here are some examples of request
// bodies:
//
// CSV data with each row encoded as a string value:
// <pre>
// {"instances": ["1.0,true,\\"x\\"", "-2.0,false,\\"y\\""]}
// </pre>
// Plain text:
// <pre>
// {"instances": ["the quick brown fox", "la bruja le dio"]}
// </pre>
// Sentences encoded as lists of words (vectors of strings):
// <pre>
// {
//   "instances": [
//     ["the","quick","brown"],
//     ["la","bruja","le"],
//     ...
//   ]
// }
// </pre>
// Floating point scalar values:
// <pre>
// {"instances": [0.0, 1.1, 2.2]}
// </pre>
// Vectors of integers:
// <pre>
// {
//   "instances": [
//     [0, 1, 2],
//     [3, 4, 5],
//     ...
//   ]
// }
// </pre>
// Tensors (in this case, two-dimensional tensors):
// <pre>
// {
//   "instances": [
//     [
//       [0, 1, 2],
//       [3, 4, 5]
//     ],
//     ...
//   ]
// }
// </pre>
// Images can be represented different ways. In this encoding scheme the first
// two dimensions represent the rows and columns of the image, and the third
// contains lists (vectors) of the R, G, and B values for each pixel.
// <pre>
// {
//   "instances": [
//     [
//       [
//         [138, 30, 66],
//         [130, 20, 56],
//         ...
//       ],
//       [
//         [126, 38, 61],
//         [122, 24, 57],
//         ...
//       ],
//       ...
//     ],
//     ...
//   ]
// }
// </pre>
// JSON strings must be encoded as UTF-8. To send binary data, you must
// base64-encode the data and mark it as binary. To mark a JSON string
// as binary, replace it with a JSON object with a single attribute named `b64`:
// <pre>{"b64": "..."} </pre>
// For example:
//
// Two Serialized tf.Examples (fake data, for illustrative purposes only):
// <pre>
// {"instances": [{"b64": "X5ad6u"}, {"b64": "IA9j4nx"}]}
// </pre>
// Two JPEG image byte strings (fake data, for illustrative purposes only):
// <pre>
// {"instances": [{"b64": "ASa8asdf"}, {"b64": "JLK7ljk3"}]}
// </pre>
// If your data includes named references, format each instance as a JSON object
// with the named references as the keys:
//
// JSON input data to be preprocessed:
// <pre>
// {
//   "instances": [
//     {
//       "a": 1.0,
//       "b": true,
//       "c": "x"
//     },
//     {
//       "a": -2.0,
//       "b": false,
//       "c": "y"
//     }
//   ]
// }
// </pre>
// Some models have an underlying TensorFlow graph that accepts multiple input
// tensors. In this case, you should use the names of JSON name/value pairs to
// identify the input tensors, as shown in the following exmaples:
//
// For a graph with input tensor aliases "tag" (string) and "image"
// (base64-encoded string):
// <pre>
// {
//   "instances": [
//     {
//       "tag": "beach",
//       "image": {"b64": "ASa8asdf"}
//     },
//     {
//       "tag": "car",
//       "image": {"b64": "JLK7ljk3"}
//     }
//   ]
// }
// </pre>
// For a graph with input tensor aliases "tag" (string) and "image"
// (3-dimensional array of 8-bit ints):
// <pre>
// {
//   "instances": [
//     {
//       "tag": "beach",
//       "image": [
//         [
//           [138, 30, 66],
//           [130, 20, 56],
//           ...
//         ],
//         [
//           [126, 38, 61],
//           [122, 24, 57],
//           ...
//         ],
//         ...
//       ]
//     },
//     {
//       "tag": "car",
//       "image": [
//         [
//           [255, 0, 102],
//           [255, 0, 97],
//           ...
//         ],
//         [
//           [254, 1, 101],
//           [254, 2, 93],
//           ...
//         ],
//         ...
//       ]
//     },
//     ...
//   ]
// }
// </pre>
// If the call is successful, the response body will contain one prediction
// entry per instance in the request body. If prediction fails for any
// instance, the response body will contain no predictions and will contian
// a single error entry instead.
type PredictRequest struct {
	// Required. The resource name of a model or a version.
	//
	// Authorization: requires `Viewer` role on the parent project.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	//
	// Required. The prediction request body.
	HttpBody *google_api3.HttpBody `protobuf:"bytes,2,opt,name=http_body,json=httpBody" json:"http_body,omitempty"`
}

func (m *PredictRequest) Reset()                    { *m = PredictRequest{} }
func (m *PredictRequest) String() string            { return proto.CompactTextString(m) }
func (*PredictRequest) ProtoMessage()               {}
func (*PredictRequest) Descriptor() ([]byte, []int) { return fileDescriptorPredictionService, []int{0} }

func (m *PredictRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PredictRequest) GetHttpBody() *google_api3.HttpBody {
	if m != nil {
		return m.HttpBody
	}
	return nil
}

func init() {
	proto.RegisterType((*PredictRequest)(nil), "google.cloud.ml.v1beta1.PredictRequest")
}

func init() {
	proto.RegisterFile("google/cloud/ml/v1beta1/prediction_service.proto", fileDescriptorPredictionService)
}

var fileDescriptorPredictionService = []byte{
	// 285 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xcf, 0x4a, 0xc3, 0x30,
	0x1c, 0xc7, 0xc9, 0x10, 0x75, 0x11, 0x3c, 0x04, 0x71, 0x73, 0x08, 0x8e, 0x7a, 0xb0, 0xf4, 0x90,
	0xd8, 0x79, 0x9b, 0x78, 0xe9, 0xc9, 0x9b, 0xa5, 0x1e, 0x3c, 0x8e, 0xb4, 0x0d, 0x5b, 0xa4, 0xcd,
	0x2f, 0xb6, 0xd9, 0x70, 0x88, 0x17, 0x5f, 0x61, 0x8f, 0xe6, 0x2b, 0xf8, 0x20, 0x92, 0x26, 0x0c,
	0x65, 0x7a, 0x0b, 0xf9, 0xf1, 0xf9, 0xfe, 0xc3, 0xd7, 0x73, 0x80, 0x79, 0x25, 0x58, 0x51, 0xc1,
	0xb2, 0x64, 0x75, 0xc5, 0x56, 0x71, 0x2e, 0x0c, 0x8f, 0x99, 0x6e, 0x44, 0x29, 0x0b, 0x23, 0x41,
	0xcd, 0x5a, 0xd1, 0xac, 0x64, 0x21, 0xa8, 0x6e, 0xc0, 0x00, 0x19, 0x38, 0x82, 0x76, 0x04, 0xad,
	0x2b, 0xea, 0x89, 0xd1, 0xb9, 0x97, 0xe2, 0x5a, 0x32, 0xae, 0x14, 0x18, 0x6e, 0xe9, 0xd6, 0x61,
	0xa3, 0xb3, 0x1f, 0xd7, 0x85, 0x31, 0x3a, 0x87, 0x72, 0xed, 0x4e, 0xc1, 0x13, 0x3e, 0x4e, 0x9d,
	0x5b, 0x26, 0x5e, 0x96, 0xa2, 0x35, 0x84, 0xe0, 0x3d, 0xc5, 0x6b, 0x31, 0x44, 0x63, 0x14, 0xf6,
	0xb3, 0xee, 0x4d, 0x62, 0xdc, 0xb7, 0xdc, 0xcc, 0x82, 0xc3, 0xde, 0x18, 0x85, 0x47, 0x93, 0x13,
	0xea, 0xb3, 0x70, 0x2d, 0xe9, 0xbd, 0x31, 0x3a, 0x81, 0x72, 0x9d, 0x1d, 0x2e, 0xfc, 0x6b, 0xb2,
	0x41, 0x78, 0xf0, 0xa0, 0x2a, 0xa9, 0x44, 0xba, 0x6d, 0xf3, 0xe8, 0xca, 0x90, 0x57, 0x7c, 0xe0,
	0x3f, 0xc9, 0x15, 0xfd, 0xa7, 0x12, 0xfd, 0x1d, 0x6b, 0xf4, 0xa7, 0x5f, 0x40, 0x3f, 0x3e, 0xbf,
	0x36, 0xbd, 0x30, 0xb8, 0xdc, 0x6e, 0xf7, 0x66, 0x03, 0xdf, 0xe9, 0x06, 0x9e, 0x45, 0x61, 0x5a,
	0x16, 0x45, 0xef, 0x53, 0x3f, 0xe7, 0x14, 0x45, 0xc9, 0x2d, 0xbe, 0x28, 0xa0, 0xde, 0xf1, 0xb4,
	0x9a, 0x5e, 0x20, 0x39, 0xdd, 0xc9, 0x9b, 0xda, 0xa5, 0x52, 0x94, 0xef, 0x77, 0x93, 0xdd, 0x7c,
	0x07, 0x00, 0x00, 0xff, 0xff, 0x97, 0x64, 0x9c, 0x6c, 0xb8, 0x01, 0x00, 0x00,
}
