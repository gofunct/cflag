// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: google/devtools/sourcerepo/v1/sourcerepo.proto

package google_devtools_sourcerepo_v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "go.pedge.io/pb/gogo/google/api"
import _ "go.pedge.io/pb/gogo/google/iam/v1"
import _ "go.pedge.io/pb/gogo/google/iam/v1"
import _ "github.com/gogo/protobuf/types"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// A repository (or repo) is a Git repository storing versioned source content.
type Repo struct {
	// Resource name of the repository, of the form
	// `projects/<project>/repos/<repo>`.  The repo name may contain slashes.
	// eg, `projects/myproject/repos/name/with/slash`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The disk usage of the repo, in bytes. Read-only field. Size is only
	// returned by GetRepo.
	Size_ int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	// URL to clone the repository from Google Cloud Source Repositories.
	// Read-only field.
	Url string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	// How this repository mirrors a repository managed by another service.
	// Read-only field.
	MirrorConfig *MirrorConfig `protobuf:"bytes,4,opt,name=mirror_config,json=mirrorConfig" json:"mirror_config,omitempty"`
}

func (m *Repo) Reset()                    { *m = Repo{} }
func (m *Repo) String() string            { return proto.CompactTextString(m) }
func (*Repo) ProtoMessage()               {}
func (*Repo) Descriptor() ([]byte, []int) { return fileDescriptorSourcerepo, []int{0} }

func (m *Repo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Repo) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *Repo) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Repo) GetMirrorConfig() *MirrorConfig {
	if m != nil {
		return m.MirrorConfig
	}
	return nil
}

// Configuration to automatically mirror a repository from another
// hosting service, for example GitHub or BitBucket.
type MirrorConfig struct {
	// URL of the main repository at the other hosting service.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// ID of the webhook listening to updates to trigger mirroring.
	// Removing this webhook from the other hosting service will stop
	// Google Cloud Source Repositories from receiving notifications,
	// and thereby disabling mirroring.
	WebhookId string `protobuf:"bytes,2,opt,name=webhook_id,json=webhookId,proto3" json:"webhook_id,omitempty"`
	// ID of the SSH deploy key at the other hosting service.
	// Removing this key from the other service would deauthorize
	// Google Cloud Source Repositories from mirroring.
	DeployKeyId string `protobuf:"bytes,3,opt,name=deploy_key_id,json=deployKeyId,proto3" json:"deploy_key_id,omitempty"`
}

func (m *MirrorConfig) Reset()                    { *m = MirrorConfig{} }
func (m *MirrorConfig) String() string            { return proto.CompactTextString(m) }
func (*MirrorConfig) ProtoMessage()               {}
func (*MirrorConfig) Descriptor() ([]byte, []int) { return fileDescriptorSourcerepo, []int{1} }

func (m *MirrorConfig) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *MirrorConfig) GetWebhookId() string {
	if m != nil {
		return m.WebhookId
	}
	return ""
}

func (m *MirrorConfig) GetDeployKeyId() string {
	if m != nil {
		return m.DeployKeyId
	}
	return ""
}

// Request for GetRepo.
type GetRepoRequest struct {
	// The name of the requested repository. Values are of the form
	// `projects/<project>/repos/<repo>`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *GetRepoRequest) Reset()                    { *m = GetRepoRequest{} }
func (m *GetRepoRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRepoRequest) ProtoMessage()               {}
func (*GetRepoRequest) Descriptor() ([]byte, []int) { return fileDescriptorSourcerepo, []int{2} }

func (m *GetRepoRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Request for ListRepos.
type ListReposRequest struct {
	// The project ID whose repos should be listed. Values are of the form
	// `projects/<project>`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Maximum number of repositories to return; between 1 and 500.
	// If not set or zero, defaults to 100 at the server.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Resume listing repositories where a prior ListReposResponse
	// left off. This is an opaque token that must be obtained from
	// a recent, prior ListReposResponse's next_page_token field.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (m *ListReposRequest) Reset()                    { *m = ListReposRequest{} }
func (m *ListReposRequest) String() string            { return proto.CompactTextString(m) }
func (*ListReposRequest) ProtoMessage()               {}
func (*ListReposRequest) Descriptor() ([]byte, []int) { return fileDescriptorSourcerepo, []int{3} }

func (m *ListReposRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ListReposRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListReposRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

// Response for ListRepos.  The size is not set in the returned repositories.
type ListReposResponse struct {
	// The listed repos.
	Repos []*Repo `protobuf:"bytes,1,rep,name=repos" json:"repos,omitempty"`
	// If non-empty, additional repositories exist within the project. These
	// can be retrieved by including this value in the next ListReposRequest's
	// page_token field.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (m *ListReposResponse) Reset()                    { *m = ListReposResponse{} }
func (m *ListReposResponse) String() string            { return proto.CompactTextString(m) }
func (*ListReposResponse) ProtoMessage()               {}
func (*ListReposResponse) Descriptor() ([]byte, []int) { return fileDescriptorSourcerepo, []int{4} }

func (m *ListReposResponse) GetRepos() []*Repo {
	if m != nil {
		return m.Repos
	}
	return nil
}

func (m *ListReposResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

// Request for CreateRepo
type CreateRepoRequest struct {
	// The project in which to create the repo. Values are of the form
	// `projects/<project>`.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The repo to create.  Only name should be set; setting other fields
	// is an error.  The project in the name should match the parent field.
	Repo *Repo `protobuf:"bytes,2,opt,name=repo" json:"repo,omitempty"`
}

func (m *CreateRepoRequest) Reset()                    { *m = CreateRepoRequest{} }
func (m *CreateRepoRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRepoRequest) ProtoMessage()               {}
func (*CreateRepoRequest) Descriptor() ([]byte, []int) { return fileDescriptorSourcerepo, []int{5} }

func (m *CreateRepoRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *CreateRepoRequest) GetRepo() *Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

// Request for DeleteRepo.
type DeleteRepoRequest struct {
	// The name of the repo to delete. Values are of the form
	// `projects/<project>/repos/<repo>`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *DeleteRepoRequest) Reset()                    { *m = DeleteRepoRequest{} }
func (m *DeleteRepoRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRepoRequest) ProtoMessage()               {}
func (*DeleteRepoRequest) Descriptor() ([]byte, []int) { return fileDescriptorSourcerepo, []int{6} }

func (m *DeleteRepoRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*Repo)(nil), "google.devtools.sourcerepo.v1.Repo")
	proto.RegisterType((*MirrorConfig)(nil), "google.devtools.sourcerepo.v1.MirrorConfig")
	proto.RegisterType((*GetRepoRequest)(nil), "google.devtools.sourcerepo.v1.GetRepoRequest")
	proto.RegisterType((*ListReposRequest)(nil), "google.devtools.sourcerepo.v1.ListReposRequest")
	proto.RegisterType((*ListReposResponse)(nil), "google.devtools.sourcerepo.v1.ListReposResponse")
	proto.RegisterType((*CreateRepoRequest)(nil), "google.devtools.sourcerepo.v1.CreateRepoRequest")
	proto.RegisterType((*DeleteRepoRequest)(nil), "google.devtools.sourcerepo.v1.DeleteRepoRequest")
}

func init() {
	proto.RegisterFile("google/devtools/sourcerepo/v1/sourcerepo.proto", fileDescriptorSourcerepo)
}

var fileDescriptorSourcerepo = []byte{
	// 714 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x5d, 0x4f, 0x13, 0x4d,
	0x14, 0xce, 0xd0, 0x02, 0x6f, 0x0f, 0xe5, 0x05, 0x26, 0x79, 0x49, 0x53, 0xde, 0x92, 0x3a, 0x28,
	0xd6, 0x12, 0x77, 0x05, 0x3f, 0x88, 0x4d, 0x4c, 0x0c, 0x68, 0x08, 0x51, 0x93, 0x66, 0xe1, 0xbe,
	0xd9, 0xb6, 0x87, 0xba, 0xd2, 0xdd, 0x59, 0x77, 0xa6, 0xd5, 0x6a, 0xf0, 0x82, 0x84, 0x7b, 0x23,
	0x3f, 0xc3, 0x9f, 0xe3, 0x5f, 0xf0, 0x47, 0x78, 0x69, 0x66, 0x76, 0x97, 0x6e, 0x69, 0xd3, 0xee,
	0xdd, 0xcc, 0x39, 0xcf, 0x39, 0xcf, 0x33, 0xcf, 0x9c, 0x9d, 0x05, 0xa3, 0xc3, 0x79, 0xa7, 0x8b,
	0x66, 0x1b, 0xfb, 0x92, 0xf3, 0xae, 0x30, 0x05, 0xef, 0x05, 0x2d, 0x0c, 0xd0, 0xe7, 0x66, 0x7f,
	0x37, 0xb1, 0x33, 0xfc, 0x80, 0x4b, 0x4e, 0x4b, 0x21, 0xde, 0x88, 0xf1, 0x46, 0x02, 0xd1, 0xdf,
	0x2d, 0xfe, 0x1f, 0xb5, 0xb3, 0x7d, 0xc7, 0xb4, 0x3d, 0x8f, 0x4b, 0x5b, 0x3a, 0xdc, 0x13, 0x61,
	0x71, 0x71, 0x33, 0xca, 0x3a, 0xb6, 0xab, 0x9a, 0x3b, 0xb6, 0xdb, 0xf0, 0x79, 0xd7, 0x69, 0x0d,
	0xa2, 0x7c, 0x71, 0x34, 0x3f, 0x92, 0xdb, 0x88, 0x72, 0x7a, 0xd7, 0xec, 0x9d, 0x99, 0xe8, 0xfa,
	0x32, 0x4a, 0xb2, 0x1f, 0x04, 0xb2, 0x16, 0xfa, 0x9c, 0x52, 0xc8, 0x7a, 0xb6, 0x8b, 0x05, 0x52,
	0x26, 0x95, 0x9c, 0xa5, 0xd7, 0x2a, 0x26, 0x9c, 0x2f, 0x58, 0x98, 0x2b, 0x93, 0x4a, 0xc6, 0xd2,
	0x6b, 0xba, 0x0a, 0x99, 0x5e, 0xd0, 0x2d, 0x64, 0x34, 0x4c, 0x2d, 0x69, 0x1d, 0x96, 0x5d, 0x27,
	0x08, 0x78, 0xd0, 0x68, 0x71, 0xef, 0xcc, 0xe9, 0x14, 0xb2, 0x65, 0x52, 0x59, 0xda, 0xdb, 0x31,
	0xa6, 0x1e, 0xd8, 0x78, 0xa7, 0x6b, 0x0e, 0x75, 0x89, 0x95, 0x77, 0x13, 0x3b, 0xd6, 0x82, 0x7c,
	0x32, 0x1b, 0x73, 0x92, 0x21, 0x67, 0x09, 0xe0, 0x13, 0x36, 0xdf, 0x73, 0x7e, 0xde, 0x70, 0xda,
	0x5a, 0x5f, 0xce, 0xca, 0x45, 0x91, 0xe3, 0x36, 0x65, 0xb0, 0xdc, 0x46, 0xbf, 0xcb, 0x07, 0x8d,
	0x73, 0x1c, 0x28, 0x44, 0x28, 0x77, 0x29, 0x0c, 0xbe, 0xc1, 0xc1, 0x71, 0x9b, 0xdd, 0x85, 0x7f,
	0x8f, 0x50, 0xaa, 0xb3, 0x5b, 0xf8, 0xb1, 0x87, 0x42, 0x4e, 0xb2, 0x80, 0x35, 0x61, 0xf5, 0xad,
	0x23, 0x34, 0x4c, 0x4c, 0xc1, 0xd1, 0x0d, 0xc8, 0xf9, 0x76, 0x07, 0x1b, 0x37, 0x7e, 0xcd, 0x5b,
	0xff, 0xa8, 0xc0, 0x89, 0xf2, 0xac, 0x04, 0xa0, 0x93, 0x92, 0x9f, 0xa3, 0x17, 0x69, 0xd1, 0xf0,
	0x53, 0x15, 0x60, 0x7d, 0x58, 0x4b, 0x70, 0x08, 0x9f, 0x7b, 0x02, 0xe9, 0x73, 0x98, 0x57, 0x4e,
	0x89, 0x02, 0x29, 0x67, 0x2a, 0x4b, 0x7b, 0x5b, 0x33, 0xdc, 0xd4, 0xe7, 0x08, 0x2b, 0xe8, 0x36,
	0xac, 0x78, 0xf8, 0x59, 0x36, 0x12, 0x9c, 0xa1, 0x43, 0xcb, 0x2a, 0x5c, 0xbf, 0xe1, 0x6d, 0xc3,
	0xda, 0x61, 0x80, 0xb6, 0xc4, 0xa4, 0x09, 0xeb, 0xb0, 0xe0, 0xdb, 0x01, 0x7a, 0x32, 0x3a, 0x5e,
	0xb4, 0xa3, 0xfb, 0x90, 0x55, 0xdd, 0x75, 0xa7, 0x94, 0x72, 0x74, 0x01, 0xbb, 0x0f, 0x6b, 0xaf,
	0xb0, 0x8b, 0xa3, 0x2c, 0x13, 0x2c, 0xdc, 0xfb, 0xb3, 0x08, 0x70, 0xa2, 0xbb, 0xe8, 0x81, 0xbc,
	0x26, 0x90, 0xbb, 0xb1, 0x85, 0x9a, 0x33, 0x08, 0x6f, 0x5f, 0x52, 0xf1, 0x51, 0xfa, 0x82, 0xd0,
	0x71, 0xb6, 0x75, 0xf9, 0xeb, 0xf7, 0xf5, 0x5c, 0x89, 0x6e, 0xa8, 0x2f, 0xe8, 0xab, 0x92, 0xf4,
	0xc2, 0x0f, 0xf8, 0x07, 0x6c, 0x49, 0x61, 0x56, 0x2f, 0xcc, 0xd0, 0xdb, 0x2b, 0x02, 0x8b, 0xd1,
	0xd8, 0xd0, 0x87, 0x33, 0x28, 0x46, 0xc7, 0xab, 0x98, 0xc6, 0x33, 0xb6, 0xad, 0x45, 0x94, 0xe9,
	0xe6, 0x24, 0x11, 0xa1, 0x06, 0xb3, 0x5a, 0xbd, 0xa0, 0xdf, 0x09, 0xc0, 0xf0, 0xf2, 0xe8, 0xac,
	0xd3, 0x8e, 0xdd, 0x73, 0x3a, 0x35, 0x3b, 0x5a, 0xcd, 0x3d, 0x56, 0xd2, 0x6a, 0xc2, 0x49, 0x18,
	0x37, 0xa5, 0xa6, 0x2f, 0x9a, 0x7e, 0x03, 0x18, 0x5e, 0xf4, 0x4c, 0x45, 0x63, 0x33, 0x51, 0x5c,
	0x8f, 0x2b, 0xe2, 0x87, 0xca, 0x78, 0xad, 0x1e, 0xaa, 0xd8, 0x92, 0xea, 0x2c, 0x4b, 0xae, 0x08,
	0xe4, 0x4f, 0x50, 0x1e, 0xdb, 0x6e, 0x5d, 0x3f, 0x7f, 0x94, 0xc5, 0x0d, 0x1d, 0xdb, 0x55, 0x94,
	0xc9, 0x64, 0x4c, 0xfa, 0xdf, 0x2d, 0x4c, 0x98, 0x65, 0x35, 0xcd, 0xf9, 0x84, 0x99, 0x9a, 0x33,
	0xc0, 0x50, 0xfb, 0x44, 0xde, 0x9a, 0x48, 0xb4, 0xad, 0x91, 0x2a, 0xbd, 0x24, 0x90, 0x3f, 0x9a,
	0xa6, 0xe3, 0x28, 0xbd, 0x8e, 0x7d, 0xad, 0x63, 0x97, 0xa6, 0xd1, 0xd1, 0x49, 0x72, 0xfe, 0x24,
	0x40, 0x4f, 0x51, 0xe8, 0x08, 0x06, 0xae, 0x23, 0x84, 0xfa, 0x9b, 0xd0, 0xca, 0x2d, 0x9a, 0x71,
	0x48, 0x2c, 0xe8, 0x41, 0x0a, 0x64, 0xf4, 0xe1, 0xbc, 0xd4, 0x22, 0x6b, 0xec, 0x69, 0x0a, 0x91,
	0x72, 0xac, 0x4d, 0x8d, 0x54, 0x0f, 0x9e, 0xc1, 0x9d, 0x16, 0x77, 0xa7, 0x4f, 0xcc, 0xc1, 0xca,
	0xf0, 0x71, 0xa8, 0xab, 0x09, 0xa9, 0x93, 0xe6, 0x82, 0x1e, 0x95, 0xc7, 0x7f, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x11, 0x59, 0x92, 0x14, 0x8c, 0x07, 0x00, 0x00,
}
