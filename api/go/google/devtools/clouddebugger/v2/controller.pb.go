// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/devtools/clouddebugger/v2/controller.proto

package google_devtools_clouddebugger_v2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "go.pedge.io/pb/go/google/api"
import _ "github.com/golang/protobuf/ptypes/empty"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Request to register a debuggee.
type RegisterDebuggeeRequest struct {
	// Debuggee information to register.
	// The fields `project`, `uniquifier`, `description` and `agent_version`
	// of the debuggee must be set.
	Debuggee *Debuggee `protobuf:"bytes,1,opt,name=debuggee" json:"debuggee,omitempty"`
}

func (m *RegisterDebuggeeRequest) Reset()                    { *m = RegisterDebuggeeRequest{} }
func (m *RegisterDebuggeeRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterDebuggeeRequest) ProtoMessage()               {}
func (*RegisterDebuggeeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RegisterDebuggeeRequest) GetDebuggee() *Debuggee {
	if m != nil {
		return m.Debuggee
	}
	return nil
}

// Response for registering a debuggee.
type RegisterDebuggeeResponse struct {
	// Debuggee resource.
	// The field `id` is guranteed to be set (in addition to the echoed fields).
	// If the field `is_disabled` is set to `true`, the agent should disable
	// itself by removing all breakpoints and detaching from the application.
	// It should however continue to poll `RegisterDebuggee` until reenabled.
	Debuggee *Debuggee `protobuf:"bytes,1,opt,name=debuggee" json:"debuggee,omitempty"`
}

func (m *RegisterDebuggeeResponse) Reset()                    { *m = RegisterDebuggeeResponse{} }
func (m *RegisterDebuggeeResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterDebuggeeResponse) ProtoMessage()               {}
func (*RegisterDebuggeeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RegisterDebuggeeResponse) GetDebuggee() *Debuggee {
	if m != nil {
		return m.Debuggee
	}
	return nil
}

// Request to list active breakpoints.
type ListActiveBreakpointsRequest struct {
	// Identifies the debuggee.
	DebuggeeId string `protobuf:"bytes,1,opt,name=debuggee_id,json=debuggeeId" json:"debuggee_id,omitempty"`
	// A token that, if specified, blocks the method call until the list
	// of active breakpoints has changed, or a server-selected timeout has
	// expired. The value should be set from the `next_wait_token` field in
	// the last response. The initial value should be set to `"init"`.
	WaitToken string `protobuf:"bytes,2,opt,name=wait_token,json=waitToken" json:"wait_token,omitempty"`
	// If set to `true` (recommended), returns `google.rpc.Code.OK` status and
	// sets the `wait_expired` response field to `true` when the server-selected
	// timeout has expired.
	//
	// If set to `false` (deprecated), returns `google.rpc.Code.ABORTED` status
	// when the server-selected timeout has expired.
	SuccessOnTimeout bool `protobuf:"varint,3,opt,name=success_on_timeout,json=successOnTimeout" json:"success_on_timeout,omitempty"`
}

func (m *ListActiveBreakpointsRequest) Reset()                    { *m = ListActiveBreakpointsRequest{} }
func (m *ListActiveBreakpointsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListActiveBreakpointsRequest) ProtoMessage()               {}
func (*ListActiveBreakpointsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ListActiveBreakpointsRequest) GetDebuggeeId() string {
	if m != nil {
		return m.DebuggeeId
	}
	return ""
}

func (m *ListActiveBreakpointsRequest) GetWaitToken() string {
	if m != nil {
		return m.WaitToken
	}
	return ""
}

func (m *ListActiveBreakpointsRequest) GetSuccessOnTimeout() bool {
	if m != nil {
		return m.SuccessOnTimeout
	}
	return false
}

// Response for listing active breakpoints.
type ListActiveBreakpointsResponse struct {
	// List of all active breakpoints.
	// The fields `id` and `location` are guaranteed to be set on each breakpoint.
	Breakpoints []*Breakpoint `protobuf:"bytes,1,rep,name=breakpoints" json:"breakpoints,omitempty"`
	// A token that can be used in the next method call to block until
	// the list of breakpoints changes.
	NextWaitToken string `protobuf:"bytes,2,opt,name=next_wait_token,json=nextWaitToken" json:"next_wait_token,omitempty"`
	// If set to `true`, indicates that there is no change to the
	// list of active breakpoints and the server-selected timeout has expired.
	// The `breakpoints` field would be empty and should be ignored.
	WaitExpired bool `protobuf:"varint,3,opt,name=wait_expired,json=waitExpired" json:"wait_expired,omitempty"`
}

func (m *ListActiveBreakpointsResponse) Reset()                    { *m = ListActiveBreakpointsResponse{} }
func (m *ListActiveBreakpointsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListActiveBreakpointsResponse) ProtoMessage()               {}
func (*ListActiveBreakpointsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ListActiveBreakpointsResponse) GetBreakpoints() []*Breakpoint {
	if m != nil {
		return m.Breakpoints
	}
	return nil
}

func (m *ListActiveBreakpointsResponse) GetNextWaitToken() string {
	if m != nil {
		return m.NextWaitToken
	}
	return ""
}

func (m *ListActiveBreakpointsResponse) GetWaitExpired() bool {
	if m != nil {
		return m.WaitExpired
	}
	return false
}

// Request to update an active breakpoint.
type UpdateActiveBreakpointRequest struct {
	// Identifies the debuggee being debugged.
	DebuggeeId string `protobuf:"bytes,1,opt,name=debuggee_id,json=debuggeeId" json:"debuggee_id,omitempty"`
	// Updated breakpoint information.
	// The field `id` must be set.
	// The agent must echo all Breakpoint specification fields in the update.
	Breakpoint *Breakpoint `protobuf:"bytes,2,opt,name=breakpoint" json:"breakpoint,omitempty"`
}

func (m *UpdateActiveBreakpointRequest) Reset()                    { *m = UpdateActiveBreakpointRequest{} }
func (m *UpdateActiveBreakpointRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateActiveBreakpointRequest) ProtoMessage()               {}
func (*UpdateActiveBreakpointRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UpdateActiveBreakpointRequest) GetDebuggeeId() string {
	if m != nil {
		return m.DebuggeeId
	}
	return ""
}

func (m *UpdateActiveBreakpointRequest) GetBreakpoint() *Breakpoint {
	if m != nil {
		return m.Breakpoint
	}
	return nil
}

// Response for updating an active breakpoint.
// The message is defined to allow future extensions.
type UpdateActiveBreakpointResponse struct {
}

func (m *UpdateActiveBreakpointResponse) Reset()                    { *m = UpdateActiveBreakpointResponse{} }
func (m *UpdateActiveBreakpointResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateActiveBreakpointResponse) ProtoMessage()               {}
func (*UpdateActiveBreakpointResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto.RegisterType((*RegisterDebuggeeRequest)(nil), "google.devtools.clouddebugger.v2.RegisterDebuggeeRequest")
	proto.RegisterType((*RegisterDebuggeeResponse)(nil), "google.devtools.clouddebugger.v2.RegisterDebuggeeResponse")
	proto.RegisterType((*ListActiveBreakpointsRequest)(nil), "google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest")
	proto.RegisterType((*ListActiveBreakpointsResponse)(nil), "google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse")
	proto.RegisterType((*UpdateActiveBreakpointRequest)(nil), "google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest")
	proto.RegisterType((*UpdateActiveBreakpointResponse)(nil), "google.devtools.clouddebugger.v2.UpdateActiveBreakpointResponse")
}

func init() { proto.RegisterFile("google/devtools/clouddebugger/v2/controller.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 560 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0xd5, 0xb4, 0x02, 0xb5, 0xd7, 0xa0, 0x56, 0x23, 0x01, 0x96, 0x69, 0x20, 0xb5, 0x50, 0x15,
	0x85, 0xc8, 0x16, 0x86, 0x0d, 0x59, 0xf0, 0x48, 0x81, 0x0a, 0xa9, 0x40, 0x15, 0x05, 0x58, 0x46,
	0x8e, 0x7d, 0x89, 0x46, 0x4d, 0x66, 0x8c, 0x67, 0x1c, 0x8a, 0xaa, 0x6e, 0xd8, 0x82, 0xd8, 0xf0,
	0x17, 0xfc, 0x00, 0x12, 0xbf, 0x01, 0x9f, 0xc0, 0x8a, 0xaf, 0x40, 0xb6, 0xc7, 0x49, 0xfa, 0x48,
	0xdd, 0x46, 0x2c, 0x7d, 0xe6, 0x9e, 0x7b, 0xcf, 0x19, 0x9f, 0xb9, 0x70, 0xa7, 0x2f, 0x44, 0x7f,
	0x80, 0x6e, 0x88, 0x23, 0x25, 0xc4, 0x40, 0xba, 0xc1, 0x40, 0x24, 0x61, 0x88, 0xbd, 0xa4, 0xdf,
	0xc7, 0xd8, 0x1d, 0x79, 0x6e, 0x20, 0xb8, 0x8a, 0xc5, 0x60, 0x80, 0xb1, 0x13, 0xc5, 0x42, 0x09,
	0x5a, 0xcd, 0x29, 0x4e, 0x41, 0x71, 0x0e, 0x51, 0x9c, 0x91, 0x67, 0xad, 0xe9, 0xa6, 0x7e, 0xc4,
	0x5c, 0x9f, 0x73, 0xa1, 0x7c, 0xc5, 0x04, 0x97, 0x39, 0xdf, 0xba, 0x5d, 0x3a, 0x32, 0xf4, 0x95,
	0xaf, 0x8b, 0xaf, 0xeb, 0xe2, 0xec, 0xab, 0x97, 0xbc, 0x73, 0x71, 0x18, 0xa9, 0x8f, 0xf9, 0xa1,
	0xed, 0xc3, 0xb5, 0x36, 0xf6, 0x99, 0x54, 0x18, 0x3f, 0xc9, 0xe9, 0xd8, 0xc6, 0xf7, 0x09, 0x4a,
	0x45, 0x9f, 0xc1, 0x92, 0xee, 0x88, 0x26, 0xa9, 0x92, 0x9a, 0xe1, 0xd5, 0x9d, 0x32, 0xdd, 0xce,
	0xb8, 0xc9, 0x98, 0x6b, 0xf7, 0xc0, 0x3c, 0x3e, 0x42, 0x46, 0x82, 0x4b, 0xfc, 0x6f, 0x33, 0xbe,
	0x10, 0x58, 0xdb, 0x66, 0x52, 0x3d, 0x0e, 0x14, 0x1b, 0x61, 0x2b, 0x46, 0x7f, 0x37, 0x12, 0x8c,
	0x2b, 0x59, 0x98, 0xb9, 0x09, 0x46, 0x51, 0xdc, 0x65, 0x61, 0x36, 0x6b, 0xb9, 0x0d, 0x05, 0xf4,
	0x3c, 0xa4, 0x15, 0x80, 0x0f, 0x3e, 0x53, 0x5d, 0x25, 0x76, 0x91, 0x9b, 0x0b, 0xd9, 0xf9, 0x72,
	0x8a, 0x74, 0x52, 0x80, 0x36, 0x80, 0xca, 0x24, 0x08, 0x50, 0xca, 0xae, 0xe0, 0x5d, 0xc5, 0x86,
	0x28, 0x12, 0x65, 0x2e, 0x56, 0x49, 0x6d, 0xa9, 0xbd, 0xaa, 0x4f, 0x5e, 0xf1, 0x4e, 0x8e, 0xdb,
	0x3f, 0x09, 0x54, 0x66, 0xc8, 0xd1, 0xc6, 0x5f, 0x82, 0xd1, 0x9b, 0xc0, 0x26, 0xa9, 0x2e, 0xd6,
	0x0c, 0xaf, 0x51, 0xee, 0x7d, 0xd2, 0xab, 0x3d, 0xdd, 0x80, 0x6e, 0xc0, 0x0a, 0xc7, 0x3d, 0xd5,
	0x3d, 0xe6, 0xe1, 0x72, 0x0a, 0xbf, 0x1d, 0xfb, 0x58, 0x87, 0x4b, 0x59, 0x09, 0xee, 0x45, 0x2c,
	0xc6, 0x50, 0x3b, 0x30, 0x52, 0xec, 0x69, 0x0e, 0xd9, 0x5f, 0x09, 0x54, 0x5e, 0x47, 0xa1, 0xaf,
	0xf0, 0xa8, 0xfc, 0x33, 0x5f, 0xe6, 0x36, 0xc0, 0x44, 0x5c, 0x26, 0xe4, 0xbc, 0xe6, 0xa6, 0xf8,
	0x76, 0x15, 0x6e, 0xcc, 0xd2, 0x93, 0xdf, 0xa6, 0xf7, 0xf9, 0x02, 0x18, 0x9b, 0xe3, 0x47, 0xe6,
	0xd1, 0x1f, 0x04, 0x56, 0x8f, 0x66, 0x8e, 0xde, 0x2f, 0x17, 0x30, 0xe3, 0x29, 0x58, 0xcd, 0x79,
	0xa8, 0xb9, 0x36, 0xbb, 0xf1, 0xe9, 0xd7, 0x9f, 0x6f, 0x0b, 0x1b, 0xf6, 0xfa, 0xe1, 0x4d, 0xe0,
	0x16, 0xd7, 0x25, 0xdd, 0x58, 0x53, 0x9b, 0xa4, 0x4e, 0x7f, 0x13, 0xb8, 0x72, 0x62, 0x72, 0xe8,
	0x83, 0x72, 0x0d, 0xa7, 0xbd, 0x00, 0xeb, 0xe1, 0xdc, 0x7c, 0x6d, 0xa4, 0x99, 0x19, 0xb9, 0x47,
	0xbd, 0x99, 0x46, 0xf6, 0xa7, 0x52, 0x71, 0xe0, 0x4e, 0xc7, 0xf3, 0x2f, 0x81, 0xab, 0x27, 0xff,
	0x43, 0x7a, 0x06, 0x5d, 0xa7, 0xa6, 0xd1, 0x7a, 0x34, 0x7f, 0x03, 0xed, 0xec, 0x45, 0xe6, 0x6c,
	0xcb, 0x6a, 0x9d, 0xdf, 0x99, 0xbb, 0x3f, 0xf9, 0x70, 0x58, 0x78, 0xd0, 0x24, 0xf5, 0x56, 0x07,
	0x6e, 0x05, 0x62, 0x58, 0xaa, 0xaa, 0xb5, 0x32, 0x89, 0xec, 0x4e, 0xba, 0x8c, 0x77, 0xc8, 0xf7,
	0x05, 0x73, 0x2b, 0x67, 0x6d, 0xa6, 0xc5, 0xc5, 0xa6, 0x8b, 0x9d, 0x37, 0x5e, 0xef, 0x62, 0xb6,
	0xb0, 0xef, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xfb, 0x7b, 0xbc, 0xb8, 0x6f, 0x06, 0x00, 0x00,
}
