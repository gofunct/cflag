// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/api/servicecontrol/v1/service_controller.proto

package google_api_servicecontrol_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "go.pedge.io/pb/go/google/api"
import google_rpc "go.pedge.io/pb/go/google/rpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Request message for the Check method.
type CheckRequest struct {
	// The service name as specified in its service configuration. For example,
	// `"pubsub.googleapis.com"`.
	//
	// See
	// [google.api.Service](https://cloud.google.com/service-management/reference/rpc/google.api#google.api.Service)
	// for the definition of a service name.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName" json:"service_name,omitempty"`
	// The operation to be checked.
	Operation *Operation `protobuf:"bytes,2,opt,name=operation" json:"operation,omitempty"`
	// Specifies which version of service configuration should be used to process
	// the request.
	//
	// If unspecified or no matching version can be found, the
	// latest one will be used.
	ServiceConfigId string `protobuf:"bytes,4,opt,name=service_config_id,json=serviceConfigId" json:"service_config_id,omitempty"`
}

func (m *CheckRequest) Reset()                    { *m = CheckRequest{} }
func (m *CheckRequest) String() string            { return proto.CompactTextString(m) }
func (*CheckRequest) ProtoMessage()               {}
func (*CheckRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *CheckRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *CheckRequest) GetOperation() *Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (m *CheckRequest) GetServiceConfigId() string {
	if m != nil {
		return m.ServiceConfigId
	}
	return ""
}

// Response message for the Check method.
type CheckResponse struct {
	// The same operation_id value used in the [CheckRequest][google.api.servicecontrol.v1.CheckRequest].
	// Used for logging and diagnostics purposes.
	OperationId string `protobuf:"bytes,1,opt,name=operation_id,json=operationId" json:"operation_id,omitempty"`
	// Indicate the decision of the check.
	//
	// If no check errors are present, the service should process the operation.
	// Otherwise the service should use the list of errors to determine the
	// appropriate action.
	CheckErrors []*CheckError `protobuf:"bytes,2,rep,name=check_errors,json=checkErrors" json:"check_errors,omitempty"`
	// The actual config id used to process the request.
	ServiceConfigId string `protobuf:"bytes,5,opt,name=service_config_id,json=serviceConfigId" json:"service_config_id,omitempty"`
	// Feedback data returned from the server during processing a Check request.
	CheckInfo *CheckResponse_CheckInfo `protobuf:"bytes,6,opt,name=check_info,json=checkInfo" json:"check_info,omitempty"`
}

func (m *CheckResponse) Reset()                    { *m = CheckResponse{} }
func (m *CheckResponse) String() string            { return proto.CompactTextString(m) }
func (*CheckResponse) ProtoMessage()               {}
func (*CheckResponse) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *CheckResponse) GetOperationId() string {
	if m != nil {
		return m.OperationId
	}
	return ""
}

func (m *CheckResponse) GetCheckErrors() []*CheckError {
	if m != nil {
		return m.CheckErrors
	}
	return nil
}

func (m *CheckResponse) GetServiceConfigId() string {
	if m != nil {
		return m.ServiceConfigId
	}
	return ""
}

func (m *CheckResponse) GetCheckInfo() *CheckResponse_CheckInfo {
	if m != nil {
		return m.CheckInfo
	}
	return nil
}

type CheckResponse_CheckInfo struct {
	// Consumer info of this check.
	ConsumerInfo *CheckResponse_ConsumerInfo `protobuf:"bytes,2,opt,name=consumer_info,json=consumerInfo" json:"consumer_info,omitempty"`
}

func (m *CheckResponse_CheckInfo) Reset()                    { *m = CheckResponse_CheckInfo{} }
func (m *CheckResponse_CheckInfo) String() string            { return proto.CompactTextString(m) }
func (*CheckResponse_CheckInfo) ProtoMessage()               {}
func (*CheckResponse_CheckInfo) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1, 0} }

func (m *CheckResponse_CheckInfo) GetConsumerInfo() *CheckResponse_ConsumerInfo {
	if m != nil {
		return m.ConsumerInfo
	}
	return nil
}

// `ConsumerInfo` provides information about the consumer project.
type CheckResponse_ConsumerInfo struct {
	// The Google cloud project number, e.g. 1234567890. A value of 0 indicates
	// no project number is found.
	ProjectNumber int64 `protobuf:"varint,1,opt,name=project_number,json=projectNumber" json:"project_number,omitempty"`
}

func (m *CheckResponse_ConsumerInfo) Reset()                    { *m = CheckResponse_ConsumerInfo{} }
func (m *CheckResponse_ConsumerInfo) String() string            { return proto.CompactTextString(m) }
func (*CheckResponse_ConsumerInfo) ProtoMessage()               {}
func (*CheckResponse_ConsumerInfo) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1, 1} }

func (m *CheckResponse_ConsumerInfo) GetProjectNumber() int64 {
	if m != nil {
		return m.ProjectNumber
	}
	return 0
}

// Request message for the Report method.
type ReportRequest struct {
	// The service name as specified in its service configuration. For example,
	// `"pubsub.googleapis.com"`.
	//
	// See
	// [google.api.Service](https://cloud.google.com/service-management/reference/rpc/google.api#google.api.Service)
	// for the definition of a service name.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName" json:"service_name,omitempty"`
	// Operations to be reported.
	//
	// Typically the service should report one operation per request.
	// Putting multiple operations into a single request is allowed, but should
	// be used only when multiple operations are natually available at the time
	// of the report.
	//
	// If multiple operations are in a single request, the total request size
	// should be no larger than 1MB. See [ReportResponse.report_errors][google.api.servicecontrol.v1.ReportResponse.report_errors] for
	// partial failure behavior.
	Operations []*Operation `protobuf:"bytes,2,rep,name=operations" json:"operations,omitempty"`
	// Specifies which version of service config should be used to process the
	// request.
	//
	// If unspecified or no matching version can be found, the
	// latest one will be used.
	ServiceConfigId string `protobuf:"bytes,3,opt,name=service_config_id,json=serviceConfigId" json:"service_config_id,omitempty"`
}

func (m *ReportRequest) Reset()                    { *m = ReportRequest{} }
func (m *ReportRequest) String() string            { return proto.CompactTextString(m) }
func (*ReportRequest) ProtoMessage()               {}
func (*ReportRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

func (m *ReportRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *ReportRequest) GetOperations() []*Operation {
	if m != nil {
		return m.Operations
	}
	return nil
}

func (m *ReportRequest) GetServiceConfigId() string {
	if m != nil {
		return m.ServiceConfigId
	}
	return ""
}

// Response message for the Report method.
type ReportResponse struct {
	// Partial failures, one for each `Operation` in the request that failed
	// processing. There are three possible combinations of the RPC status:
	//
	// 1. The combination of a successful RPC status and an empty `report_errors`
	//    list indicates a complete success where all `Operations` in the
	//    request are processed successfully.
	// 2. The combination of a successful RPC status and a non-empty
	//    `report_errors` list indicates a partial success where some
	//    `Operations` in the request succeeded. Each
	//    `Operation` that failed processing has a corresponding item
	//    in this list.
	// 3. A failed RPC status indicates a general non-deterministic failure.
	//    When this happens, it's impossible to know which of the
	//    'Operations' in the request succeeded or failed.
	ReportErrors []*ReportResponse_ReportError `protobuf:"bytes,1,rep,name=report_errors,json=reportErrors" json:"report_errors,omitempty"`
	// The actual config id used to process the request.
	ServiceConfigId string `protobuf:"bytes,2,opt,name=service_config_id,json=serviceConfigId" json:"service_config_id,omitempty"`
}

func (m *ReportResponse) Reset()                    { *m = ReportResponse{} }
func (m *ReportResponse) String() string            { return proto.CompactTextString(m) }
func (*ReportResponse) ProtoMessage()               {}
func (*ReportResponse) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{3} }

func (m *ReportResponse) GetReportErrors() []*ReportResponse_ReportError {
	if m != nil {
		return m.ReportErrors
	}
	return nil
}

func (m *ReportResponse) GetServiceConfigId() string {
	if m != nil {
		return m.ServiceConfigId
	}
	return ""
}

// Represents the processing error of one [Operation][google.api.servicecontrol.v1.Operation] in the request.
type ReportResponse_ReportError struct {
	// The [Operation.operation_id][google.api.servicecontrol.v1.Operation.operation_id] value from the request.
	OperationId string `protobuf:"bytes,1,opt,name=operation_id,json=operationId" json:"operation_id,omitempty"`
	// Details of the error when processing the [Operation][google.api.servicecontrol.v1.Operation].
	Status *google_rpc.Status `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *ReportResponse_ReportError) Reset()                    { *m = ReportResponse_ReportError{} }
func (m *ReportResponse_ReportError) String() string            { return proto.CompactTextString(m) }
func (*ReportResponse_ReportError) ProtoMessage()               {}
func (*ReportResponse_ReportError) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{3, 0} }

func (m *ReportResponse_ReportError) GetOperationId() string {
	if m != nil {
		return m.OperationId
	}
	return ""
}

func (m *ReportResponse_ReportError) GetStatus() *google_rpc.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto.RegisterType((*CheckRequest)(nil), "google.api.servicecontrol.v1.CheckRequest")
	proto.RegisterType((*CheckResponse)(nil), "google.api.servicecontrol.v1.CheckResponse")
	proto.RegisterType((*CheckResponse_CheckInfo)(nil), "google.api.servicecontrol.v1.CheckResponse.CheckInfo")
	proto.RegisterType((*CheckResponse_ConsumerInfo)(nil), "google.api.servicecontrol.v1.CheckResponse.ConsumerInfo")
	proto.RegisterType((*ReportRequest)(nil), "google.api.servicecontrol.v1.ReportRequest")
	proto.RegisterType((*ReportResponse)(nil), "google.api.servicecontrol.v1.ReportResponse")
	proto.RegisterType((*ReportResponse_ReportError)(nil), "google.api.servicecontrol.v1.ReportResponse.ReportError")
}

func init() {
	proto.RegisterFile("google/api/servicecontrol/v1/service_controller.proto", fileDescriptor6)
}

var fileDescriptor6 = []byte{
	// 589 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xd5, 0x3a, 0x6d, 0xa4, 0x4c, 0x9c, 0xa2, 0xee, 0x01, 0x22, 0xab, 0x87, 0xd4, 0x12, 0x34,
	0x4a, 0x8b, 0xa3, 0x06, 0x45, 0x42, 0xb9, 0xd1, 0xa8, 0x54, 0x11, 0x52, 0xa9, 0x1c, 0x8e, 0x54,
	0x91, 0xbb, 0xd9, 0x04, 0x97, 0x64, 0xd7, 0xec, 0x3a, 0xb9, 0x20, 0x2e, 0x7c, 0x00, 0x07, 0xf8,
	0x03, 0x54, 0x89, 0x6f, 0xe0, 0x3b, 0xf8, 0x05, 0x3e, 0x02, 0x6e, 0x28, 0xbb, 0x6b, 0xd7, 0x15,
	0xc1, 0x38, 0x37, 0xef, 0xdb, 0x99, 0x79, 0x6f, 0x67, 0x9e, 0x07, 0xba, 0x53, 0xce, 0xa7, 0x33,
	0xda, 0x0e, 0xa2, 0xb0, 0x2d, 0xa9, 0x58, 0x86, 0x84, 0x12, 0xce, 0x62, 0xc1, 0x67, 0xed, 0xe5,
	0x71, 0x82, 0x8c, 0x0c, 0x34, 0xa3, 0xc2, 0x8b, 0x04, 0x8f, 0x39, 0xde, 0xd3, 0x69, 0x5e, 0x10,
	0x85, 0xde, 0xdd, 0x34, 0x6f, 0x79, 0xec, 0xec, 0x65, 0x8a, 0x06, 0x8c, 0xf1, 0x38, 0x88, 0x43,
	0xce, 0xa4, 0xce, 0x75, 0xbc, 0x5c, 0x4a, 0xf2, 0x86, 0x92, 0xb7, 0x23, 0x2a, 0x04, 0x37, 0x5c,
	0xce, 0x51, 0x6e, 0x3c, 0x8f, 0xa8, 0x50, 0xe5, 0x4d, 0xf4, 0x03, 0x13, 0x2d, 0x22, 0xd2, 0x96,
	0x71, 0x10, 0x2f, 0x0c, 0xad, 0x7b, 0x83, 0xc0, 0xee, 0xaf, 0x8a, 0xfb, 0xf4, 0xdd, 0x82, 0xca,
	0x18, 0xef, 0x83, 0x9d, 0xbc, 0x8f, 0x05, 0x73, 0x5a, 0x47, 0x0d, 0xd4, 0xac, 0xf8, 0x55, 0x83,
	0x9d, 0x07, 0x73, 0x8a, 0x4f, 0xa1, 0x92, 0xd6, 0xaf, 0x5b, 0x0d, 0xd4, 0xac, 0x76, 0x0e, 0xbc,
	0xbc, 0xa7, 0x7b, 0x2f, 0x93, 0x70, 0xff, 0x36, 0x13, 0xb7, 0x60, 0x37, 0xd3, 0xc9, 0x49, 0x38,
	0x1d, 0x85, 0xe3, 0xfa, 0x96, 0xa2, 0xbb, 0x67, 0x2e, 0xfa, 0x0a, 0x1f, 0x8c, 0xdd, 0x9b, 0x12,
	0xd4, 0x8c, 0x4c, 0x19, 0x71, 0x26, 0xe9, 0x4a, 0x67, 0x5a, 0x6a, 0x95, 0x68, 0x74, 0xa6, 0xd8,
	0x60, 0x8c, 0x5f, 0x80, 0x9d, 0xe9, 0x9b, 0xac, 0x5b, 0x8d, 0x52, 0xb3, 0xda, 0x69, 0xe6, 0x4b,
	0x55, 0x2c, 0xa7, 0xab, 0x04, 0xbf, 0x4a, 0xd2, 0x6f, 0xb9, 0x5e, 0xed, 0xf6, 0x5a, 0xb5, 0xf8,
	0x15, 0x80, 0x26, 0x0e, 0xd9, 0x84, 0xd7, 0xcb, 0xaa, 0x43, 0xdd, 0x02, 0xb4, 0xc9, 0xe3, 0xf4,
	0x69, 0xc0, 0x26, 0xdc, 0xaf, 0x90, 0xe4, 0xd3, 0xb9, 0x86, 0x4a, 0x8a, 0xe3, 0x4b, 0xa8, 0x11,
	0xce, 0xe4, 0x62, 0x4e, 0x85, 0x66, 0xd1, 0x73, 0x78, 0xba, 0x11, 0x8b, 0x29, 0xa0, 0x88, 0x6c,
	0x92, 0x39, 0x39, 0x5d, 0xb0, 0xb3, 0xb7, 0xf8, 0x21, 0xec, 0x44, 0x82, 0x5f, 0x53, 0x12, 0x8f,
	0xd8, 0x62, 0x7e, 0x45, 0x85, 0xea, 0x77, 0xc9, 0xaf, 0x19, 0xf4, 0x5c, 0x81, 0xee, 0x37, 0x04,
	0x35, 0x9f, 0x46, 0x5c, 0xc4, 0x1b, 0xd8, 0xe9, 0x0c, 0x20, 0x9d, 0x5a, 0x32, 0xa4, 0xc2, 0x7e,
	0xca, 0xa4, 0xae, 0x1f, 0x51, 0x69, 0xbd, 0xa1, 0x7e, 0x23, 0xd8, 0x49, 0x94, 0x1a, 0x47, 0x5d,
	0x42, 0x4d, 0x28, 0x24, 0xf1, 0x0b, 0x52, 0x52, 0xfe, 0xd3, 0xd2, 0xbb, 0x45, 0xcc, 0x51, 0xfb,
	0xc7, 0x16, 0xb7, 0x87, 0x7f, 0xa8, 0xb3, 0xd6, 0xaa, 0x73, 0x5e, 0x43, 0x35, 0x53, 0xa8, 0x88,
	0xd7, 0x5b, 0x50, 0xd6, 0xff, 0xb5, 0x31, 0x02, 0x4e, 0x54, 0x8b, 0x88, 0x78, 0x43, 0x75, 0xe3,
	0x9b, 0x88, 0xce, 0x77, 0x0b, 0x76, 0x87, 0x29, 0xa3, 0x59, 0x61, 0xf8, 0x13, 0x82, 0x6d, 0xe5,
	0x0f, 0xdc, 0x2a, 0x64, 0x22, 0x35, 0x5f, 0xe7, 0x70, 0x03, 0xc3, 0xb9, 0x47, 0x1f, 0x7f, 0xfc,
	0xfc, 0x62, 0x3d, 0x72, 0xf7, 0x33, 0x5b, 0x54, 0xb6, 0xdf, 0x67, 0x0d, 0xf2, 0xa1, 0xa7, 0x0c,
	0xdf, 0x43, 0x2d, 0xfc, 0x19, 0x41, 0x59, 0x77, 0x01, 0x1f, 0x16, 0x9b, 0x81, 0x96, 0x74, 0xb4,
	0xc9, 0xc0, 0xdc, 0xc7, 0x4a, 0xd3, 0x81, 0xeb, 0xe6, 0x69, 0xd2, 0x83, 0xec, 0xa1, 0xd6, 0xc9,
	0x73, 0x68, 0x10, 0x3e, 0xcf, 0x65, 0x38, 0xb9, 0xff, 0x57, 0x73, 0x2f, 0x56, 0xbb, 0xf6, 0x02,
	0xfd, 0x42, 0xe8, 0xab, 0xb5, 0x75, 0xf6, 0x6c, 0xd8, 0xbf, 0x2a, 0xab, 0xf5, 0xfb, 0xe4, 0x4f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x96, 0xd2, 0x4f, 0x58, 0x6a, 0x06, 0x00, 0x00,
}
