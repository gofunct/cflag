// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/genomics/v1/readgroup.proto

package google_genomics_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "go.pedge.io/pb/go/google/api"
import google_protobuf3 "github.com/golang/protobuf/ptypes/struct"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// A read group is all the data that's processed the same way by the sequencer.
type ReadGroup struct {
	// The server-generated read group ID, unique for all read groups.
	// Note: This is different than the @RG ID field in the SAM spec. For that
	// value, see [name][google.genomics.v1.ReadGroup.name].
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The dataset to which this read group belongs.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId" json:"dataset_id,omitempty"`
	// The read group name. This corresponds to the @RG ID field in the SAM spec.
	Name string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// A free-form text description of this read group.
	Description string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	// A client-supplied sample identifier for the reads in this read group.
	SampleId string `protobuf:"bytes,5,opt,name=sample_id,json=sampleId" json:"sample_id,omitempty"`
	// The experiment used to generate this read group.
	Experiment *ReadGroup_Experiment `protobuf:"bytes,6,opt,name=experiment" json:"experiment,omitempty"`
	// The predicted insert size of this read group. The insert size is the length
	// the sequenced DNA fragment from end-to-end, not including the adapters.
	PredictedInsertSize int32 `protobuf:"varint,7,opt,name=predicted_insert_size,json=predictedInsertSize" json:"predicted_insert_size,omitempty"`
	// The programs used to generate this read group. Programs are always
	// identical for all read groups within a read group set. For this reason,
	// only the first read group in a returned set will have this field
	// populated.
	Programs []*ReadGroup_Program `protobuf:"bytes,10,rep,name=programs" json:"programs,omitempty"`
	// The reference set the reads in this read group are aligned to.
	ReferenceSetId string `protobuf:"bytes,11,opt,name=reference_set_id,json=referenceSetId" json:"reference_set_id,omitempty"`
	// A map of additional read group information. This must be of the form
	// map<string, string[]> (string key mapping to a list of string values).
	Info map[string]*google_protobuf3.ListValue `protobuf:"bytes,12,rep,name=info" json:"info,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ReadGroup) Reset()                    { *m = ReadGroup{} }
func (m *ReadGroup) String() string            { return proto.CompactTextString(m) }
func (*ReadGroup) ProtoMessage()               {}
func (*ReadGroup) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

func (m *ReadGroup) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ReadGroup) GetDatasetId() string {
	if m != nil {
		return m.DatasetId
	}
	return ""
}

func (m *ReadGroup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReadGroup) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ReadGroup) GetSampleId() string {
	if m != nil {
		return m.SampleId
	}
	return ""
}

func (m *ReadGroup) GetExperiment() *ReadGroup_Experiment {
	if m != nil {
		return m.Experiment
	}
	return nil
}

func (m *ReadGroup) GetPredictedInsertSize() int32 {
	if m != nil {
		return m.PredictedInsertSize
	}
	return 0
}

func (m *ReadGroup) GetPrograms() []*ReadGroup_Program {
	if m != nil {
		return m.Programs
	}
	return nil
}

func (m *ReadGroup) GetReferenceSetId() string {
	if m != nil {
		return m.ReferenceSetId
	}
	return ""
}

func (m *ReadGroup) GetInfo() map[string]*google_protobuf3.ListValue {
	if m != nil {
		return m.Info
	}
	return nil
}

type ReadGroup_Experiment struct {
	// A client-supplied library identifier; a library is a collection of DNA
	// fragments which have been prepared for sequencing from a sample. This
	// field is important for quality control as error or bias can be introduced
	// during sample preparation.
	LibraryId string `protobuf:"bytes,1,opt,name=library_id,json=libraryId" json:"library_id,omitempty"`
	// The platform unit used as part of this experiment, for example
	// flowcell-barcode.lane for Illumina or slide for SOLiD. Corresponds to the
	// @RG PU field in the SAM spec.
	PlatformUnit string `protobuf:"bytes,2,opt,name=platform_unit,json=platformUnit" json:"platform_unit,omitempty"`
	// The sequencing center used as part of this experiment.
	SequencingCenter string `protobuf:"bytes,3,opt,name=sequencing_center,json=sequencingCenter" json:"sequencing_center,omitempty"`
	// The instrument model used as part of this experiment. This maps to
	// sequencing technology in the SAM spec.
	InstrumentModel string `protobuf:"bytes,4,opt,name=instrument_model,json=instrumentModel" json:"instrument_model,omitempty"`
}

func (m *ReadGroup_Experiment) Reset()                    { *m = ReadGroup_Experiment{} }
func (m *ReadGroup_Experiment) String() string            { return proto.CompactTextString(m) }
func (*ReadGroup_Experiment) ProtoMessage()               {}
func (*ReadGroup_Experiment) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0, 0} }

func (m *ReadGroup_Experiment) GetLibraryId() string {
	if m != nil {
		return m.LibraryId
	}
	return ""
}

func (m *ReadGroup_Experiment) GetPlatformUnit() string {
	if m != nil {
		return m.PlatformUnit
	}
	return ""
}

func (m *ReadGroup_Experiment) GetSequencingCenter() string {
	if m != nil {
		return m.SequencingCenter
	}
	return ""
}

func (m *ReadGroup_Experiment) GetInstrumentModel() string {
	if m != nil {
		return m.InstrumentModel
	}
	return ""
}

type ReadGroup_Program struct {
	// The command line used to run this program.
	CommandLine string `protobuf:"bytes,1,opt,name=command_line,json=commandLine" json:"command_line,omitempty"`
	// The user specified locally unique ID of the program. Used along with
	// `prevProgramId` to define an ordering between programs.
	Id string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	// The display name of the program. This is typically the colloquial name of
	// the tool used, for example 'bwa' or 'picard'.
	Name string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// The ID of the program run before this one.
	PrevProgramId string `protobuf:"bytes,4,opt,name=prev_program_id,json=prevProgramId" json:"prev_program_id,omitempty"`
	// The version of the program run.
	Version string `protobuf:"bytes,5,opt,name=version" json:"version,omitempty"`
}

func (m *ReadGroup_Program) Reset()                    { *m = ReadGroup_Program{} }
func (m *ReadGroup_Program) String() string            { return proto.CompactTextString(m) }
func (*ReadGroup_Program) ProtoMessage()               {}
func (*ReadGroup_Program) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0, 1} }

func (m *ReadGroup_Program) GetCommandLine() string {
	if m != nil {
		return m.CommandLine
	}
	return ""
}

func (m *ReadGroup_Program) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ReadGroup_Program) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReadGroup_Program) GetPrevProgramId() string {
	if m != nil {
		return m.PrevProgramId
	}
	return ""
}

func (m *ReadGroup_Program) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func init() {
	proto.RegisterType((*ReadGroup)(nil), "google.genomics.v1.ReadGroup")
	proto.RegisterType((*ReadGroup_Experiment)(nil), "google.genomics.v1.ReadGroup.Experiment")
	proto.RegisterType((*ReadGroup_Program)(nil), "google.genomics.v1.ReadGroup.Program")
}

func init() { proto.RegisterFile("google/genomics/v1/readgroup.proto", fileDescriptor7) }

var fileDescriptor7 = []byte{
	// 559 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0xdb, 0x6e, 0xd4, 0x30,
	0x10, 0x55, 0xb6, 0xd7, 0x4c, 0x7a, 0x59, 0x8c, 0x40, 0xd1, 0x02, 0xd2, 0x52, 0x04, 0x04, 0x21,
	0xb2, 0x74, 0x79, 0x41, 0xf0, 0x44, 0x51, 0x05, 0x91, 0x8a, 0x54, 0xa5, 0x82, 0xd7, 0xc8, 0x8d,
	0x67, 0x23, 0x8b, 0xc4, 0x0e, 0xb6, 0xb3, 0xa2, 0xfd, 0x0c, 0xbe, 0x82, 0x6f, 0xe1, 0x8b, 0x78,
	0x44, 0x76, 0xbc, 0x69, 0x25, 0xaa, 0xbe, 0xc5, 0xe7, 0xcc, 0xcc, 0x99, 0x99, 0x33, 0x81, 0x83,
	0x4a, 0xca, 0xaa, 0xc6, 0x59, 0x85, 0x42, 0x36, 0xbc, 0xd4, 0xb3, 0xe5, 0xe1, 0x4c, 0x21, 0x65,
	0x95, 0x92, 0x5d, 0x9b, 0xb6, 0x4a, 0x1a, 0x49, 0x48, 0x1f, 0x93, 0xae, 0x62, 0xd2, 0xe5, 0xe1,
	0xe4, 0xa1, 0xcf, 0xa3, 0x2d, 0x9f, 0x51, 0x21, 0xa4, 0xa1, 0x86, 0x4b, 0xa1, 0xfb, 0x8c, 0x81,
	0x75, 0xaf, 0xf3, 0x6e, 0x31, 0xd3, 0x46, 0x75, 0xa5, 0xe9, 0xd9, 0x83, 0x3f, 0x9b, 0x10, 0xe6,
	0x48, 0xd9, 0x27, 0xab, 0x41, 0xf6, 0x60, 0xc4, 0x59, 0x1c, 0x4c, 0x83, 0x24, 0xcc, 0x47, 0x9c,
	0x91, 0x47, 0x00, 0x8c, 0x1a, 0xaa, 0xd1, 0x14, 0x9c, 0xc5, 0x23, 0x87, 0x87, 0x1e, 0xc9, 0x18,
	0x21, 0xb0, 0x2e, 0x68, 0x83, 0xf1, 0x9a, 0x23, 0xdc, 0x37, 0x99, 0x42, 0xc4, 0x50, 0x97, 0x8a,
	0xb7, 0xb6, 0x89, 0x78, 0xdd, 0x51, 0xd7, 0x21, 0xf2, 0x00, 0x42, 0x4d, 0x9b, 0xb6, 0x46, 0x5b,
	0x73, 0xc3, 0xf1, 0xdb, 0x3d, 0x90, 0x31, 0xf2, 0x19, 0x00, 0x7f, 0xb6, 0xa8, 0x78, 0x83, 0xc2,
	0xc4, 0x9b, 0xd3, 0x20, 0x89, 0xe6, 0x49, 0xfa, 0xff, 0xd0, 0xe9, 0xd0, 0x74, 0x7a, 0x3c, 0xc4,
	0xe7, 0xd7, 0x72, 0xc9, 0x1c, 0xee, 0xb5, 0x0a, 0x19, 0x2f, 0x0d, 0xb2, 0x82, 0x0b, 0x8d, 0xca,
	0x14, 0x9a, 0x5f, 0x62, 0xbc, 0x35, 0x0d, 0x92, 0x8d, 0xfc, 0xee, 0x40, 0x66, 0x8e, 0x3b, 0xe3,
	0x97, 0x48, 0x3e, 0xc0, 0x76, 0xab, 0x64, 0xa5, 0x68, 0xa3, 0x63, 0x98, 0xae, 0x25, 0xd1, 0xfc,
	0xe9, 0xed, 0xda, 0xa7, 0x7d, 0x74, 0x3e, 0xa4, 0x91, 0x04, 0xc6, 0x0a, 0x17, 0xa8, 0x50, 0x94,
	0x58, 0xf8, 0xc5, 0x45, 0x6e, 0xc8, 0xbd, 0x01, 0x3f, 0x73, 0xdb, 0x7b, 0x0f, 0xeb, 0x5c, 0x2c,
	0x64, 0xbc, 0xe3, 0x84, 0x9e, 0xdf, 0x2e, 0x94, 0x89, 0x85, 0x3c, 0x16, 0x46, 0x5d, 0xe4, 0x2e,
	0x69, 0xf2, 0x3b, 0x00, 0xb8, 0x1a, 0xdc, 0x1a, 0x55, 0xf3, 0x73, 0x45, 0xd5, 0x45, 0x31, 0x18,
	0x18, 0x7a, 0x24, 0x63, 0xe4, 0x09, 0xec, 0xb6, 0x35, 0x35, 0x0b, 0xa9, 0x9a, 0xa2, 0x13, 0xdc,
	0x78, 0x2b, 0x77, 0x56, 0xe0, 0x57, 0xc1, 0x0d, 0x79, 0x09, 0x77, 0x34, 0xfe, 0xe8, 0x50, 0x94,
	0x5c, 0x54, 0x45, 0x89, 0xc2, 0xa0, 0xf2, 0xd6, 0x8e, 0xaf, 0x88, 0x8f, 0x0e, 0x27, 0x2f, 0x60,
	0xcc, 0x85, 0xbd, 0x24, 0x2b, 0x5f, 0x34, 0x92, 0x61, 0xed, 0xbd, 0xde, 0xbf, 0xc2, 0xbf, 0x58,
	0x78, 0xf2, 0x2b, 0x80, 0x2d, 0xbf, 0x27, 0xf2, 0x18, 0x76, 0x4a, 0xd9, 0x34, 0x54, 0xb0, 0xa2,
	0xe6, 0x02, 0x7d, 0xa7, 0x91, 0xc7, 0x4e, 0xb8, 0x40, 0x7f, 0x83, 0xa3, 0xe1, 0x06, 0x6f, 0x3a,
	0xb2, 0x67, 0xb0, 0xdf, 0x2a, 0x5c, 0x16, 0x7e, 0xeb, 0x76, 0xe6, 0x5e, 0x7c, 0xd7, 0xc2, 0x5e,
	0x2c, 0x63, 0x24, 0x86, 0xad, 0x25, 0x2a, 0x6d, 0x0f, 0xb1, 0x3f, 0xb4, 0xd5, 0x73, 0x72, 0x06,
	0xe1, 0xb0, 0x52, 0x32, 0x86, 0xb5, 0xef, 0x78, 0xe1, 0x9b, 0xb1, 0x9f, 0xe4, 0x35, 0x6c, 0x2c,
	0x69, 0xdd, 0xa1, 0xeb, 0x23, 0x9a, 0x4f, 0x56, 0xe6, 0xac, 0x7e, 0xa2, 0xf4, 0x84, 0x6b, 0xf3,
	0xcd, 0x46, 0xe4, 0x7d, 0xe0, 0xbb, 0xd1, 0xdb, 0xe0, 0xe8, 0x15, 0xdc, 0x2f, 0x65, 0x73, 0x83,
	0x91, 0x47, 0x7b, 0x83, 0x93, 0xa7, 0xb6, 0xc2, 0x69, 0xf0, 0x37, 0x08, 0xce, 0x37, 0x5d, 0xb5,
	0x37, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x53, 0x38, 0xe8, 0x04, 0xf8, 0x03, 0x00, 0x00,
}
