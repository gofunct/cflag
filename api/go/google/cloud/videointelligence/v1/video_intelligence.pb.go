// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/cloud/videointelligence/v1/video_intelligence.proto

package google_cloud_videointelligence_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "go.pedge.io/pb/go/google/api"
import _ "go.pedge.io/pb/go/google/longrunning"
import google_protobuf3 "github.com/golang/protobuf/ptypes/duration"
import google_protobuf4 "github.com/golang/protobuf/ptypes/timestamp"
import google_rpc "go.pedge.io/pb/go/google/rpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Video annotation feature.
type Feature int32

const (
	// Unspecified.
	Feature_FEATURE_UNSPECIFIED Feature = 0
	// Label detection. Detect objects, such as dog or flower.
	Feature_LABEL_DETECTION Feature = 1
	// Shot change detection.
	Feature_SHOT_CHANGE_DETECTION Feature = 2
	// Explicit content detection.
	Feature_EXPLICIT_CONTENT_DETECTION Feature = 3
	// Human face detection and tracking.
	Feature_FACE_DETECTION Feature = 4
)

var Feature_name = map[int32]string{
	0: "FEATURE_UNSPECIFIED",
	1: "LABEL_DETECTION",
	2: "SHOT_CHANGE_DETECTION",
	3: "EXPLICIT_CONTENT_DETECTION",
	4: "FACE_DETECTION",
}
var Feature_value = map[string]int32{
	"FEATURE_UNSPECIFIED":        0,
	"LABEL_DETECTION":            1,
	"SHOT_CHANGE_DETECTION":      2,
	"EXPLICIT_CONTENT_DETECTION": 3,
	"FACE_DETECTION":             4,
}

func (x Feature) String() string {
	return proto.EnumName(Feature_name, int32(x))
}
func (Feature) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Label detection mode.
type LabelDetectionMode int32

const (
	// Unspecified.
	LabelDetectionMode_LABEL_DETECTION_MODE_UNSPECIFIED LabelDetectionMode = 0
	// Detect shot-level labels.
	LabelDetectionMode_SHOT_MODE LabelDetectionMode = 1
	// Detect frame-level labels.
	LabelDetectionMode_FRAME_MODE LabelDetectionMode = 2
	// Detect both shot-level and frame-level labels.
	LabelDetectionMode_SHOT_AND_FRAME_MODE LabelDetectionMode = 3
)

var LabelDetectionMode_name = map[int32]string{
	0: "LABEL_DETECTION_MODE_UNSPECIFIED",
	1: "SHOT_MODE",
	2: "FRAME_MODE",
	3: "SHOT_AND_FRAME_MODE",
}
var LabelDetectionMode_value = map[string]int32{
	"LABEL_DETECTION_MODE_UNSPECIFIED": 0,
	"SHOT_MODE":                        1,
	"FRAME_MODE":                       2,
	"SHOT_AND_FRAME_MODE":              3,
}

func (x LabelDetectionMode) String() string {
	return proto.EnumName(LabelDetectionMode_name, int32(x))
}
func (LabelDetectionMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// Bucketized representation of likelihood.
type Likelihood int32

const (
	// Unspecified likelihood.
	Likelihood_LIKELIHOOD_UNSPECIFIED Likelihood = 0
	// Very unlikely.
	Likelihood_VERY_UNLIKELY Likelihood = 1
	// Unlikely.
	Likelihood_UNLIKELY Likelihood = 2
	// Possible.
	Likelihood_POSSIBLE Likelihood = 3
	// Likely.
	Likelihood_LIKELY Likelihood = 4
	// Very likely.
	Likelihood_VERY_LIKELY Likelihood = 5
)

var Likelihood_name = map[int32]string{
	0: "LIKELIHOOD_UNSPECIFIED",
	1: "VERY_UNLIKELY",
	2: "UNLIKELY",
	3: "POSSIBLE",
	4: "LIKELY",
	5: "VERY_LIKELY",
}
var Likelihood_value = map[string]int32{
	"LIKELIHOOD_UNSPECIFIED": 0,
	"VERY_UNLIKELY":          1,
	"UNLIKELY":               2,
	"POSSIBLE":               3,
	"LIKELY":                 4,
	"VERY_LIKELY":            5,
}

func (x Likelihood) String() string {
	return proto.EnumName(Likelihood_name, int32(x))
}
func (Likelihood) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// Video annotation request.
type AnnotateVideoRequest struct {
	// Input video location. Currently, only
	// [Google Cloud Storage](https://cloud.google.com/storage/) URIs are
	// supported, which must be specified in the following format:
	// `gs://bucket-id/object-id` (other URI formats return
	// [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT]). For more information, see
	// [Request URIs](/storage/docs/reference-uris).
	// A video URI may include wildcards in `object-id`, and thus identify
	// multiple videos. Supported wildcards: '*' to match 0 or more characters;
	// '?' to match 1 character. If unset, the input video should be embedded
	// in the request as `input_content`. If set, `input_content` should be unset.
	InputUri string `protobuf:"bytes,1,opt,name=input_uri,json=inputUri" json:"input_uri,omitempty"`
	// The video data bytes.
	// If unset, the input video(s) should be specified via `input_uri`.
	// If set, `input_uri` should be unset.
	InputContent []byte `protobuf:"bytes,6,opt,name=input_content,json=inputContent,proto3" json:"input_content,omitempty"`
	// Requested video annotation features.
	Features []Feature `protobuf:"varint,2,rep,packed,name=features,enum=google.cloud.videointelligence.v1.Feature" json:"features,omitempty"`
	// Additional video context and/or feature-specific parameters.
	VideoContext *VideoContext `protobuf:"bytes,3,opt,name=video_context,json=videoContext" json:"video_context,omitempty"`
	// Optional location where the output (in JSON format) should be stored.
	// Currently, only [Google Cloud Storage](https://cloud.google.com/storage/)
	// URIs are supported, which must be specified in the following format:
	// `gs://bucket-id/object-id` (other URI formats return
	// [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT]). For more information, see
	// [Request URIs](/storage/docs/reference-uris).
	OutputUri string `protobuf:"bytes,4,opt,name=output_uri,json=outputUri" json:"output_uri,omitempty"`
	// Optional cloud region where annotation should take place. Supported cloud
	// regions: `us-east1`, `us-west1`, `europe-west1`, `asia-east1`. If no region
	// is specified, a region will be determined based on video file location.
	LocationId string `protobuf:"bytes,5,opt,name=location_id,json=locationId" json:"location_id,omitempty"`
}

func (m *AnnotateVideoRequest) Reset()                    { *m = AnnotateVideoRequest{} }
func (m *AnnotateVideoRequest) String() string            { return proto.CompactTextString(m) }
func (*AnnotateVideoRequest) ProtoMessage()               {}
func (*AnnotateVideoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AnnotateVideoRequest) GetInputUri() string {
	if m != nil {
		return m.InputUri
	}
	return ""
}

func (m *AnnotateVideoRequest) GetInputContent() []byte {
	if m != nil {
		return m.InputContent
	}
	return nil
}

func (m *AnnotateVideoRequest) GetFeatures() []Feature {
	if m != nil {
		return m.Features
	}
	return nil
}

func (m *AnnotateVideoRequest) GetVideoContext() *VideoContext {
	if m != nil {
		return m.VideoContext
	}
	return nil
}

func (m *AnnotateVideoRequest) GetOutputUri() string {
	if m != nil {
		return m.OutputUri
	}
	return ""
}

func (m *AnnotateVideoRequest) GetLocationId() string {
	if m != nil {
		return m.LocationId
	}
	return ""
}

// Video context and/or feature-specific parameters.
type VideoContext struct {
	// Video segments to annotate. The segments may overlap and are not required
	// to be contiguous or span the whole video. If unspecified, each video
	// is treated as a single segment.
	Segments []*VideoSegment `protobuf:"bytes,1,rep,name=segments" json:"segments,omitempty"`
	// Config for LABEL_DETECTION.
	LabelDetectionConfig *LabelDetectionConfig `protobuf:"bytes,2,opt,name=label_detection_config,json=labelDetectionConfig" json:"label_detection_config,omitempty"`
	// Config for SHOT_CHANGE_DETECTION.
	ShotChangeDetectionConfig *ShotChangeDetectionConfig `protobuf:"bytes,3,opt,name=shot_change_detection_config,json=shotChangeDetectionConfig" json:"shot_change_detection_config,omitempty"`
	// Config for EXPLICIT_CONTENT_DETECTION.
	ExplicitContentDetectionConfig *ExplicitContentDetectionConfig `protobuf:"bytes,4,opt,name=explicit_content_detection_config,json=explicitContentDetectionConfig" json:"explicit_content_detection_config,omitempty"`
	// Config for FACE_DETECTION.
	FaceDetectionConfig *FaceDetectionConfig `protobuf:"bytes,5,opt,name=face_detection_config,json=faceDetectionConfig" json:"face_detection_config,omitempty"`
}

func (m *VideoContext) Reset()                    { *m = VideoContext{} }
func (m *VideoContext) String() string            { return proto.CompactTextString(m) }
func (*VideoContext) ProtoMessage()               {}
func (*VideoContext) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *VideoContext) GetSegments() []*VideoSegment {
	if m != nil {
		return m.Segments
	}
	return nil
}

func (m *VideoContext) GetLabelDetectionConfig() *LabelDetectionConfig {
	if m != nil {
		return m.LabelDetectionConfig
	}
	return nil
}

func (m *VideoContext) GetShotChangeDetectionConfig() *ShotChangeDetectionConfig {
	if m != nil {
		return m.ShotChangeDetectionConfig
	}
	return nil
}

func (m *VideoContext) GetExplicitContentDetectionConfig() *ExplicitContentDetectionConfig {
	if m != nil {
		return m.ExplicitContentDetectionConfig
	}
	return nil
}

func (m *VideoContext) GetFaceDetectionConfig() *FaceDetectionConfig {
	if m != nil {
		return m.FaceDetectionConfig
	}
	return nil
}

// Config for LABEL_DETECTION.
type LabelDetectionConfig struct {
	// What labels should be detected with LABEL_DETECTION, in addition to
	// video-level labels or segment-level labels.
	// If unspecified, defaults to `SHOT_MODE`.
	LabelDetectionMode LabelDetectionMode `protobuf:"varint,1,opt,name=label_detection_mode,json=labelDetectionMode,enum=google.cloud.videointelligence.v1.LabelDetectionMode" json:"label_detection_mode,omitempty"`
	// Whether the video has been shot from a stationary (i.e. non-moving) camera.
	// When set to true, might improve detection accuracy for moving objects.
	// Should be used with `SHOT_AND_FRAME_MODE` enabled.
	StationaryCamera bool `protobuf:"varint,2,opt,name=stationary_camera,json=stationaryCamera" json:"stationary_camera,omitempty"`
	// Model to use for label detection.
	// Supported values: "builtin/stable" (the default if unset) and
	// "builtin/latest".
	Model string `protobuf:"bytes,3,opt,name=model" json:"model,omitempty"`
}

func (m *LabelDetectionConfig) Reset()                    { *m = LabelDetectionConfig{} }
func (m *LabelDetectionConfig) String() string            { return proto.CompactTextString(m) }
func (*LabelDetectionConfig) ProtoMessage()               {}
func (*LabelDetectionConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *LabelDetectionConfig) GetLabelDetectionMode() LabelDetectionMode {
	if m != nil {
		return m.LabelDetectionMode
	}
	return LabelDetectionMode_LABEL_DETECTION_MODE_UNSPECIFIED
}

func (m *LabelDetectionConfig) GetStationaryCamera() bool {
	if m != nil {
		return m.StationaryCamera
	}
	return false
}

func (m *LabelDetectionConfig) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

// Config for SHOT_CHANGE_DETECTION.
type ShotChangeDetectionConfig struct {
	// Model to use for shot change detection.
	// Supported values: "builtin/stable" (the default if unset) and
	// "builtin/latest".
	Model string `protobuf:"bytes,1,opt,name=model" json:"model,omitempty"`
}

func (m *ShotChangeDetectionConfig) Reset()                    { *m = ShotChangeDetectionConfig{} }
func (m *ShotChangeDetectionConfig) String() string            { return proto.CompactTextString(m) }
func (*ShotChangeDetectionConfig) ProtoMessage()               {}
func (*ShotChangeDetectionConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ShotChangeDetectionConfig) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

// Config for EXPLICIT_CONTENT_DETECTION.
type ExplicitContentDetectionConfig struct {
	// Model to use for explicit content detection.
	// Supported values: "builtin/stable" (the default if unset) and
	// "builtin/latest".
	Model string `protobuf:"bytes,1,opt,name=model" json:"model,omitempty"`
}

func (m *ExplicitContentDetectionConfig) Reset()                    { *m = ExplicitContentDetectionConfig{} }
func (m *ExplicitContentDetectionConfig) String() string            { return proto.CompactTextString(m) }
func (*ExplicitContentDetectionConfig) ProtoMessage()               {}
func (*ExplicitContentDetectionConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ExplicitContentDetectionConfig) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

// Config for FACE_DETECTION.
type FaceDetectionConfig struct {
	// Model to use for face detection.
	// Supported values: "builtin/stable" (the default if unset) and
	// "builtin/latest".
	Model string `protobuf:"bytes,1,opt,name=model" json:"model,omitempty"`
	// Whether bounding boxes be included in the face annotation output.
	IncludeBoundingBoxes bool `protobuf:"varint,2,opt,name=include_bounding_boxes,json=includeBoundingBoxes" json:"include_bounding_boxes,omitempty"`
}

func (m *FaceDetectionConfig) Reset()                    { *m = FaceDetectionConfig{} }
func (m *FaceDetectionConfig) String() string            { return proto.CompactTextString(m) }
func (*FaceDetectionConfig) ProtoMessage()               {}
func (*FaceDetectionConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *FaceDetectionConfig) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *FaceDetectionConfig) GetIncludeBoundingBoxes() bool {
	if m != nil {
		return m.IncludeBoundingBoxes
	}
	return false
}

// Video segment.
type VideoSegment struct {
	// Time-offset, relative to the beginning of the video,
	// corresponding to the start of the segment (inclusive).
	StartTimeOffset *google_protobuf3.Duration `protobuf:"bytes,1,opt,name=start_time_offset,json=startTimeOffset" json:"start_time_offset,omitempty"`
	// Time-offset, relative to the beginning of the video,
	// corresponding to the end of the segment (inclusive).
	EndTimeOffset *google_protobuf3.Duration `protobuf:"bytes,2,opt,name=end_time_offset,json=endTimeOffset" json:"end_time_offset,omitempty"`
}

func (m *VideoSegment) Reset()                    { *m = VideoSegment{} }
func (m *VideoSegment) String() string            { return proto.CompactTextString(m) }
func (*VideoSegment) ProtoMessage()               {}
func (*VideoSegment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *VideoSegment) GetStartTimeOffset() *google_protobuf3.Duration {
	if m != nil {
		return m.StartTimeOffset
	}
	return nil
}

func (m *VideoSegment) GetEndTimeOffset() *google_protobuf3.Duration {
	if m != nil {
		return m.EndTimeOffset
	}
	return nil
}

// Video segment level annotation results for label detection.
type LabelSegment struct {
	// Video segment where a label was detected.
	Segment *VideoSegment `protobuf:"bytes,1,opt,name=segment" json:"segment,omitempty"`
	// Confidence that the label is accurate. Range: [0, 1].
	Confidence float32 `protobuf:"fixed32,2,opt,name=confidence" json:"confidence,omitempty"`
}

func (m *LabelSegment) Reset()                    { *m = LabelSegment{} }
func (m *LabelSegment) String() string            { return proto.CompactTextString(m) }
func (*LabelSegment) ProtoMessage()               {}
func (*LabelSegment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *LabelSegment) GetSegment() *VideoSegment {
	if m != nil {
		return m.Segment
	}
	return nil
}

func (m *LabelSegment) GetConfidence() float32 {
	if m != nil {
		return m.Confidence
	}
	return 0
}

// Video frame level annotation results for label detection.
type LabelFrame struct {
	// Time-offset, relative to the beginning of the video, corresponding to the
	// video frame for this location.
	TimeOffset *google_protobuf3.Duration `protobuf:"bytes,1,opt,name=time_offset,json=timeOffset" json:"time_offset,omitempty"`
	// Confidence that the label is accurate. Range: [0, 1].
	Confidence float32 `protobuf:"fixed32,2,opt,name=confidence" json:"confidence,omitempty"`
}

func (m *LabelFrame) Reset()                    { *m = LabelFrame{} }
func (m *LabelFrame) String() string            { return proto.CompactTextString(m) }
func (*LabelFrame) ProtoMessage()               {}
func (*LabelFrame) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *LabelFrame) GetTimeOffset() *google_protobuf3.Duration {
	if m != nil {
		return m.TimeOffset
	}
	return nil
}

func (m *LabelFrame) GetConfidence() float32 {
	if m != nil {
		return m.Confidence
	}
	return 0
}

// Detected entity from video analysis.
type Entity struct {
	// Opaque entity ID. Some IDs may be available in
	// [Google Knowledge Graph Search
	// API](https://developers.google.com/knowledge-graph/).
	EntityId string `protobuf:"bytes,1,opt,name=entity_id,json=entityId" json:"entity_id,omitempty"`
	// Textual description, e.g. `Fixed-gear bicycle`.
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	// Language code for `description` in BCP-47 format.
	LanguageCode string `protobuf:"bytes,3,opt,name=language_code,json=languageCode" json:"language_code,omitempty"`
}

func (m *Entity) Reset()                    { *m = Entity{} }
func (m *Entity) String() string            { return proto.CompactTextString(m) }
func (*Entity) ProtoMessage()               {}
func (*Entity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Entity) GetEntityId() string {
	if m != nil {
		return m.EntityId
	}
	return ""
}

func (m *Entity) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Entity) GetLanguageCode() string {
	if m != nil {
		return m.LanguageCode
	}
	return ""
}

// Label annotation.
type LabelAnnotation struct {
	// Detected entity.
	Entity *Entity `protobuf:"bytes,1,opt,name=entity" json:"entity,omitempty"`
	// Common categories for the detected entity.
	// E.g. when the label is `Terrier` the category is likely `dog`. And in some
	// cases there might be more than one categories e.g. `Terrier` could also be
	// a `pet`.
	CategoryEntities []*Entity `protobuf:"bytes,2,rep,name=category_entities,json=categoryEntities" json:"category_entities,omitempty"`
	// All video segments where a label was detected.
	Segments []*LabelSegment `protobuf:"bytes,3,rep,name=segments" json:"segments,omitempty"`
	// All video frames where a label was detected.
	Frames []*LabelFrame `protobuf:"bytes,4,rep,name=frames" json:"frames,omitempty"`
}

func (m *LabelAnnotation) Reset()                    { *m = LabelAnnotation{} }
func (m *LabelAnnotation) String() string            { return proto.CompactTextString(m) }
func (*LabelAnnotation) ProtoMessage()               {}
func (*LabelAnnotation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *LabelAnnotation) GetEntity() *Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (m *LabelAnnotation) GetCategoryEntities() []*Entity {
	if m != nil {
		return m.CategoryEntities
	}
	return nil
}

func (m *LabelAnnotation) GetSegments() []*LabelSegment {
	if m != nil {
		return m.Segments
	}
	return nil
}

func (m *LabelAnnotation) GetFrames() []*LabelFrame {
	if m != nil {
		return m.Frames
	}
	return nil
}

// Video frame level annotation results for explicit content.
type ExplicitContentFrame struct {
	// Time-offset, relative to the beginning of the video, corresponding to the
	// video frame for this location.
	TimeOffset *google_protobuf3.Duration `protobuf:"bytes,1,opt,name=time_offset,json=timeOffset" json:"time_offset,omitempty"`
	// Likelihood of the pornography content..
	PornographyLikelihood Likelihood `protobuf:"varint,2,opt,name=pornography_likelihood,json=pornographyLikelihood,enum=google.cloud.videointelligence.v1.Likelihood" json:"pornography_likelihood,omitempty"`
}

func (m *ExplicitContentFrame) Reset()                    { *m = ExplicitContentFrame{} }
func (m *ExplicitContentFrame) String() string            { return proto.CompactTextString(m) }
func (*ExplicitContentFrame) ProtoMessage()               {}
func (*ExplicitContentFrame) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ExplicitContentFrame) GetTimeOffset() *google_protobuf3.Duration {
	if m != nil {
		return m.TimeOffset
	}
	return nil
}

func (m *ExplicitContentFrame) GetPornographyLikelihood() Likelihood {
	if m != nil {
		return m.PornographyLikelihood
	}
	return Likelihood_LIKELIHOOD_UNSPECIFIED
}

// Explicit content annotation (based on per-frame visual signals only).
// If no explicit content has been detected in a frame, no annotations are
// present for that frame.
type ExplicitContentAnnotation struct {
	// All video frames where explicit content was detected.
	Frames []*ExplicitContentFrame `protobuf:"bytes,1,rep,name=frames" json:"frames,omitempty"`
}

func (m *ExplicitContentAnnotation) Reset()                    { *m = ExplicitContentAnnotation{} }
func (m *ExplicitContentAnnotation) String() string            { return proto.CompactTextString(m) }
func (*ExplicitContentAnnotation) ProtoMessage()               {}
func (*ExplicitContentAnnotation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ExplicitContentAnnotation) GetFrames() []*ExplicitContentFrame {
	if m != nil {
		return m.Frames
	}
	return nil
}

// Normalized bounding box.
// The normalized vertex coordinates are relative to the original image.
// Range: [0, 1].
type NormalizedBoundingBox struct {
	// Left X coordinate.
	Left float32 `protobuf:"fixed32,1,opt,name=left" json:"left,omitempty"`
	// Top Y coordinate.
	Top float32 `protobuf:"fixed32,2,opt,name=top" json:"top,omitempty"`
	// Right X coordinate.
	Right float32 `protobuf:"fixed32,3,opt,name=right" json:"right,omitempty"`
	// Bottom Y coordinate.
	Bottom float32 `protobuf:"fixed32,4,opt,name=bottom" json:"bottom,omitempty"`
}

func (m *NormalizedBoundingBox) Reset()                    { *m = NormalizedBoundingBox{} }
func (m *NormalizedBoundingBox) String() string            { return proto.CompactTextString(m) }
func (*NormalizedBoundingBox) ProtoMessage()               {}
func (*NormalizedBoundingBox) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *NormalizedBoundingBox) GetLeft() float32 {
	if m != nil {
		return m.Left
	}
	return 0
}

func (m *NormalizedBoundingBox) GetTop() float32 {
	if m != nil {
		return m.Top
	}
	return 0
}

func (m *NormalizedBoundingBox) GetRight() float32 {
	if m != nil {
		return m.Right
	}
	return 0
}

func (m *NormalizedBoundingBox) GetBottom() float32 {
	if m != nil {
		return m.Bottom
	}
	return 0
}

// Video segment level annotation results for face detection.
type FaceSegment struct {
	// Video segment where a face was detected.
	Segment *VideoSegment `protobuf:"bytes,1,opt,name=segment" json:"segment,omitempty"`
}

func (m *FaceSegment) Reset()                    { *m = FaceSegment{} }
func (m *FaceSegment) String() string            { return proto.CompactTextString(m) }
func (*FaceSegment) ProtoMessage()               {}
func (*FaceSegment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *FaceSegment) GetSegment() *VideoSegment {
	if m != nil {
		return m.Segment
	}
	return nil
}

// Video frame level annotation results for face detection.
type FaceFrame struct {
	// Normalized Bounding boxes in a frame.
	// There can be more than one boxes if the same face is detected in multiple
	// locations within the current frame.
	NormalizedBoundingBoxes []*NormalizedBoundingBox `protobuf:"bytes,1,rep,name=normalized_bounding_boxes,json=normalizedBoundingBoxes" json:"normalized_bounding_boxes,omitempty"`
	// Time-offset, relative to the beginning of the video,
	// corresponding to the video frame for this location.
	TimeOffset *google_protobuf3.Duration `protobuf:"bytes,2,opt,name=time_offset,json=timeOffset" json:"time_offset,omitempty"`
}

func (m *FaceFrame) Reset()                    { *m = FaceFrame{} }
func (m *FaceFrame) String() string            { return proto.CompactTextString(m) }
func (*FaceFrame) ProtoMessage()               {}
func (*FaceFrame) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *FaceFrame) GetNormalizedBoundingBoxes() []*NormalizedBoundingBox {
	if m != nil {
		return m.NormalizedBoundingBoxes
	}
	return nil
}

func (m *FaceFrame) GetTimeOffset() *google_protobuf3.Duration {
	if m != nil {
		return m.TimeOffset
	}
	return nil
}

// Face annotation.
type FaceAnnotation struct {
	// Thumbnail of a representative face view (in JPEG format).
	Thumbnail []byte `protobuf:"bytes,1,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	// All video segments where a face was detected.
	Segments []*FaceSegment `protobuf:"bytes,2,rep,name=segments" json:"segments,omitempty"`
	// All video frames where a face was detected.
	Frames []*FaceFrame `protobuf:"bytes,3,rep,name=frames" json:"frames,omitempty"`
}

func (m *FaceAnnotation) Reset()                    { *m = FaceAnnotation{} }
func (m *FaceAnnotation) String() string            { return proto.CompactTextString(m) }
func (*FaceAnnotation) ProtoMessage()               {}
func (*FaceAnnotation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *FaceAnnotation) GetThumbnail() []byte {
	if m != nil {
		return m.Thumbnail
	}
	return nil
}

func (m *FaceAnnotation) GetSegments() []*FaceSegment {
	if m != nil {
		return m.Segments
	}
	return nil
}

func (m *FaceAnnotation) GetFrames() []*FaceFrame {
	if m != nil {
		return m.Frames
	}
	return nil
}

// Annotation results for a single video.
type VideoAnnotationResults struct {
	// Video file location in
	// [Google Cloud Storage](https://cloud.google.com/storage/).
	InputUri string `protobuf:"bytes,1,opt,name=input_uri,json=inputUri" json:"input_uri,omitempty"`
	// Label annotations on video level or user specified segment level.
	// There is exactly one element for each unique label.
	SegmentLabelAnnotations []*LabelAnnotation `protobuf:"bytes,2,rep,name=segment_label_annotations,json=segmentLabelAnnotations" json:"segment_label_annotations,omitempty"`
	// Label annotations on shot level.
	// There is exactly one element for each unique label.
	ShotLabelAnnotations []*LabelAnnotation `protobuf:"bytes,3,rep,name=shot_label_annotations,json=shotLabelAnnotations" json:"shot_label_annotations,omitempty"`
	// Label annotations on frame level.
	// There is exactly one element for each unique label.
	FrameLabelAnnotations []*LabelAnnotation `protobuf:"bytes,4,rep,name=frame_label_annotations,json=frameLabelAnnotations" json:"frame_label_annotations,omitempty"`
	// Face annotations. There is exactly one element for each unique face.
	FaceAnnotations []*FaceAnnotation `protobuf:"bytes,5,rep,name=face_annotations,json=faceAnnotations" json:"face_annotations,omitempty"`
	// Shot annotations. Each shot is represented as a video segment.
	ShotAnnotations []*VideoSegment `protobuf:"bytes,6,rep,name=shot_annotations,json=shotAnnotations" json:"shot_annotations,omitempty"`
	// Explicit content annotation.
	ExplicitAnnotation *ExplicitContentAnnotation `protobuf:"bytes,7,opt,name=explicit_annotation,json=explicitAnnotation" json:"explicit_annotation,omitempty"`
	// If set, indicates an error. Note that for a single `AnnotateVideoRequest`
	// some videos may succeed and some may fail.
	Error *google_rpc.Status `protobuf:"bytes,9,opt,name=error" json:"error,omitempty"`
}

func (m *VideoAnnotationResults) Reset()                    { *m = VideoAnnotationResults{} }
func (m *VideoAnnotationResults) String() string            { return proto.CompactTextString(m) }
func (*VideoAnnotationResults) ProtoMessage()               {}
func (*VideoAnnotationResults) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *VideoAnnotationResults) GetInputUri() string {
	if m != nil {
		return m.InputUri
	}
	return ""
}

func (m *VideoAnnotationResults) GetSegmentLabelAnnotations() []*LabelAnnotation {
	if m != nil {
		return m.SegmentLabelAnnotations
	}
	return nil
}

func (m *VideoAnnotationResults) GetShotLabelAnnotations() []*LabelAnnotation {
	if m != nil {
		return m.ShotLabelAnnotations
	}
	return nil
}

func (m *VideoAnnotationResults) GetFrameLabelAnnotations() []*LabelAnnotation {
	if m != nil {
		return m.FrameLabelAnnotations
	}
	return nil
}

func (m *VideoAnnotationResults) GetFaceAnnotations() []*FaceAnnotation {
	if m != nil {
		return m.FaceAnnotations
	}
	return nil
}

func (m *VideoAnnotationResults) GetShotAnnotations() []*VideoSegment {
	if m != nil {
		return m.ShotAnnotations
	}
	return nil
}

func (m *VideoAnnotationResults) GetExplicitAnnotation() *ExplicitContentAnnotation {
	if m != nil {
		return m.ExplicitAnnotation
	}
	return nil
}

func (m *VideoAnnotationResults) GetError() *google_rpc.Status {
	if m != nil {
		return m.Error
	}
	return nil
}

// Video annotation response. Included in the `response`
// field of the `Operation` returned by the `GetOperation`
// call of the `google::longrunning::Operations` service.
type AnnotateVideoResponse struct {
	// Annotation results for all videos specified in `AnnotateVideoRequest`.
	AnnotationResults []*VideoAnnotationResults `protobuf:"bytes,1,rep,name=annotation_results,json=annotationResults" json:"annotation_results,omitempty"`
}

func (m *AnnotateVideoResponse) Reset()                    { *m = AnnotateVideoResponse{} }
func (m *AnnotateVideoResponse) String() string            { return proto.CompactTextString(m) }
func (*AnnotateVideoResponse) ProtoMessage()               {}
func (*AnnotateVideoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *AnnotateVideoResponse) GetAnnotationResults() []*VideoAnnotationResults {
	if m != nil {
		return m.AnnotationResults
	}
	return nil
}

// Annotation progress for a single video.
type VideoAnnotationProgress struct {
	// Video file location in
	// [Google Cloud Storage](https://cloud.google.com/storage/).
	InputUri string `protobuf:"bytes,1,opt,name=input_uri,json=inputUri" json:"input_uri,omitempty"`
	// Approximate percentage processed thus far.
	// Guaranteed to be 100 when fully processed.
	ProgressPercent int32 `protobuf:"varint,2,opt,name=progress_percent,json=progressPercent" json:"progress_percent,omitempty"`
	// Time when the request was received.
	StartTime *google_protobuf4.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	// Time of the most recent update.
	UpdateTime *google_protobuf4.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
}

func (m *VideoAnnotationProgress) Reset()                    { *m = VideoAnnotationProgress{} }
func (m *VideoAnnotationProgress) String() string            { return proto.CompactTextString(m) }
func (*VideoAnnotationProgress) ProtoMessage()               {}
func (*VideoAnnotationProgress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *VideoAnnotationProgress) GetInputUri() string {
	if m != nil {
		return m.InputUri
	}
	return ""
}

func (m *VideoAnnotationProgress) GetProgressPercent() int32 {
	if m != nil {
		return m.ProgressPercent
	}
	return 0
}

func (m *VideoAnnotationProgress) GetStartTime() *google_protobuf4.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *VideoAnnotationProgress) GetUpdateTime() *google_protobuf4.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

// Video annotation progress. Included in the `metadata`
// field of the `Operation` returned by the `GetOperation`
// call of the `google::longrunning::Operations` service.
type AnnotateVideoProgress struct {
	// Progress metadata for all videos specified in `AnnotateVideoRequest`.
	AnnotationProgress []*VideoAnnotationProgress `protobuf:"bytes,1,rep,name=annotation_progress,json=annotationProgress" json:"annotation_progress,omitempty"`
}

func (m *AnnotateVideoProgress) Reset()                    { *m = AnnotateVideoProgress{} }
func (m *AnnotateVideoProgress) String() string            { return proto.CompactTextString(m) }
func (*AnnotateVideoProgress) ProtoMessage()               {}
func (*AnnotateVideoProgress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *AnnotateVideoProgress) GetAnnotationProgress() []*VideoAnnotationProgress {
	if m != nil {
		return m.AnnotationProgress
	}
	return nil
}

func init() {
	proto.RegisterType((*AnnotateVideoRequest)(nil), "google.cloud.videointelligence.v1.AnnotateVideoRequest")
	proto.RegisterType((*VideoContext)(nil), "google.cloud.videointelligence.v1.VideoContext")
	proto.RegisterType((*LabelDetectionConfig)(nil), "google.cloud.videointelligence.v1.LabelDetectionConfig")
	proto.RegisterType((*ShotChangeDetectionConfig)(nil), "google.cloud.videointelligence.v1.ShotChangeDetectionConfig")
	proto.RegisterType((*ExplicitContentDetectionConfig)(nil), "google.cloud.videointelligence.v1.ExplicitContentDetectionConfig")
	proto.RegisterType((*FaceDetectionConfig)(nil), "google.cloud.videointelligence.v1.FaceDetectionConfig")
	proto.RegisterType((*VideoSegment)(nil), "google.cloud.videointelligence.v1.VideoSegment")
	proto.RegisterType((*LabelSegment)(nil), "google.cloud.videointelligence.v1.LabelSegment")
	proto.RegisterType((*LabelFrame)(nil), "google.cloud.videointelligence.v1.LabelFrame")
	proto.RegisterType((*Entity)(nil), "google.cloud.videointelligence.v1.Entity")
	proto.RegisterType((*LabelAnnotation)(nil), "google.cloud.videointelligence.v1.LabelAnnotation")
	proto.RegisterType((*ExplicitContentFrame)(nil), "google.cloud.videointelligence.v1.ExplicitContentFrame")
	proto.RegisterType((*ExplicitContentAnnotation)(nil), "google.cloud.videointelligence.v1.ExplicitContentAnnotation")
	proto.RegisterType((*NormalizedBoundingBox)(nil), "google.cloud.videointelligence.v1.NormalizedBoundingBox")
	proto.RegisterType((*FaceSegment)(nil), "google.cloud.videointelligence.v1.FaceSegment")
	proto.RegisterType((*FaceFrame)(nil), "google.cloud.videointelligence.v1.FaceFrame")
	proto.RegisterType((*FaceAnnotation)(nil), "google.cloud.videointelligence.v1.FaceAnnotation")
	proto.RegisterType((*VideoAnnotationResults)(nil), "google.cloud.videointelligence.v1.VideoAnnotationResults")
	proto.RegisterType((*AnnotateVideoResponse)(nil), "google.cloud.videointelligence.v1.AnnotateVideoResponse")
	proto.RegisterType((*VideoAnnotationProgress)(nil), "google.cloud.videointelligence.v1.VideoAnnotationProgress")
	proto.RegisterType((*AnnotateVideoProgress)(nil), "google.cloud.videointelligence.v1.AnnotateVideoProgress")
	proto.RegisterEnum("google.cloud.videointelligence.v1.Feature", Feature_name, Feature_value)
	proto.RegisterEnum("google.cloud.videointelligence.v1.LabelDetectionMode", LabelDetectionMode_name, LabelDetectionMode_value)
	proto.RegisterEnum("google.cloud.videointelligence.v1.Likelihood", Likelihood_name, Likelihood_value)
}

func init() {
	proto.RegisterFile("google/cloud/videointelligence/v1/video_intelligence.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 1679 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0x4f, 0x73, 0xe3, 0x48,
	0x15, 0x47, 0xb6, 0x93, 0x89, 0x9f, 0x9d, 0xd8, 0xd3, 0x71, 0x12, 0x27, 0xcc, 0x64, 0x33, 0x5a,
	0xa8, 0xca, 0x06, 0xb0, 0x2b, 0x01, 0x76, 0xd9, 0xc0, 0xc5, 0xb1, 0x95, 0x1d, 0xb3, 0x19, 0x3b,
	0x25, 0x7b, 0x52, 0xbb, 0xd4, 0x54, 0xa9, 0x14, 0xa9, 0x2d, 0x6b, 0x47, 0x56, 0x0b, 0xa9, 0x95,
	0x9a, 0x50, 0xc5, 0x01, 0x8a, 0x82, 0x0b, 0x07, 0xaa, 0xb8, 0xf0, 0x01, 0x38, 0xf1, 0x01, 0x28,
	0x2e, 0x54, 0x4d, 0x51, 0x9c, 0x38, 0x70, 0xe1, 0xc4, 0x9d, 0x0f, 0x42, 0xa9, 0xbb, 0x65, 0x2b,
	0xb2, 0x33, 0x91, 0x07, 0x6e, 0xea, 0xf7, 0xe7, 0xf7, 0x5e, 0xbf, 0x7f, 0xdd, 0x2d, 0x38, 0xb5,
	0x08, 0xb1, 0x1c, 0xdc, 0x34, 0x1c, 0x12, 0x9a, 0xcd, 0x1b, 0xdb, 0xc4, 0xc4, 0x76, 0x29, 0x76,
	0x1c, 0xdb, 0xc2, 0xae, 0x81, 0x9b, 0x37, 0xc7, 0x9c, 0xa8, 0x25, 0xa9, 0x0d, 0xcf, 0x27, 0x94,
	0xa0, 0x67, 0x5c, 0xb7, 0xc1, 0x74, 0x1b, 0x73, 0xba, 0x8d, 0x9b, 0xe3, 0xbd, 0x27, 0x02, 0x5e,
	0xf7, 0xec, 0xa6, 0xee, 0xba, 0x84, 0xea, 0xd4, 0x26, 0x6e, 0xc0, 0x01, 0xf6, 0x3e, 0x14, 0x5c,
	0x87, 0xb8, 0x96, 0x1f, 0xba, 0xae, 0xed, 0x5a, 0x4d, 0xe2, 0x61, 0xff, 0x8e, 0xd0, 0xbe, 0x10,
	0x62, 0xab, 0xeb, 0x70, 0xd4, 0x34, 0x43, 0x2e, 0x20, 0xf8, 0x1f, 0xa4, 0xf9, 0xd4, 0x9e, 0xe0,
	0x80, 0xea, 0x13, 0x4f, 0x08, 0xec, 0x08, 0x01, 0xdf, 0x33, 0x9a, 0x01, 0xd5, 0x69, 0x28, 0x90,
	0xe5, 0x3f, 0xe7, 0xa0, 0xd6, 0xe2, 0x4e, 0xe1, 0xab, 0xc8, 0x7b, 0x15, 0xff, 0x34, 0xc4, 0x01,
	0x45, 0x5f, 0x87, 0xa2, 0xed, 0x7a, 0x21, 0xd5, 0x42, 0xdf, 0xae, 0x4b, 0x07, 0xd2, 0x61, 0x51,
	0x5d, 0x63, 0x84, 0x97, 0xbe, 0x8d, 0x3e, 0x84, 0x75, 0xce, 0x34, 0x88, 0x4b, 0xb1, 0x4b, 0xeb,
	0xab, 0x07, 0xd2, 0x61, 0x59, 0x2d, 0x33, 0x62, 0x9b, 0xd3, 0xd0, 0x39, 0xac, 0x8d, 0xb0, 0x4e,
	0x43, 0x1f, 0x07, 0xf5, 0xdc, 0x41, 0xfe, 0x70, 0xe3, 0xe4, 0xa8, 0xf1, 0x60, 0xb4, 0x1a, 0xe7,
	0x5c, 0x45, 0x9d, 0xea, 0xa2, 0x21, 0xac, 0xf3, 0xf0, 0x33, 0x63, 0x6f, 0x68, 0x3d, 0x7f, 0x20,
	0x1d, 0x96, 0x4e, 0x9a, 0x19, 0xc0, 0xd8, 0x8e, 0xda, 0x5c, 0x4d, 0x2d, 0xdf, 0x24, 0x56, 0xe8,
	0x29, 0x00, 0x09, 0x69, 0xbc, 0xc1, 0x02, 0xdb, 0x60, 0x91, 0x53, 0xa2, 0x1d, 0x7e, 0x00, 0x25,
	0x87, 0x18, 0x2c, 0xc6, 0x9a, 0x6d, 0xd6, 0x57, 0x18, 0x1f, 0x62, 0x52, 0xd7, 0x94, 0xff, 0x5e,
	0x80, 0x72, 0x12, 0x1e, 0x7d, 0x0e, 0x6b, 0x01, 0xb6, 0x26, 0xd8, 0xa5, 0x41, 0x5d, 0x3a, 0xc8,
	0x2f, 0xe3, 0xe1, 0x80, 0xeb, 0xa9, 0x53, 0x00, 0x34, 0x81, 0x6d, 0x47, 0xbf, 0xc6, 0x8e, 0x66,
	0x62, 0x8a, 0x0d, 0xe6, 0x85, 0x41, 0xdc, 0x91, 0x6d, 0xd5, 0x73, 0x6c, 0xf3, 0x9f, 0x64, 0x80,
	0xbe, 0x88, 0x00, 0x3a, 0xb1, 0x7e, 0x9b, 0xa9, 0xab, 0x35, 0x67, 0x01, 0x15, 0xfd, 0x1c, 0x9e,
	0x04, 0x63, 0x42, 0x35, 0x63, 0xac, 0xbb, 0x16, 0x9e, 0x37, 0xca, 0x23, 0xfe, 0xa3, 0x0c, 0x46,
	0x07, 0x63, 0x42, 0xdb, 0x0c, 0x25, 0x6d, 0x79, 0x37, 0xb8, 0x8f, 0x85, 0x7e, 0x2b, 0xc1, 0x33,
	0xfc, 0xc6, 0x73, 0x6c, 0xc3, 0x9e, 0x96, 0xd4, 0xbc, 0x13, 0x05, 0xe6, 0x44, 0x2b, 0x83, 0x13,
	0x8a, 0xc0, 0x12, 0x95, 0x98, 0xf6, 0x64, 0x1f, 0xbf, 0x93, 0x8f, 0xbe, 0x82, 0xad, 0x91, 0x6e,
	0x2c, 0x08, 0xc3, 0x0a, 0xf3, 0xe0, 0xe3, 0x2c, 0x55, 0xac, 0x1b, 0x73, 0x01, 0xd8, 0x1c, 0xcd,
	0x13, 0xe5, 0xbf, 0x49, 0x50, 0x5b, 0x94, 0x28, 0x64, 0x41, 0x2d, 0x5d, 0x01, 0x13, 0x62, 0x62,
	0xd6, 0x8a, 0x1b, 0x27, 0xdf, 0x5f, 0x3a, 0xff, 0x2f, 0x88, 0x89, 0x55, 0xe4, 0xcc, 0xd1, 0xd0,
	0xb7, 0xe0, 0x71, 0xc0, 0x47, 0x92, 0xee, 0xdf, 0x6a, 0x86, 0x3e, 0xc1, 0xbe, 0xce, 0xaa, 0x6c,
	0x4d, 0xad, 0xce, 0x18, 0x6d, 0x46, 0x47, 0x35, 0x58, 0x89, 0xbc, 0x70, 0x58, 0x45, 0x14, 0x55,
	0xbe, 0x90, 0x8f, 0x61, 0xf7, 0xde, 0xbc, 0xcf, 0x54, 0xa4, 0xa4, 0xca, 0xc7, 0xb0, 0xff, 0xee,
	0x2c, 0xdd, 0xa3, 0xa7, 0xc3, 0xe6, 0x82, 0xd8, 0x2e, 0x16, 0x46, 0xdf, 0x83, 0x6d, 0xdb, 0x35,
	0x9c, 0xd0, 0xc4, 0xda, 0x35, 0x09, 0x5d, 0xd3, 0x76, 0x2d, 0xed, 0x9a, 0xbc, 0x61, 0xf3, 0x28,
	0xda, 0x5f, 0x4d, 0x70, 0xcf, 0x04, 0xf3, 0x2c, 0xe2, 0xc9, 0x7f, 0x90, 0x44, 0x67, 0x8b, 0xb6,
	0x44, 0x0a, 0x8b, 0x90, 0x4f, 0xb5, 0x68, 0xaa, 0x6a, 0x64, 0x34, 0x0a, 0x30, 0x65, 0x86, 0x4a,
	0x27, 0xbb, 0x71, 0x1e, 0xe2, 0xc9, 0xdb, 0xe8, 0x88, 0xc9, 0xac, 0x56, 0x98, 0xce, 0xd0, 0x9e,
	0xe0, 0x3e, 0xd3, 0x40, 0x2d, 0xa8, 0x60, 0xd7, 0xbc, 0x03, 0x92, 0x7b, 0x08, 0x64, 0x1d, 0xbb,
	0xe6, 0x0c, 0x42, 0xbe, 0x85, 0x32, 0xcb, 0x6a, 0xec, 0x59, 0x17, 0x1e, 0x89, 0x91, 0x21, 0xfc,
	0x59, 0x7a, 0xe4, 0xc4, 0xfa, 0x68, 0x1f, 0x80, 0x55, 0xb9, 0x19, 0x89, 0x31, 0xc7, 0x72, 0x6a,
	0x82, 0x22, 0x8f, 0x01, 0x98, 0xe9, 0x73, 0x5f, 0x9f, 0x60, 0x74, 0x0a, 0xa5, 0xa5, 0x82, 0x01,
	0x74, 0x16, 0x87, 0x87, 0x2c, 0x39, 0xb0, 0xaa, 0xb8, 0xd4, 0xa6, 0xb7, 0xd1, 0x19, 0x84, 0xd9,
	0x57, 0x34, 0x82, 0xc5, 0x19, 0xc4, 0x09, 0x5d, 0x13, 0x1d, 0x40, 0xc9, 0xc4, 0x81, 0xe1, 0xdb,
	0x5e, 0x64, 0x81, 0xe1, 0x14, 0xd5, 0x24, 0x29, 0x3a, 0xa5, 0x1c, 0xdd, 0xb5, 0x42, 0xdd, 0xc2,
	0x9a, 0x11, 0xf5, 0x0e, 0x2f, 0xda, 0x72, 0x4c, 0x6c, 0x13, 0x13, 0xcb, 0x6f, 0x73, 0x50, 0x61,
	0x1b, 0x6b, 0x4d, 0x8f, 0x66, 0xd4, 0x82, 0x55, 0x6e, 0x46, 0x6c, 0xec, 0xa3, 0x2c, 0x33, 0x87,
	0x29, 0xa8, 0x42, 0x11, 0x5d, 0xc1, 0x63, 0x43, 0xa7, 0xd8, 0x22, 0xfe, 0xad, 0xc6, 0x48, 0xb6,
	0x38, 0x05, 0x97, 0x42, 0xab, 0xc6, 0x18, 0x8a, 0x80, 0xb8, 0x73, 0xca, 0xe4, 0x33, 0x9f, 0x32,
	0xc9, 0xa2, 0x49, 0x9c, 0x32, 0x0a, 0xac, 0x8e, 0xa2, 0x74, 0x06, 0xf5, 0x02, 0x83, 0xfa, 0x4e,
	0x56, 0x28, 0x56, 0x04, 0xaa, 0x50, 0x96, 0xff, 0x22, 0x41, 0x2d, 0xd5, 0xcc, 0xff, 0x7b, 0x95,
	0x98, 0xb0, 0xed, 0x11, 0xdf, 0x25, 0x96, 0xaf, 0x7b, 0xe3, 0x5b, 0xcd, 0xb1, 0x5f, 0x63, 0xc7,
	0x1e, 0x13, 0x62, 0xb2, 0x4c, 0x6f, 0x64, 0xf3, 0x75, 0xaa, 0xa4, 0x6e, 0x25, 0xc0, 0x66, 0x64,
	0xd9, 0x81, 0xdd, 0x94, 0xe7, 0x89, 0x32, 0xe8, 0x4f, 0xc3, 0xc3, 0xcf, 0xf3, 0x4f, 0x96, 0x3f,
	0x7a, 0xee, 0x06, 0xea, 0x35, 0x6c, 0xf5, 0x88, 0x3f, 0xd1, 0x1d, 0xfb, 0x67, 0xd8, 0x4c, 0x0c,
	0x1d, 0x84, 0xa0, 0xe0, 0xe0, 0x11, 0x8f, 0x50, 0x4e, 0x65, 0xdf, 0xa8, 0x0a, 0x79, 0x4a, 0x3c,
	0xd1, 0x1f, 0xd1, 0x67, 0x34, 0xe4, 0x7c, 0xdb, 0x1a, 0xf3, 0x0b, 0x50, 0x4e, 0xe5, 0x0b, 0xb4,
	0x0d, 0xab, 0xd7, 0x84, 0x52, 0x32, 0x61, 0x07, 0x64, 0x4e, 0x15, 0x2b, 0xf9, 0x0b, 0x28, 0x45,
	0x93, 0xf2, 0xff, 0x3f, 0x2a, 0xe4, 0xbf, 0x4a, 0x50, 0x8c, 0xa0, 0x79, 0x92, 0x29, 0xec, 0xba,
	0xd3, 0x4d, 0xa5, 0xe7, 0x2c, 0x0f, 0xdc, 0x0f, 0x32, 0x98, 0x5a, 0x18, 0x18, 0x75, 0xc7, 0x5d,
	0x44, 0xc6, 0x41, 0xba, 0xb4, 0x72, 0x4b, 0x94, 0x96, 0xfc, 0x56, 0x82, 0x8d, 0xc8, 0xff, 0x44,
	0xaa, 0x9f, 0x40, 0x91, 0x8e, 0xc3, 0xc9, 0xb5, 0xab, 0xdb, 0xfc, 0x0c, 0x29, 0xab, 0x33, 0x02,
	0xfa, 0x71, 0xa2, 0xe9, 0x78, 0x0f, 0x37, 0x32, 0xde, 0x01, 0xe6, 0x7b, 0xae, 0x33, 0x2d, 0x2a,
	0xde, 0xbe, 0xdf, 0xce, 0x88, 0x74, 0xb7, 0x92, 0xfe, 0xb9, 0x02, 0xdb, 0x2c, 0x39, 0xb3, 0x3d,
	0xa8, 0x38, 0x08, 0x1d, 0x1a, 0xbc, 0xfb, 0xe2, 0xee, 0xc2, 0xae, 0xf0, 0x44, 0xe3, 0xb7, 0x8b,
	0xc4, 0x83, 0x44, 0x6c, 0xed, 0x24, 0xeb, 0x10, 0x48, 0x98, 0xde, 0x11, 0xa0, 0x29, 0x7a, 0x80,
	0xc6, 0xb0, 0xcd, 0x2e, 0x96, 0xf3, 0xc6, 0xf2, 0xef, 0x6d, 0xac, 0x16, 0x21, 0xce, 0x59, 0xfa,
	0x0a, 0x76, 0x58, 0x6c, 0x16, 0x98, 0x2a, 0xbc, 0xb7, 0xa9, 0x2d, 0x06, 0x39, 0x67, 0xeb, 0x15,
	0x54, 0xd9, 0x05, 0x31, 0x69, 0x64, 0x85, 0x19, 0x39, 0xce, 0x98, 0xcd, 0x84, 0x8d, 0xca, 0xe8,
	0xce, 0x3a, 0x40, 0x3f, 0x81, 0x2a, 0x8b, 0x59, 0x12, 0x7d, 0xf5, 0xfd, 0x1e, 0x14, 0x95, 0x08,
	0x28, 0x89, 0x3d, 0x81, 0xcd, 0xe9, 0x45, 0x7b, 0x86, 0x5f, 0x7f, 0x94, 0xf9, 0x7e, 0x7f, 0xef,
	0xb4, 0x54, 0x51, 0x0c, 0x9c, 0x68, 0xab, 0x43, 0x58, 0xc1, 0xbe, 0x4f, 0xfc, 0x7a, 0x91, 0x19,
	0x40, 0xb1, 0x01, 0xdf, 0x33, 0x1a, 0x03, 0xf6, 0x0c, 0x55, 0xb9, 0x80, 0xfc, 0x0b, 0x09, 0xb6,
	0x52, 0xef, 0xd0, 0xc0, 0x23, 0x6e, 0x80, 0xd1, 0x18, 0xd0, 0xcc, 0x53, 0xcd, 0xe7, 0x55, 0x2e,
	0x06, 0xcb, 0xa7, 0x59, 0x03, 0x32, 0xd7, 0x26, 0xea, 0x63, 0x3d, 0x4d, 0x92, 0xff, 0x2d, 0xc1,
	0x4e, 0x4a, 0xfa, 0xd2, 0x27, 0x96, 0x8f, 0x83, 0x07, 0xba, 0xea, 0x23, 0xa8, 0x7a, 0x42, 0x50,
	0xf3, 0xb0, 0x6f, 0x44, 0x43, 0x36, 0x9a, 0x48, 0x2b, 0x6a, 0x25, 0xa6, 0x5f, 0x72, 0x32, 0xfa,
	0x14, 0x60, 0x76, 0x97, 0x14, 0xef, 0xaa, 0xbd, 0xb9, 0xb1, 0x35, 0x8c, 0x9f, 0xef, 0x6a, 0x71,
	0x7a, 0x8b, 0x44, 0x3f, 0x84, 0x52, 0xe8, 0x99, 0x3a, 0xc5, 0x5c, 0xb7, 0xf0, 0xa0, 0x2e, 0x70,
	0xf1, 0x88, 0x20, 0xff, 0x2a, 0x1d, 0xdf, 0xe9, 0xce, 0x5e, 0xc3, 0x66, 0x22, 0xbe, 0xb1, 0xbf,
	0x22, 0xc0, 0xa7, 0xcb, 0x07, 0x38, 0x06, 0x56, 0x13, 0x69, 0x8b, 0x69, 0x47, 0xbf, 0x96, 0xe0,
	0x91, 0x78, 0xe1, 0xa3, 0x1d, 0xd8, 0x3c, 0x57, 0x5a, 0xc3, 0x97, 0xaa, 0xa2, 0xbd, 0xec, 0x0d,
	0x2e, 0x95, 0x76, 0xf7, 0xbc, 0xab, 0x74, 0xaa, 0x5f, 0x43, 0x9b, 0x50, 0xb9, 0x68, 0x9d, 0x29,
	0x17, 0x5a, 0x47, 0x19, 0x2a, 0xed, 0x61, 0xb7, 0xdf, 0xab, 0x4a, 0x68, 0x17, 0xb6, 0x06, 0xcf,
	0xfb, 0x43, 0xad, 0xfd, 0xbc, 0xd5, 0xfb, 0x4c, 0x49, 0xb0, 0x72, 0x68, 0x1f, 0xf6, 0x94, 0x2f,
	0x2e, 0x2f, 0xba, 0xed, 0xee, 0x50, 0x6b, 0xf7, 0x7b, 0x43, 0xa5, 0x37, 0x4c, 0xf0, 0xf3, 0x08,
	0xc1, 0xc6, 0x79, 0xab, 0x9d, 0xd4, 0x29, 0x1c, 0xf9, 0x80, 0xe6, 0xdf, 0x47, 0xe8, 0x1b, 0x70,
	0x90, 0xb2, 0xac, 0xbd, 0xe8, 0x77, 0xd2, 0xfe, 0xad, 0x43, 0x91, 0xb9, 0x12, 0xb1, 0xaa, 0x12,
	0xda, 0x00, 0x38, 0x57, 0x5b, 0x2f, 0x14, 0xbe, 0xce, 0x45, 0xfb, 0x62, 0xec, 0x56, 0xaf, 0xa3,
	0x25, 0x18, 0xf9, 0x23, 0x0a, 0x30, 0xbb, 0x7a, 0xa0, 0x3d, 0xd8, 0xbe, 0xe8, 0x7e, 0xae, 0x5c,
	0x74, 0x9f, 0xf7, 0xfb, 0x9d, 0x94, 0x85, 0xc7, 0xb0, 0x7e, 0xa5, 0xa8, 0x5f, 0x6a, 0x2f, 0x7b,
	0x4c, 0xe4, 0xcb, 0xaa, 0x84, 0xca, 0xb0, 0x36, 0x5d, 0xe5, 0xa2, 0xd5, 0x65, 0x7f, 0x30, 0xe8,
	0x9e, 0x5d, 0x28, 0xd5, 0x3c, 0x02, 0x58, 0x15, 0x9c, 0x02, 0xaa, 0x40, 0x89, 0xa9, 0x0a, 0xc2,
	0xca, 0xc9, 0x1f, 0x25, 0xa8, 0xb3, 0x14, 0x75, 0x13, 0x79, 0x1b, 0x60, 0xff, 0xc6, 0x36, 0x30,
	0xfa, 0x8d, 0x04, 0xeb, 0x77, 0xca, 0x02, 0x65, 0xb9, 0xe4, 0x2c, 0xfa, 0x61, 0xb4, 0xf7, 0x34,
	0x56, 0x4c, 0xfc, 0xc9, 0x6a, 0xf4, 0xe3, 0x3f, 0x59, 0xf2, 0xfe, 0x2f, 0xff, 0xf5, 0x9f, 0xdf,
	0xe7, 0xea, 0xf2, 0xe6, 0xf4, 0x77, 0x5a, 0x70, 0x2a, 0x0a, 0x04, 0x9f, 0x4a, 0x47, 0x67, 0xbf,
	0x93, 0xe0, 0x9b, 0x06, 0x99, 0x3c, 0x6c, 0xfd, 0xec, 0xe9, 0x7d, 0xbb, 0xb9, 0x8c, 0x5a, 0xe0,
	0x52, 0xfa, 0x53, 0xee, 0xd9, 0x67, 0x1c, 0xa4, 0xcd, 0x40, 0xe6, 0xc4, 0x1b, 0x57, 0xc7, 0xff,
	0x88, 0x65, 0x5e, 0x31, 0x99, 0x57, 0x73, 0x32, 0xaf, 0xae, 0x8e, 0xaf, 0x57, 0x59, 0x4f, 0x7d,
	0xf7, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc7, 0x7b, 0x5f, 0x72, 0x20, 0x14, 0x00, 0x00,
}
