// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/api/servicecontrol/v1/check_error.proto

package google_api_servicecontrol_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "go.pedge.io/pb/go/google/api"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Error codes for Check responses.
type CheckError_Code int32

const (
	// This is never used in `CheckResponse`.
	CheckError_ERROR_CODE_UNSPECIFIED CheckError_Code = 0
	// The consumer's project id was not found.
	// Same as [google.rpc.Code.NOT_FOUND][].
	CheckError_NOT_FOUND CheckError_Code = 5
	// The consumer doesn't have access to the specified resource.
	// Same as [google.rpc.Code.PERMISSION_DENIED][].
	CheckError_PERMISSION_DENIED CheckError_Code = 7
	// Quota check failed. Same as [google.rpc.Code.RESOURCE_EXHAUSTED][].
	CheckError_RESOURCE_EXHAUSTED CheckError_Code = 8
	// The consumer hasn't activated the service.
	CheckError_SERVICE_NOT_ACTIVATED CheckError_Code = 104
	// The consumer cannot access the service because billing is disabled.
	CheckError_BILLING_DISABLED CheckError_Code = 107
	// The consumer's project has been marked as deleted (soft deletion).
	CheckError_PROJECT_DELETED CheckError_Code = 108
	// The consumer's project number or id does not represent a valid project.
	CheckError_PROJECT_INVALID CheckError_Code = 114
	// The IP address of the consumer is invalid for the specific consumer
	// project.
	CheckError_IP_ADDRESS_BLOCKED CheckError_Code = 109
	// The referer address of the consumer request is invalid for the specific
	// consumer project.
	CheckError_REFERER_BLOCKED CheckError_Code = 110
	// The client application of the consumer request is invalid for the
	// specific consumer project.
	CheckError_CLIENT_APP_BLOCKED CheckError_Code = 111
	// The consumer's API key is invalid.
	CheckError_API_KEY_INVALID CheckError_Code = 105
	// The consumer's API Key has expired.
	CheckError_API_KEY_EXPIRED CheckError_Code = 112
	// The consumer's API Key was not found in config record.
	CheckError_API_KEY_NOT_FOUND CheckError_Code = 113
	// The backend server for looking up project id/number is unavailable.
	CheckError_NAMESPACE_LOOKUP_UNAVAILABLE CheckError_Code = 300
	// The backend server for checking service status is unavailable.
	CheckError_SERVICE_STATUS_UNAVAILABLE CheckError_Code = 301
	// The backend server for checking billing status is unavailable.
	CheckError_BILLING_STATUS_UNAVAILABLE CheckError_Code = 302
)

var CheckError_Code_name = map[int32]string{
	0:   "ERROR_CODE_UNSPECIFIED",
	5:   "NOT_FOUND",
	7:   "PERMISSION_DENIED",
	8:   "RESOURCE_EXHAUSTED",
	104: "SERVICE_NOT_ACTIVATED",
	107: "BILLING_DISABLED",
	108: "PROJECT_DELETED",
	114: "PROJECT_INVALID",
	109: "IP_ADDRESS_BLOCKED",
	110: "REFERER_BLOCKED",
	111: "CLIENT_APP_BLOCKED",
	105: "API_KEY_INVALID",
	112: "API_KEY_EXPIRED",
	113: "API_KEY_NOT_FOUND",
	300: "NAMESPACE_LOOKUP_UNAVAILABLE",
	301: "SERVICE_STATUS_UNAVAILABLE",
	302: "BILLING_STATUS_UNAVAILABLE",
}
var CheckError_Code_value = map[string]int32{
	"ERROR_CODE_UNSPECIFIED":       0,
	"NOT_FOUND":                    5,
	"PERMISSION_DENIED":            7,
	"RESOURCE_EXHAUSTED":           8,
	"SERVICE_NOT_ACTIVATED":        104,
	"BILLING_DISABLED":             107,
	"PROJECT_DELETED":              108,
	"PROJECT_INVALID":              114,
	"IP_ADDRESS_BLOCKED":           109,
	"REFERER_BLOCKED":              110,
	"CLIENT_APP_BLOCKED":           111,
	"API_KEY_INVALID":              105,
	"API_KEY_EXPIRED":              112,
	"API_KEY_NOT_FOUND":            113,
	"NAMESPACE_LOOKUP_UNAVAILABLE": 300,
	"SERVICE_STATUS_UNAVAILABLE":   301,
	"BILLING_STATUS_UNAVAILABLE":   302,
}

func (x CheckError_Code) String() string {
	return proto.EnumName(CheckError_Code_name, int32(x))
}
func (CheckError_Code) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

// Defines the errors to be returned in
// [google.api.servicecontrol.v1.CheckResponse.check_errors][google.api.servicecontrol.v1.CheckResponse.check_errors].
type CheckError struct {
	// The error code.
	Code CheckError_Code `protobuf:"varint,1,opt,name=code,enum=google.api.servicecontrol.v1.CheckError_Code" json:"code,omitempty"`
	// Free-form text providing details on the error cause of the error.
	Detail string `protobuf:"bytes,2,opt,name=detail" json:"detail,omitempty"`
}

func (m *CheckError) Reset()                    { *m = CheckError{} }
func (m *CheckError) String() string            { return proto.CompactTextString(m) }
func (*CheckError) ProtoMessage()               {}
func (*CheckError) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CheckError) GetCode() CheckError_Code {
	if m != nil {
		return m.Code
	}
	return CheckError_ERROR_CODE_UNSPECIFIED
}

func (m *CheckError) GetDetail() string {
	if m != nil {
		return m.Detail
	}
	return ""
}

func init() {
	proto.RegisterType((*CheckError)(nil), "google.api.servicecontrol.v1.CheckError")
	proto.RegisterEnum("google.api.servicecontrol.v1.CheckError_Code", CheckError_Code_name, CheckError_Code_value)
}

func init() { proto.RegisterFile("google/api/servicecontrol/v1/check_error.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 450 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x4d, 0x6f, 0xd3, 0x30,
	0x18, 0xc7, 0x49, 0x29, 0x83, 0x59, 0x82, 0x05, 0xc3, 0xaa, 0x51, 0x55, 0xa2, 0xec, 0xb4, 0x0b,
	0xa9, 0x06, 0x17, 0xae, 0x8e, 0xfd, 0x14, 0x4c, 0x33, 0xdb, 0xb2, 0x93, 0x6a, 0x9c, 0xac, 0x90,
	0x46, 0x5b, 0xb4, 0x2e, 0x2e, 0x59, 0xd4, 0xcf, 0xc1, 0xa7, 0xe0, 0x04, 0x7c, 0x3e, 0x8e, 0xc8,
	0x1d, 0x7d, 0x99, 0x84, 0x76, 0xcc, 0x3f, 0xbf, 0xe7, 0x67, 0x3d, 0x2f, 0x28, 0xba, 0x70, 0xee,
	0x62, 0x5e, 0x8e, 0xf2, 0x45, 0x35, 0xba, 0x29, 0x9b, 0x65, 0x55, 0x94, 0x85, 0xab, 0xdb, 0xc6,
	0xcd, 0x47, 0xcb, 0xd3, 0x51, 0x71, 0x59, 0x16, 0x57, 0xb6, 0x6c, 0x1a, 0xd7, 0x44, 0x8b, 0xc6,
	0xb5, 0x0e, 0x0f, 0x6e, 0xf9, 0x28, 0x5f, 0x54, 0xd1, 0x5d, 0x3e, 0x5a, 0x9e, 0xf6, 0x07, 0x3b,
	0xb6, 0xbc, 0xae, 0x5d, 0x9b, 0xb7, 0x95, 0xab, 0x6f, 0x6e, 0x6b, 0x8f, 0xbf, 0x77, 0x11, 0xa2,
	0xde, 0x08, 0x5e, 0x88, 0x09, 0xea, 0x16, 0x6e, 0x56, 0x1e, 0x05, 0xc3, 0xe0, 0xe4, 0xd9, 0xbb,
	0xb7, 0xd1, 0x7d, 0xe6, 0x68, 0x5b, 0x17, 0x51, 0x37, 0x2b, 0xf5, 0xaa, 0x14, 0xf7, 0xd0, 0xde,
	0xac, 0x6c, 0xf3, 0x6a, 0x7e, 0xd4, 0x19, 0x06, 0x27, 0xfb, 0xfa, 0xdf, 0xd7, 0xf1, 0x8f, 0x87,
	0xa8, 0xeb, 0x31, 0xdc, 0x47, 0x3d, 0xd0, 0x5a, 0x6a, 0x4b, 0x25, 0x03, 0x9b, 0x09, 0xa3, 0x80,
	0xf2, 0x31, 0x07, 0x16, 0x3e, 0xc0, 0x4f, 0xd1, 0xbe, 0x90, 0xa9, 0x1d, 0xcb, 0x4c, 0xb0, 0xf0,
	0x11, 0x3e, 0x44, 0xcf, 0x15, 0xe8, 0x33, 0x6e, 0x0c, 0x97, 0xc2, 0x32, 0x10, 0x9e, 0x7a, 0x8c,
	0x7b, 0x08, 0x6b, 0x30, 0x32, 0xd3, 0x14, 0x2c, 0x9c, 0x7f, 0x22, 0x99, 0x49, 0x81, 0x85, 0x4f,
	0xf0, 0x2b, 0x74, 0x68, 0x40, 0x4f, 0x39, 0x05, 0xeb, 0x2d, 0x84, 0xa6, 0x7c, 0x4a, 0xfc, 0xaf,
	0x4b, 0xfc, 0x12, 0x85, 0x31, 0x4f, 0x12, 0x2e, 0x3e, 0x5a, 0xc6, 0x0d, 0x89, 0x13, 0x60, 0xe1,
	0x15, 0x7e, 0x81, 0x0e, 0x94, 0x96, 0x9f, 0x81, 0xa6, 0x96, 0x41, 0x02, 0x1e, 0x9d, 0xef, 0x86,
	0x5c, 0x4c, 0x49, 0xc2, 0x59, 0xd8, 0xf8, 0x27, 0xb9, 0xb2, 0x84, 0x31, 0x0d, 0xc6, 0xd8, 0x38,
	0x91, 0x74, 0x02, 0x2c, 0xbc, 0xf6, 0xb0, 0x86, 0x31, 0x68, 0xd0, 0x9b, 0xb0, 0xf6, 0x30, 0x4d,
	0x38, 0x88, 0xd4, 0x12, 0xa5, 0x36, 0xb9, 0xf3, 0x30, 0x51, 0xdc, 0x4e, 0xe0, 0xcb, 0xc6, 0x5c,
	0xed, 0x86, 0x70, 0xae, 0xb8, 0x06, 0x16, 0x2e, 0x7c, 0xe3, 0xeb, 0x70, 0x3b, 0x8f, 0x6f, 0xf8,
	0x0d, 0x1a, 0x08, 0x72, 0x06, 0x46, 0x11, 0x0a, 0x36, 0x91, 0x72, 0x92, 0x29, 0x9b, 0x09, 0x32,
	0x25, 0x3c, 0xf1, 0x2d, 0x85, 0x3f, 0x3b, 0xf8, 0x35, 0xea, 0xaf, 0x67, 0x60, 0x52, 0x92, 0x66,
	0xe6, 0x0e, 0xf0, 0x6b, 0x05, 0xac, 0x27, 0xf1, 0x1f, 0xe0, 0x77, 0x27, 0xfe, 0x80, 0x86, 0x85,
	0xbb, 0xbe, 0x77, 0xf5, 0xf1, 0xc1, 0x76, 0xf7, 0xca, 0xdf, 0x91, 0x0a, 0xfe, 0x04, 0xc1, 0xd7,
	0xbd, 0xd5, 0x4d, 0xbd, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xee, 0x9d, 0xb8, 0xa8, 0xc1, 0x02,
	0x00, 0x00,
}
