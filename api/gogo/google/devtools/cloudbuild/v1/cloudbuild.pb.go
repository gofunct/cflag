// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: google/devtools/cloudbuild/v1/cloudbuild.proto

package google_devtools_cloudbuild_v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "go.pedge.io/pb/gogo/google/api"
import _ "go.pedge.io/pb/gogo/google/cloud/audit"
import _ "go.pedge.io/pb/gogo/google/longrunning"
import google_protobuf4 "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/types"
import google_protobuf5 "github.com/gogo/protobuf/types"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Possible status of a build.
type Build_Status int32

const (
	// Status of the build is unknown.
	Build_STATUS_UNKNOWN Build_Status = 0
	// Build is queued; work has not yet begun.
	Build_QUEUED Build_Status = 1
	// Build is being executed.
	Build_WORKING Build_Status = 2
	// Build finished successfully.
	Build_SUCCESS Build_Status = 3
	// Build failed to complete successfully.
	Build_FAILURE Build_Status = 4
	// Build failed due to an internal cause.
	Build_INTERNAL_ERROR Build_Status = 5
	// Build took longer than was allowed.
	Build_TIMEOUT Build_Status = 6
	// Build was canceled by a user.
	Build_CANCELLED Build_Status = 7
)

var Build_Status_name = map[int32]string{
	0: "STATUS_UNKNOWN",
	1: "QUEUED",
	2: "WORKING",
	3: "SUCCESS",
	4: "FAILURE",
	5: "INTERNAL_ERROR",
	6: "TIMEOUT",
	7: "CANCELLED",
}
var Build_Status_value = map[string]int32{
	"STATUS_UNKNOWN": 0,
	"QUEUED":         1,
	"WORKING":        2,
	"SUCCESS":        3,
	"FAILURE":        4,
	"INTERNAL_ERROR": 5,
	"TIMEOUT":        6,
	"CANCELLED":      7,
}

func (x Build_Status) String() string {
	return proto.EnumName(Build_Status_name, int32(x))
}
func (Build_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptorCloudbuild, []int{9, 0} }

// Specifies the hash algorithm, if any.
type Hash_HashType int32

const (
	// No hash requested.
	Hash_NONE Hash_HashType = 0
	// Use a sha256 hash.
	Hash_SHA256 Hash_HashType = 1
)

var Hash_HashType_name = map[int32]string{
	0: "NONE",
	1: "SHA256",
}
var Hash_HashType_value = map[string]int32{
	"NONE":   0,
	"SHA256": 1,
}

func (x Hash_HashType) String() string {
	return proto.EnumName(Hash_HashType_name, int32(x))
}
func (Hash_HashType) EnumDescriptor() ([]byte, []int) { return fileDescriptorCloudbuild, []int{13, 0} }

// Specifies the manner in which the build should be verified, if at all.
type BuildOptions_VerifyOption int32

const (
	// Not a verifiable build. (default)
	BuildOptions_NOT_VERIFIED BuildOptions_VerifyOption = 0
	// Verified build.
	BuildOptions_VERIFIED BuildOptions_VerifyOption = 1
)

var BuildOptions_VerifyOption_name = map[int32]string{
	0: "NOT_VERIFIED",
	1: "VERIFIED",
}
var BuildOptions_VerifyOption_value = map[string]int32{
	"NOT_VERIFIED": 0,
	"VERIFIED":     1,
}

func (x BuildOptions_VerifyOption) String() string {
	return proto.EnumName(BuildOptions_VerifyOption_name, int32(x))
}
func (BuildOptions_VerifyOption) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorCloudbuild, []int{27, 0}
}

// Supported VM sizes.
type BuildOptions_MachineType int32

const (
	// Standard machine type.
	BuildOptions_UNSPECIFIED BuildOptions_MachineType = 0
	// Medium size.
	BuildOptions_N1_HIGHCPU_8 BuildOptions_MachineType = 1
	// Large size.
	BuildOptions_N1_HIGHCPU_32 BuildOptions_MachineType = 2
)

var BuildOptions_MachineType_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "N1_HIGHCPU_8",
	2: "N1_HIGHCPU_32",
}
var BuildOptions_MachineType_value = map[string]int32{
	"UNSPECIFIED":   0,
	"N1_HIGHCPU_8":  1,
	"N1_HIGHCPU_32": 2,
}

func (x BuildOptions_MachineType) String() string {
	return proto.EnumName(BuildOptions_MachineType_name, int32(x))
}
func (BuildOptions_MachineType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorCloudbuild, []int{27, 1}
}

// Specifies the behavior when there is an error in the substitution checks.
type BuildOptions_SubstitutionOption int32

const (
	// Fails the build if error in substitutions checks, like missing
	// a substitution in the template or in the map.
	BuildOptions_MUST_MATCH BuildOptions_SubstitutionOption = 0
	// Do not fail the build if error in substitutions checks.
	BuildOptions_ALLOW_LOOSE BuildOptions_SubstitutionOption = 1
)

var BuildOptions_SubstitutionOption_name = map[int32]string{
	0: "MUST_MATCH",
	1: "ALLOW_LOOSE",
}
var BuildOptions_SubstitutionOption_value = map[string]int32{
	"MUST_MATCH":  0,
	"ALLOW_LOOSE": 1,
}

func (x BuildOptions_SubstitutionOption) String() string {
	return proto.EnumName(BuildOptions_SubstitutionOption_name, int32(x))
}
func (BuildOptions_SubstitutionOption) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorCloudbuild, []int{27, 2}
}

// Specifies the behavior when writing build logs to Google Cloud Storage.
type BuildOptions_LogStreamingOption int32

const (
	// Service may automatically determine build log streaming behavior.
	BuildOptions_STREAM_DEFAULT BuildOptions_LogStreamingOption = 0
	// Build logs should be streamed to Google Cloud Storage.
	BuildOptions_STREAM_ON BuildOptions_LogStreamingOption = 1
	// Build logs should not be streamed to Google Cloud Storage; they will be
	// written when the build is completed.
	BuildOptions_STREAM_OFF BuildOptions_LogStreamingOption = 2
)

var BuildOptions_LogStreamingOption_name = map[int32]string{
	0: "STREAM_DEFAULT",
	1: "STREAM_ON",
	2: "STREAM_OFF",
}
var BuildOptions_LogStreamingOption_value = map[string]int32{
	"STREAM_DEFAULT": 0,
	"STREAM_ON":      1,
	"STREAM_OFF":     2,
}

func (x BuildOptions_LogStreamingOption) String() string {
	return proto.EnumName(BuildOptions_LogStreamingOption_name, int32(x))
}
func (BuildOptions_LogStreamingOption) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorCloudbuild, []int{27, 3}
}

// RetryBuildRequest specifies a build to retry.
type RetryBuildRequest struct {
	// ID of the project.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Build ID of the original build.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *RetryBuildRequest) Reset()                    { *m = RetryBuildRequest{} }
func (m *RetryBuildRequest) String() string            { return proto.CompactTextString(m) }
func (*RetryBuildRequest) ProtoMessage()               {}
func (*RetryBuildRequest) Descriptor() ([]byte, []int) { return fileDescriptorCloudbuild, []int{0} }

func (m *RetryBuildRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *RetryBuildRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// RunBuildTriggerRequest specifies a build trigger to run and the source to
// use.
type RunBuildTriggerRequest struct {
	// ID of the project.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// ID of the trigger.
	TriggerId string `protobuf:"bytes,2,opt,name=trigger_id,json=triggerId,proto3" json:"trigger_id,omitempty"`
	// Source to build against this trigger.
	Source *RepoSource `protobuf:"bytes,3,opt,name=source" json:"source,omitempty"`
}

func (m *RunBuildTriggerRequest) Reset()                    { *m = RunBuildTriggerRequest{} }
func (m *RunBuildTriggerRequest) String() string            { return proto.CompactTextString(m) }
func (*RunBuildTriggerRequest) ProtoMessage()               {}
func (*RunBuildTriggerRequest) Descriptor() ([]byte, []int) { return fileDescriptorCloudbuild, []int{1} }

func (m *RunBuildTriggerRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *RunBuildTriggerRequest) GetTriggerId() string {
	if m != nil {
		return m.TriggerId
	}
	return ""
}

func (m *RunBuildTriggerRequest) GetSource() *RepoSource {
	if m != nil {
		return m.Source
	}
	return nil
}

// StorageSource describes the location of the source in an archive file in
// Google Cloud Storage.
type StorageSource struct {
	// Google Cloud Storage bucket containing source (see
	// [Bucket Name
	// Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
	Bucket string `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// Google Cloud Storage object containing source.
	//
	// This object must be a gzipped archive file (.tar.gz) containing source to
	// build.
	Object string `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
	// Google Cloud Storage generation for the object. If the generation is
	// omitted, the latest generation will be used.
	Generation int64 `protobuf:"varint,3,opt,name=generation,proto3" json:"generation,omitempty"`
}

func (m *StorageSource) Reset()                    { *m = StorageSource{} }
func (m *StorageSource) String() string            { return proto.CompactTextString(m) }
func (*StorageSource) ProtoMessage()               {}
func (*StorageSource) Descriptor() ([]byte, []int) { return fileDescriptorCloudbuild, []int{2} }

func (m *StorageSource) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *StorageSource) GetObject() string {
	if m != nil {
		return m.Object
	}
	return ""
}

func (m *StorageSource) GetGeneration() int64 {
	if m != nil {
		return m.Generation
	}
	return 0
}

// RepoSource describes the location of the source in a Google Cloud Source
// Repository.
type RepoSource struct {
	// ID of the project that owns the repo. If omitted, the project ID requesting
	// the build is assumed.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Name of the repo. If omitted, the name "default" is assumed.
	RepoName string `protobuf:"bytes,2,opt,name=repo_name,json=repoName,proto3" json:"repo_name,omitempty"`
	// A revision within the source repository must be specified in
	// one of these ways.
	//
	// Types that are valid to be assigned to Revision:
	//	*RepoSource_BranchName
	//	*RepoSource_TagName
	//	*RepoSource_CommitSha
	Revision isRepoSource_Revision `protobuf_oneof:"revision"`
	// Directory, relative to the source root, in which to run the build.
	Dir string `protobuf:"bytes,7,opt,name=dir,proto3" json:"dir,omitempty"`
}

func (m *RepoSource) Reset()                    { *m = RepoSource{} }
func (m *RepoSource) String() string            { return proto.CompactTextString(m) }
func (*RepoSource) ProtoMessage()               {}
func (*RepoSource) Descriptor() ([]byte, []int) { return fileDescriptorCloudbuild, []int{3} }

type isRepoSource_Revision interface {
	isRepoSource_Revision()
}

type RepoSource_BranchName struct {
	BranchName string `protobuf:"bytes,3,opt,name=branch_name,json=branchName,proto3,oneof"`
}
type RepoSource_TagName struct {
	TagName string `protobuf:"bytes,4,opt,name=tag_name,json=tagName,proto3,oneof"`
}
type RepoSource_CommitSha struct {
	CommitSha string `protobuf:"bytes,5,opt,name=commit_sha,json=commitSha,proto3,oneof"`
}

func (*RepoSource_BranchName) isRepoSource_Revision() {}
func (*RepoSource_TagName) isRepoSource_Revision()    {}
func (*RepoSource_CommitSha) isRepoSource_Revision()  {}

func (m *RepoSource) GetRevision() isRepoSource_Revision {
	if m != nil {
		return m.Revision
	}
	return nil
}

func (m *RepoSource) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *RepoSource) GetRepoName() string {
	if m != nil {
		return m.RepoName
	}
	return ""
}

func (m *RepoSource) GetBranchName() string {
	if x, ok := m.GetRevision().(*RepoSource_BranchName); ok {
		return x.BranchName
	}
	return ""
}

func (m *RepoSource) GetTagName() string {
	if x, ok := m.GetRevision().(*RepoSource_TagName); ok {
		return x.TagName
	}
	return ""
}

func (m *RepoSource) GetCommitSha() string {
	if x, ok := m.GetRevision().(*RepoSource_CommitSha); ok {
		return x.CommitSha
	}
	return ""
}

func (m *RepoSource) GetDir() string {
	if m != nil {
		return m.Dir
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RepoSource) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RepoSource_OneofMarshaler, _RepoSource_OneofUnmarshaler, _RepoSource_OneofSizer, []interface{}{
		(*RepoSource_BranchName)(nil),
		(*RepoSource_TagName)(nil),
		(*RepoSource_CommitSha)(nil),
	}
}

func _RepoSource_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RepoSource)
	// revision
	switch x := m.Revision.(type) {
	case *RepoSource_BranchName:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.BranchName)
	case *RepoSource_TagName:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.TagName)
	case *RepoSource_CommitSha:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.CommitSha)
	case nil:
	default:
		return fmt.Errorf("RepoSource.Revision has unexpected type %T", x)
	}
	return nil
}

func _RepoSource_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RepoSource)
	switch tag {
	case 3: // revision.branch_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Revision = &RepoSource_BranchName{x}
		return true, err
	case 4: // revision.tag_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Revision = &RepoSource_TagName{x}
		return true, err
	case 5: // revision.commit_sha
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Revision = &RepoSource_CommitSha{x}
		return true, err
	default:
		return false, nil
	}
}

func _RepoSource_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RepoSource)
	// revision
	switch x := m.Revision.(type) {
	case *RepoSource_BranchName:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.BranchName)))
		n += len(x.BranchName)
	case *RepoSource_TagName:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.TagName)))
		n += len(x.TagName)
	case *RepoSource_CommitSha:
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.CommitSha)))
		n += len(x.CommitSha)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Source describes the location of the source in a supported storage
// service.
type Source struct {
	// Describes location of source.
	//
	// Types that are valid to be assigned to Source:
	//	*Source_StorageSource
	//	*Source_RepoSource
	Source isSource_Source `protobuf_oneof:"source"`
}

func (m *Source) Reset()                    { *m = Source{} }
func (m *Source) String() string            { return proto.CompactTextString(m) }
func (*Source) ProtoMessage()               {}
func (*Source) Descriptor() ([]byte, []int) { return fileDescriptorCloudbuild, []int{4} }

type isSource_Source interface {
	isSource_Source()
}

type Source_StorageSource struct {
	StorageSource *StorageSource `protobuf:"bytes,2,opt,name=storage_source,json=storageSource,oneof"`
}
type Source_RepoSource struct {
	RepoSource *RepoSource `protobuf:"bytes,3,opt,name=repo_source,json=repoSource,oneof"`
}

func (*Source_StorageSource) isSource_Source() {}
func (*Source_RepoSource) isSource_Source()    {}

func (m *Source) GetSource() isSource_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *Source) GetStorageSource() *StorageSource {
	if x, ok := m.GetSource().(*Source_StorageSource); ok {
		return x.StorageSource
	}
	return nil
}

func (m *Source) GetRepoSource() *RepoSource {
	if x, ok := m.GetSource().(*Source_RepoSource); ok {
		return x.RepoSource
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Source) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Source_OneofMarshaler, _Source_OneofUnmarshaler, _Source_OneofSizer, []interface{}{
		(*Source_StorageSource)(nil),
		(*Source_RepoSource)(nil),
	}
}

func _Source_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Source)
	// source
	switch x := m.Source.(type) {
	case *Source_StorageSource:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StorageSource); err != nil {
			return err
		}
	case *Source_RepoSource:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RepoSource); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Source.Source has unexpected type %T", x)
	}
	return nil
}

func _Source_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Source)
	switch tag {
	case 2: // source.storage_source
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StorageSource)
		err := b.DecodeMessage(msg)
		m.Source = &Source_StorageSource{msg}
		return true, err
	case 3: // source.repo_source
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RepoSource)
		err := b.DecodeMessage(msg)
		m.Source = &Source_RepoSource{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Source_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Source)
	// source
	switch x := m.Source.(type) {
	case *Source_StorageSource:
		s := proto.Size(x.StorageSource)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Source_RepoSource:
		s := proto.Size(x.RepoSource)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// BuiltImage describes an image built by the pipeline.
type BuiltImage struct {
	// Name used to push the container image to Google Container Registry, as
	// presented to `docker push`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Docker Registry 2.0 digest.
	Digest string `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (m *BuiltImage) Reset()                    { *m = BuiltImage{} }
func (m *BuiltImage) String() string            { return proto.CompactTextString(m) }
func (*BuiltImage) ProtoMessage()               {}
func (*BuiltImage) Descriptor() ([]byte, []int) { return fileDescriptorCloudbuild, []int{5} }

func (m *BuiltImage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BuiltImage) GetDigest() string {
	if m != nil {
		return m.Digest
	}
	return ""
}

// BuildStep describes a step to perform in the build pipeline.
type BuildStep struct {
	// The name of the container image that will run this particular build step.
	//
	// If the image is already available in the host's Docker daemon's cache, it
	// will be run directly. If not, the host will attempt to pull the image
	// first, using the builder service account's credentials if necessary.
	//
	// The Docker daemon's cache will already have the latest versions of all of
	// the officially supported build steps
	// ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)).
	// The Docker daemon will also have cached many of the layers for some popular
	// images, like "ubuntu", "debian", but they will be refreshed at the time you
	// attempt to use them.
	//
	// If you built an image in a previous build step, it will be stored in the
	// host's Docker daemon's cache and is available to use as the name for a
	// later build step.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// A list of environment variable definitions to be used when running a step.
	//
	// The elements are of the form "KEY=VALUE" for the environment variable "KEY"
	// being given the value "VALUE".
	Env []string `protobuf:"bytes,2,rep,name=env" json:"env,omitempty"`
	// A list of arguments that will be presented to the step when it is started.
	//
	// If the image used to run the step's container has an entrypoint, these args
	// will be used as arguments to that entrypoint. If the image does not define
	// an entrypoint, the first element in args will be used as the entrypoint,
	// and the remainder will be used as arguments.
	Args []string `protobuf:"bytes,3,rep,name=args" json:"args,omitempty"`
	// Working directory (relative to project source root) to use when running
	// this operation's container.
	Dir string `protobuf:"bytes,4,opt,name=dir,proto3" json:"dir,omitempty"`
	// Optional unique identifier for this build step, used in wait_for to
	// reference this build step as a dependency.
	Id string `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	// The ID(s) of the step(s) that this build step depends on.
	// This build step will not start until all the build steps in wait_for
	// have completed successfully. If wait_for is empty, this build step will
	// start when all previous build steps in the Build.Steps list have completed
	// successfully.
	WaitFor []string `protobuf:"bytes,6,rep,name=wait_for,json=waitFor" json:"wait_for,omitempty"`
	// Optional entrypoint to be used instead of the build step image's default
	// If unset, the image's default will be used.
	Entrypoint string `protobuf:"bytes,7,opt,name=entrypoint,proto3" json:"entrypoint,omitempty"`
	// A list of environment variables which are encrypted using a Cloud KMS
	// crypto key. These values must be specified in the build's secrets.
	SecretEnv []string `protobuf:"bytes,8,rep,name=secret_env,json=secretEnv" json:"secret_env,omitempty"`
	// List of volumes to mount into the build step.
	//
	// Each volume will be created as an empty volume prior to execution of the
	// build step. Upon completion of the build, volumes and their contents will
	// be discarded.
	//
	// Using a named volume in only one step is not valid as it is indicative
	// of a mis-configured build request.
	Volumes []*Volume `protobuf:"bytes,9,rep,name=volumes" json:"volumes,omitempty"`
}

func (m *BuildStep) Reset()                    { *m = BuildStep{} }
func (m *BuildStep) String() string            { return proto.CompactTextString(m) }
func (*BuildStep) ProtoMessage()               {}
func (*BuildStep) Descriptor() ([]byte, []int) { return fileDescriptorCloudbuild, []int{6} }

func (m *BuildStep) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BuildStep) GetEnv() []string {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *BuildStep) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *BuildStep) GetDir() string {
	if m != nil {
		return m.Dir
	}
	return ""
}

func (m *BuildStep) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BuildStep) GetWaitFor() []string {
	if m != nil {
		return m.WaitFor
	}
	return nil
}

func (m *BuildStep) GetEntrypoint() string {
	if m != nil {
		return m.Entrypoint
	}
	return ""
}

func (m *BuildStep) GetSecretEnv() []string {
	if m != nil {
		return m.SecretEnv
	}
	return nil
}

func (m *BuildStep) GetVolumes() []*Volume {
	if m != nil {
		return m.Volumes
	}
	return nil
}

// Volume describes a Docker container volume which is mounted into build steps
// in order to persist files across build step execution.
type Volume struct {
	// Name of the volume to mount.
	//
	// Volume names must be unique per build step and must be valid names for
	// Docker volumes. Each named volume must be used by at least two build steps.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Path at which to mount the volume.
	//
	// Paths must be absolute and cannot conflict with other volume paths on the
	// same build step or with certain reserved volume paths.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *Volume) Reset()                    { *m = Volume{} }
func (m *Volume) String() string            { return proto.CompactTextString(m) }
func (*Volume) ProtoMessage()               {}
func (*Volume) Descriptor() ([]byte, []int) { return fileDescriptorCloudbuild, []int{7} }

func (m *Volume) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Volume) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

// Results describes the artifacts created by the build pipeline.
type Results struct {
	// Images that were built as a part of the build.
	Images []*BuiltImage `protobuf:"bytes,2,rep,name=images" json:"images,omitempty"`
	// List of build step digests, in order corresponding to build step indices.
	BuildStepImages []string `protobuf:"bytes,3,rep,name=build_step_images,json=buildStepImages" json:"build_step_images,omitempty"`
}

func (m *Results) Reset()                    { *m = Results{} }
func (m *Results) String() string            { return proto.CompactTextString(m) }
func (*Results) ProtoMessage()               {}
func (*Results) Descriptor() ([]byte, []int) { return fileDescriptorCloudbuild, []int{8} }

func (m *Results) GetImages() []*BuiltImage {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *Results) GetBuildStepImages() []string {
	if m != nil {
		return m.BuildStepImages
	}
	return nil
}

// A build resource in the Container Builder API.
//
// At a high level, a Build describes where to find source code, how to build
// it (for example, the builder image to run on the source), and what tag to
// apply to the built image when it is pushed to Google Container Registry.
//
// Fields can include the following variables which will be expanded when the
// build is created:
//
// - $PROJECT_ID: the project ID of the build.
// - $BUILD_ID: the autogenerated ID of the build.
// - $REPO_NAME: the source repository name specified by RepoSource.
// - $BRANCH_NAME: the branch name specified by RepoSource.
// - $TAG_NAME: the tag name specified by RepoSource.
// - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or
//   resolved from the specified branch or tag.
// - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.
type Build struct {
	// Unique identifier of the build.
	// @OutputOnly
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ID of the project.
	// @OutputOnly.
	ProjectId string `protobuf:"bytes,16,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Status of the build.
	// @OutputOnly
	Status Build_Status `protobuf:"varint,2,opt,name=status,proto3,enum=google.devtools.cloudbuild.v1.Build_Status" json:"status,omitempty"`
	// Customer-readable message about the current status.
	// @OutputOnly
	StatusDetail string `protobuf:"bytes,24,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`
	// Describes where to find the source files to build.
	Source *Source `protobuf:"bytes,3,opt,name=source" json:"source,omitempty"`
	// Describes the operations to be performed on the workspace.
	Steps []*BuildStep `protobuf:"bytes,11,rep,name=steps" json:"steps,omitempty"`
	// Results of the build.
	// @OutputOnly
	Results *Results `protobuf:"bytes,10,opt,name=results" json:"results,omitempty"`
	// Time at which the request to create the build was received.
	// @OutputOnly
	CreateTime *google_protobuf5.Timestamp `protobuf:"bytes,6,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	// Time at which execution of the build was started.
	// @OutputOnly
	StartTime *google_protobuf5.Timestamp `protobuf:"bytes,7,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	// Time at which execution of the build was finished.
	//
	// The difference between finish_time and start_time is the duration of the
	// build's execution.
	// @OutputOnly
	FinishTime *google_protobuf5.Timestamp `protobuf:"bytes,8,opt,name=finish_time,json=finishTime" json:"finish_time,omitempty"`
	// Amount of time that this build should be allowed to run, to second
	// granularity. If this amount of time elapses, work on the build will cease
	// and the build status will be TIMEOUT.
	//
	// Default time is ten minutes.
	Timeout *google_protobuf4.Duration `protobuf:"bytes,12,opt,name=timeout" json:"timeout,omitempty"`
	// A list of images to be pushed upon the successful completion of all build
	// steps.
	//
	// The images will be pushed using the builder service account's credentials.
	//
	// The digests of the pushed images will be stored in the Build resource's
	// results field.
	//
	// If any of the images fail to be pushed, the build is marked FAILURE.
	Images []string `protobuf:"bytes,13,rep,name=images" json:"images,omitempty"`
	// Google Cloud Storage bucket where logs should be written (see
	// [Bucket Name
	// Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
	// Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
	LogsBucket string `protobuf:"bytes,19,opt,name=logs_bucket,json=logsBucket,proto3" json:"logs_bucket,omitempty"`
	// A permanent fixed identifier for source.
	// @OutputOnly
	SourceProvenance *SourceProvenance `protobuf:"bytes,21,opt,name=source_provenance,json=sourceProvenance" json:"source_provenance,omitempty"`
	// The ID of the BuildTrigger that triggered this build, if it was
	// triggered automatically.
	// @OutputOnly
	BuildTriggerId string `protobuf:"bytes,22,opt,name=build_trigger_id,json=buildTriggerId,proto3" json:"build_trigger_id,omitempty"`
	// Special options for this build.
	Options *BuildOptions `protobuf:"bytes,23,opt,name=options" json:"options,omitempty"`
	// URL to logs for this build in Google Cloud Logging.
	// @OutputOnly
	LogUrl string `protobuf:"bytes,25,opt,name=log_url,json=logUrl,proto3" json:"log_url,omitempty"`
	// Substitutions data for Build resource.
	Substitutions map[string]string `protobuf:"bytes,29,rep,name=substitutions" json:"substitutions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Tags for annotation of a Build. These are not docker tags.
	Tags []string `protobuf:"bytes,31,rep,name=tags" json:"tags,omitempty"`
	// Secrets to decrypt using Cloud KMS.
	Secrets []*Secret `protobuf:"bytes,32,rep,name=secrets" json:"secrets,omitempty"`
}

func (m *Build) Reset()                    { *m = Build{} }
func (m *Build) String() string            { return proto.CompactTextString(m) }
func (*Build) ProtoMessage()               {}
func (*Build) Descriptor() ([]byte, []int) { return fileDescriptorCloudbuild, []int{9} }

func (m *Build) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Build) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *Build) GetStatus() Build_Status {
	if m != nil {
		return m.Status
	}
	return Build_STATUS_UNKNOWN
}

func (m *Build) GetStatusDetail() string {
	if m != nil {
		return m.StatusDetail
	}
	return ""
}

func (m *Build) GetSource() *Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *Build) GetSteps() []*BuildStep {
	if m != nil {
		return m.Steps
	}
	return nil
}

func (m *Build) GetResults() *Results {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *Build) GetCreateTime() *google_protobuf5.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *Build) GetStartTime() *google_protobuf5.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *Build) GetFinishTime() *google_protobuf5.Timestamp {
	if m != nil {
		return m.FinishTime
	}
	return nil
}

func (m *Build) GetTimeout() *google_protobuf4.Duration {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *Build) GetImages() []string {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *Build) GetLogsBucket() string {
	if m != nil {
		return m.LogsBucket
	}
	return ""
}

func (m *Build) GetSourceProvenance() *SourceProvenance {
	if m != nil {
		return m.SourceProvenance
	}
	return nil
}

func (m *Build) GetBuildTriggerId() string {
	if m != nil {
		return m.BuildTriggerId
	}
	return ""
}

func (m *Build) GetOptions() *BuildOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *Build) GetLogUrl() string {
	if m != nil {
		return m.LogUrl
	}
	return ""
}

func (m *Build) GetSubstitutions() map[string]string {
	if m != nil {
		return m.Substitutions
	}
	return nil
}

func (m *Build) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Build) GetSecrets() []*Secret {
	if m != nil {
		return m.Secrets
	}
	return nil
}

// Metadata for build operations.
type BuildOperationMetadata struct {
	// The build that the operation is tracking.
	Build *Build `protobuf:"bytes,1,opt,name=build" json:"build,omitempty"`
}

func (m *BuildOperationMetadata) Reset()         { *m = BuildOperationMetadata{} }
func (m *BuildOperationMetadata) String() string { return proto.CompactTextString(m) }
func (*BuildOperationMetadata) ProtoMessage()    {}
func (*BuildOperationMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptorCloudbuild, []int{10}
}

func (m *BuildOperationMetadata) GetBuild() *Build {
	if m != nil {
		return m.Build
	}
	return nil
}

// Provenance of the source. Ways to find the original source, or verify that
// some source was used for this build.
type SourceProvenance struct {
	// A copy of the build's source.storage_source, if exists, with any
	// generations resolved.
	ResolvedStorageSource *StorageSource `protobuf:"bytes,3,opt,name=resolved_storage_source,json=resolvedStorageSource" json:"resolved_storage_source,omitempty"`
	// A copy of the build's source.repo_source, if exists, with any
	// revisions resolved.
	ResolvedRepoSource *RepoSource `protobuf:"bytes,6,opt,name=resolved_repo_source,json=resolvedRepoSource" json:"resolved_repo_source,omitempty"`
	// Hash(es) of the build source, which can be used to verify that the original
	// source integrity was maintained in the build. Note that FileHashes will
	// only be populated if BuildOptions has requested a SourceProvenanceHash.
	//
	// The keys to this map are file paths used as build source and the values
	// contain the hash values for those files.
	//
	// If the build source came in a single package such as a gzipped tarfile
	// (.tar.gz), the FileHash will be for the single path to that file.
	// @OutputOnly
	FileHashes map[string]*FileHashes `protobuf:"bytes,4,rep,name=file_hashes,json=fileHashes" json:"file_hashes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SourceProvenance) Reset()                    { *m = SourceProvenance{} }
func (m *SourceProvenance) String() string            { return proto.CompactTextString(m) }
func (*SourceProvenance) ProtoMessage()               {}
func (*SourceProvenance) Descriptor() ([]byte, []int) { return fileDescriptorCloudbuild, []int{11} }

func (m *SourceProvenance) GetResolvedStorageSource() *StorageSource {
	if m != nil {
		return m.ResolvedStorageSource
	}
	return nil
}

func (m *SourceProvenance) GetResolvedRepoSource() *RepoSource {
	if m != nil {
		return m.ResolvedRepoSource
	}
	return nil
}

func (m *SourceProvenance) GetFileHashes() map[string]*FileHashes {
	if m != nil {
		return m.FileHashes
	}
	return nil
}

// Container message for hashes of byte content of files, used in
// SourceProvenance messages to verify integrity of source input to the build.
type FileHashes struct {
	// Collection of file hashes.
	FileHash []*Hash `protobuf:"bytes,1,rep,name=file_hash,json=fileHash" json:"file_hash,omitempty"`
}

func (m *FileHashes) Reset()                    { *m = FileHashes{} }
func (m *FileHashes) String() string            { return proto.CompactTextString(m) }
func (*FileHashes) ProtoMessage()               {}
func (*FileHashes) Descriptor() ([]byte, []int) { return fileDescriptorCloudbuild, []int{12} }

func (m *FileHashes) GetFileHash() []*Hash {
	if m != nil {
		return m.FileHash
	}
	return nil
}

// Container message for hash values.
type Hash struct {
	// The type of hash that was performed.
	Type Hash_HashType `protobuf:"varint,1,opt,name=type,proto3,enum=google.devtools.cloudbuild.v1.Hash_HashType" json:"type,omitempty"`
	// The hash value.
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Hash) Reset()                    { *m = Hash{} }
func (m *Hash) String() string            { return proto.CompactTextString(m) }
func (*Hash) ProtoMessage()               {}
func (*Hash) Descriptor() ([]byte, []int) { return fileDescriptorCloudbuild, []int{13} }

func (m *Hash) GetType() Hash_HashType {
	if m != nil {
		return m.Type
	}
	return Hash_NONE
}

func (m *Hash) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// Secret pairs a set of secret environment variables containing encrypted
// values with the Cloud KMS key to use to decrypt the value.
type Secret struct {
	// Cloud KMS key name to use to decrypt these envs.
	KmsKeyName string `protobuf:"bytes,1,opt,name=kms_key_name,json=kmsKeyName,proto3" json:"kms_key_name,omitempty"`
	// Map of environment variable name to its encrypted value.
	//
	// Secret environment variables must be unique across all of a build's
	// secrets, and must be used by at least one build step. Values can be at most
	// 1 KB in size. There can be at most ten secret values across all of a
	// build's secrets.
	SecretEnv map[string][]byte `protobuf:"bytes,3,rep,name=secret_env,json=secretEnv" json:"secret_env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Secret) Reset()                    { *m = Secret{} }
func (m *Secret) String() string            { return proto.CompactTextString(m) }
func (*Secret) ProtoMessage()               {}
func (*Secret) Descriptor() ([]byte, []int) { return fileDescriptorCloudbuild, []int{14} }

func (m *Secret) GetKmsKeyName() string {
	if m != nil {
		return m.KmsKeyName
	}
	return ""
}

func (m *Secret) GetSecretEnv() map[string][]byte {
	if m != nil {
		return m.SecretEnv
	}
	return nil
}

// Request to create a new build.
type CreateBuildRequest struct {
	// ID of the project.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Build resource to create.
	Build *Build `protobuf:"bytes,2,opt,name=build" json:"build,omitempty"`
}

func (m *CreateBuildRequest) Reset()                    { *m = CreateBuildRequest{} }
func (m *CreateBuildRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateBuildRequest) ProtoMessage()               {}
func (*CreateBuildRequest) Descriptor() ([]byte, []int) { return fileDescriptorCloudbuild, []int{15} }

func (m *CreateBuildRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *CreateBuildRequest) GetBuild() *Build {
	if m != nil {
		return m.Build
	}
	return nil
}

// Request to get a build.
type GetBuildRequest struct {
	// ID of the project.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// ID of the build.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetBuildRequest) Reset()                    { *m = GetBuildRequest{} }
func (m *GetBuildRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBuildRequest) ProtoMessage()               {}
func (*GetBuildRequest) Descriptor() ([]byte, []int) { return fileDescriptorCloudbuild, []int{16} }

func (m *GetBuildRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *GetBuildRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Request to list builds.
type ListBuildsRequest struct {
	// ID of the project.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Number of results to return in the list.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token to provide to skip to a particular spot in the list.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// The raw filter text to constrain the results.
	Filter string `protobuf:"bytes,8,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (m *ListBuildsRequest) Reset()                    { *m = ListBuildsRequest{} }
func (m *ListBuildsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListBuildsRequest) ProtoMessage()               {}
func (*ListBuildsRequest) Descriptor() ([]byte, []int) { return fileDescriptorCloudbuild, []int{17} }

func (m *ListBuildsRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *ListBuildsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListBuildsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *ListBuildsRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

// Response including listed builds.
type ListBuildsResponse struct {
	// Builds will be sorted by create_time, descending.
	Builds []*Build `protobuf:"bytes,1,rep,name=builds" json:"builds,omitempty"`
	// Token to receive the next page of results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (m *ListBuildsResponse) Reset()                    { *m = ListBuildsResponse{} }
func (m *ListBuildsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListBuildsResponse) ProtoMessage()               {}
func (*ListBuildsResponse) Descriptor() ([]byte, []int) { return fileDescriptorCloudbuild, []int{18} }

func (m *ListBuildsResponse) GetBuilds() []*Build {
	if m != nil {
		return m.Builds
	}
	return nil
}

func (m *ListBuildsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

// Request to cancel an ongoing build.
type CancelBuildRequest struct {
	// ID of the project.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// ID of the build.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *CancelBuildRequest) Reset()                    { *m = CancelBuildRequest{} }
func (m *CancelBuildRequest) String() string            { return proto.CompactTextString(m) }
func (*CancelBuildRequest) ProtoMessage()               {}
func (*CancelBuildRequest) Descriptor() ([]byte, []int) { return fileDescriptorCloudbuild, []int{19} }

func (m *CancelBuildRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *CancelBuildRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Configuration for an automated build in response to source repository
// changes.
type BuildTrigger struct {
	// Unique identifier of the trigger.
	//
	// @OutputOnly
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Human-readable description of this trigger.
	Description string `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
	// Template describing the types of source changes to trigger a build.
	//
	// Branch and tag names in trigger templates are interpreted as regular
	// expressions. Any branch or tag change that matches that regular expression
	// will trigger a build.
	TriggerTemplate *RepoSource `protobuf:"bytes,7,opt,name=trigger_template,json=triggerTemplate" json:"trigger_template,omitempty"`
	// Template describing the Build request to make when the trigger is matched.
	//
	// Types that are valid to be assigned to BuildTemplate:
	//	*BuildTrigger_Build
	//	*BuildTrigger_Filename
	BuildTemplate isBuildTrigger_BuildTemplate `protobuf_oneof:"build_template"`
	// Time when the trigger was created.
	//
	// @OutputOnly
	CreateTime *google_protobuf5.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	// If true, the trigger will never result in a build.
	Disabled bool `protobuf:"varint,9,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Substitutions data for Build resource.
	Substitutions map[string]string `protobuf:"bytes,11,rep,name=substitutions" json:"substitutions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *BuildTrigger) Reset()                    { *m = BuildTrigger{} }
func (m *BuildTrigger) String() string            { return proto.CompactTextString(m) }
func (*BuildTrigger) ProtoMessage()               {}
func (*BuildTrigger) Descriptor() ([]byte, []int) { return fileDescriptorCloudbuild, []int{20} }

type isBuildTrigger_BuildTemplate interface {
	isBuildTrigger_BuildTemplate()
}

type BuildTrigger_Build struct {
	Build *Build `protobuf:"bytes,4,opt,name=build,oneof"`
}
type BuildTrigger_Filename struct {
	Filename string `protobuf:"bytes,8,opt,name=filename,proto3,oneof"`
}

func (*BuildTrigger_Build) isBuildTrigger_BuildTemplate()    {}
func (*BuildTrigger_Filename) isBuildTrigger_BuildTemplate() {}

func (m *BuildTrigger) GetBuildTemplate() isBuildTrigger_BuildTemplate {
	if m != nil {
		return m.BuildTemplate
	}
	return nil
}

func (m *BuildTrigger) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BuildTrigger) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *BuildTrigger) GetTriggerTemplate() *RepoSource {
	if m != nil {
		return m.TriggerTemplate
	}
	return nil
}

func (m *BuildTrigger) GetBuild() *Build {
	if x, ok := m.GetBuildTemplate().(*BuildTrigger_Build); ok {
		return x.Build
	}
	return nil
}

func (m *BuildTrigger) GetFilename() string {
	if x, ok := m.GetBuildTemplate().(*BuildTrigger_Filename); ok {
		return x.Filename
	}
	return ""
}

func (m *BuildTrigger) GetCreateTime() *google_protobuf5.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *BuildTrigger) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *BuildTrigger) GetSubstitutions() map[string]string {
	if m != nil {
		return m.Substitutions
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BuildTrigger) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BuildTrigger_OneofMarshaler, _BuildTrigger_OneofUnmarshaler, _BuildTrigger_OneofSizer, []interface{}{
		(*BuildTrigger_Build)(nil),
		(*BuildTrigger_Filename)(nil),
	}
}

func _BuildTrigger_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BuildTrigger)
	// build_template
	switch x := m.BuildTemplate.(type) {
	case *BuildTrigger_Build:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Build); err != nil {
			return err
		}
	case *BuildTrigger_Filename:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Filename)
	case nil:
	default:
		return fmt.Errorf("BuildTrigger.BuildTemplate has unexpected type %T", x)
	}
	return nil
}

func _BuildTrigger_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BuildTrigger)
	switch tag {
	case 4: // build_template.build
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Build)
		err := b.DecodeMessage(msg)
		m.BuildTemplate = &BuildTrigger_Build{msg}
		return true, err
	case 8: // build_template.filename
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.BuildTemplate = &BuildTrigger_Filename{x}
		return true, err
	default:
		return false, nil
	}
}

func _BuildTrigger_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BuildTrigger)
	// build_template
	switch x := m.BuildTemplate.(type) {
	case *BuildTrigger_Build:
		s := proto.Size(x.Build)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BuildTrigger_Filename:
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Filename)))
		n += len(x.Filename)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Request to create a new BuildTrigger.
type CreateBuildTriggerRequest struct {
	// ID of the project for which to configure automatic builds.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// BuildTrigger to create.
	Trigger *BuildTrigger `protobuf:"bytes,2,opt,name=trigger" json:"trigger,omitempty"`
}

func (m *CreateBuildTriggerRequest) Reset()         { *m = CreateBuildTriggerRequest{} }
func (m *CreateBuildTriggerRequest) String() string { return proto.CompactTextString(m) }
func (*CreateBuildTriggerRequest) ProtoMessage()    {}
func (*CreateBuildTriggerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorCloudbuild, []int{21}
}

func (m *CreateBuildTriggerRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *CreateBuildTriggerRequest) GetTrigger() *BuildTrigger {
	if m != nil {
		return m.Trigger
	}
	return nil
}

// Returns the BuildTrigger with the specified ID.
type GetBuildTriggerRequest struct {
	// ID of the project that owns the trigger.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// ID of the BuildTrigger to get.
	TriggerId string `protobuf:"bytes,2,opt,name=trigger_id,json=triggerId,proto3" json:"trigger_id,omitempty"`
}

func (m *GetBuildTriggerRequest) Reset()         { *m = GetBuildTriggerRequest{} }
func (m *GetBuildTriggerRequest) String() string { return proto.CompactTextString(m) }
func (*GetBuildTriggerRequest) ProtoMessage()    {}
func (*GetBuildTriggerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorCloudbuild, []int{22}
}

func (m *GetBuildTriggerRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *GetBuildTriggerRequest) GetTriggerId() string {
	if m != nil {
		return m.TriggerId
	}
	return ""
}

// Request to list existing BuildTriggers.
type ListBuildTriggersRequest struct {
	// ID of the project for which to list BuildTriggers.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (m *ListBuildTriggersRequest) Reset()         { *m = ListBuildTriggersRequest{} }
func (m *ListBuildTriggersRequest) String() string { return proto.CompactTextString(m) }
func (*ListBuildTriggersRequest) ProtoMessage()    {}
func (*ListBuildTriggersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorCloudbuild, []int{23}
}

func (m *ListBuildTriggersRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

// Response containing existing BuildTriggers.
type ListBuildTriggersResponse struct {
	// BuildTriggers for the project, sorted by create_time descending.
	Triggers []*BuildTrigger `protobuf:"bytes,1,rep,name=triggers" json:"triggers,omitempty"`
}

func (m *ListBuildTriggersResponse) Reset()         { *m = ListBuildTriggersResponse{} }
func (m *ListBuildTriggersResponse) String() string { return proto.CompactTextString(m) }
func (*ListBuildTriggersResponse) ProtoMessage()    {}
func (*ListBuildTriggersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorCloudbuild, []int{24}
}

func (m *ListBuildTriggersResponse) GetTriggers() []*BuildTrigger {
	if m != nil {
		return m.Triggers
	}
	return nil
}

// Request to delete a BuildTrigger.
type DeleteBuildTriggerRequest struct {
	// ID of the project that owns the trigger.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// ID of the BuildTrigger to delete.
	TriggerId string `protobuf:"bytes,2,opt,name=trigger_id,json=triggerId,proto3" json:"trigger_id,omitempty"`
}

func (m *DeleteBuildTriggerRequest) Reset()         { *m = DeleteBuildTriggerRequest{} }
func (m *DeleteBuildTriggerRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteBuildTriggerRequest) ProtoMessage()    {}
func (*DeleteBuildTriggerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorCloudbuild, []int{25}
}

func (m *DeleteBuildTriggerRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *DeleteBuildTriggerRequest) GetTriggerId() string {
	if m != nil {
		return m.TriggerId
	}
	return ""
}

// Request to update an existing BuildTrigger.
type UpdateBuildTriggerRequest struct {
	// ID of the project that owns the trigger.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// ID of the BuildTrigger to update.
	TriggerId string `protobuf:"bytes,2,opt,name=trigger_id,json=triggerId,proto3" json:"trigger_id,omitempty"`
	// BuildTrigger to update.
	Trigger *BuildTrigger `protobuf:"bytes,3,opt,name=trigger" json:"trigger,omitempty"`
}

func (m *UpdateBuildTriggerRequest) Reset()         { *m = UpdateBuildTriggerRequest{} }
func (m *UpdateBuildTriggerRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateBuildTriggerRequest) ProtoMessage()    {}
func (*UpdateBuildTriggerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorCloudbuild, []int{26}
}

func (m *UpdateBuildTriggerRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *UpdateBuildTriggerRequest) GetTriggerId() string {
	if m != nil {
		return m.TriggerId
	}
	return ""
}

func (m *UpdateBuildTriggerRequest) GetTrigger() *BuildTrigger {
	if m != nil {
		return m.Trigger
	}
	return nil
}

// Optional arguments to enable specific features of builds.
type BuildOptions struct {
	// Requested hash for SourceProvenance.
	SourceProvenanceHash []Hash_HashType `protobuf:"varint,1,rep,packed,name=source_provenance_hash,json=sourceProvenanceHash,enum=google.devtools.cloudbuild.v1.Hash_HashType" json:"source_provenance_hash,omitempty"`
	// Requested verifiability options.
	RequestedVerifyOption BuildOptions_VerifyOption `protobuf:"varint,2,opt,name=requested_verify_option,json=requestedVerifyOption,proto3,enum=google.devtools.cloudbuild.v1.BuildOptions_VerifyOption" json:"requested_verify_option,omitempty"`
	// GCE VM size to run the build on.
	MachineType BuildOptions_MachineType `protobuf:"varint,3,opt,name=machine_type,json=machineType,proto3,enum=google.devtools.cloudbuild.v1.BuildOptions_MachineType" json:"machine_type,omitempty"`
	// Requested disk size for the VM that runs the build. Note that this is *NOT*
	// "disk free"; some of the space will be used by the operating system and
	// build utilities. Also note that this is the minimum disk size that will be
	// allocated for the build -- the build may run with a larger disk than
	// requested. At present, the maximum disk size is 1000GB; builds that request
	// more than the maximum are rejected with an error.
	DiskSizeGb int64 `protobuf:"varint,6,opt,name=disk_size_gb,json=diskSizeGb,proto3" json:"disk_size_gb,omitempty"`
	// SubstitutionOption to allow unmatch substitutions.
	SubstitutionOption BuildOptions_SubstitutionOption `protobuf:"varint,4,opt,name=substitution_option,json=substitutionOption,proto3,enum=google.devtools.cloudbuild.v1.BuildOptions_SubstitutionOption" json:"substitution_option,omitempty"`
	// LogStreamingOption to define build log streaming behavior to Google Cloud
	// Storage.
	LogStreamingOption BuildOptions_LogStreamingOption `protobuf:"varint,5,opt,name=log_streaming_option,json=logStreamingOption,proto3,enum=google.devtools.cloudbuild.v1.BuildOptions_LogStreamingOption" json:"log_streaming_option,omitempty"`
}

func (m *BuildOptions) Reset()                    { *m = BuildOptions{} }
func (m *BuildOptions) String() string            { return proto.CompactTextString(m) }
func (*BuildOptions) ProtoMessage()               {}
func (*BuildOptions) Descriptor() ([]byte, []int) { return fileDescriptorCloudbuild, []int{27} }

func (m *BuildOptions) GetSourceProvenanceHash() []Hash_HashType {
	if m != nil {
		return m.SourceProvenanceHash
	}
	return nil
}

func (m *BuildOptions) GetRequestedVerifyOption() BuildOptions_VerifyOption {
	if m != nil {
		return m.RequestedVerifyOption
	}
	return BuildOptions_NOT_VERIFIED
}

func (m *BuildOptions) GetMachineType() BuildOptions_MachineType {
	if m != nil {
		return m.MachineType
	}
	return BuildOptions_UNSPECIFIED
}

func (m *BuildOptions) GetDiskSizeGb() int64 {
	if m != nil {
		return m.DiskSizeGb
	}
	return 0
}

func (m *BuildOptions) GetSubstitutionOption() BuildOptions_SubstitutionOption {
	if m != nil {
		return m.SubstitutionOption
	}
	return BuildOptions_MUST_MATCH
}

func (m *BuildOptions) GetLogStreamingOption() BuildOptions_LogStreamingOption {
	if m != nil {
		return m.LogStreamingOption
	}
	return BuildOptions_STREAM_DEFAULT
}

func init() {
	proto.RegisterType((*RetryBuildRequest)(nil), "google.devtools.cloudbuild.v1.RetryBuildRequest")
	proto.RegisterType((*RunBuildTriggerRequest)(nil), "google.devtools.cloudbuild.v1.RunBuildTriggerRequest")
	proto.RegisterType((*StorageSource)(nil), "google.devtools.cloudbuild.v1.StorageSource")
	proto.RegisterType((*RepoSource)(nil), "google.devtools.cloudbuild.v1.RepoSource")
	proto.RegisterType((*Source)(nil), "google.devtools.cloudbuild.v1.Source")
	proto.RegisterType((*BuiltImage)(nil), "google.devtools.cloudbuild.v1.BuiltImage")
	proto.RegisterType((*BuildStep)(nil), "google.devtools.cloudbuild.v1.BuildStep")
	proto.RegisterType((*Volume)(nil), "google.devtools.cloudbuild.v1.Volume")
	proto.RegisterType((*Results)(nil), "google.devtools.cloudbuild.v1.Results")
	proto.RegisterType((*Build)(nil), "google.devtools.cloudbuild.v1.Build")
	proto.RegisterType((*BuildOperationMetadata)(nil), "google.devtools.cloudbuild.v1.BuildOperationMetadata")
	proto.RegisterType((*SourceProvenance)(nil), "google.devtools.cloudbuild.v1.SourceProvenance")
	proto.RegisterType((*FileHashes)(nil), "google.devtools.cloudbuild.v1.FileHashes")
	proto.RegisterType((*Hash)(nil), "google.devtools.cloudbuild.v1.Hash")
	proto.RegisterType((*Secret)(nil), "google.devtools.cloudbuild.v1.Secret")
	proto.RegisterType((*CreateBuildRequest)(nil), "google.devtools.cloudbuild.v1.CreateBuildRequest")
	proto.RegisterType((*GetBuildRequest)(nil), "google.devtools.cloudbuild.v1.GetBuildRequest")
	proto.RegisterType((*ListBuildsRequest)(nil), "google.devtools.cloudbuild.v1.ListBuildsRequest")
	proto.RegisterType((*ListBuildsResponse)(nil), "google.devtools.cloudbuild.v1.ListBuildsResponse")
	proto.RegisterType((*CancelBuildRequest)(nil), "google.devtools.cloudbuild.v1.CancelBuildRequest")
	proto.RegisterType((*BuildTrigger)(nil), "google.devtools.cloudbuild.v1.BuildTrigger")
	proto.RegisterType((*CreateBuildTriggerRequest)(nil), "google.devtools.cloudbuild.v1.CreateBuildTriggerRequest")
	proto.RegisterType((*GetBuildTriggerRequest)(nil), "google.devtools.cloudbuild.v1.GetBuildTriggerRequest")
	proto.RegisterType((*ListBuildTriggersRequest)(nil), "google.devtools.cloudbuild.v1.ListBuildTriggersRequest")
	proto.RegisterType((*ListBuildTriggersResponse)(nil), "google.devtools.cloudbuild.v1.ListBuildTriggersResponse")
	proto.RegisterType((*DeleteBuildTriggerRequest)(nil), "google.devtools.cloudbuild.v1.DeleteBuildTriggerRequest")
	proto.RegisterType((*UpdateBuildTriggerRequest)(nil), "google.devtools.cloudbuild.v1.UpdateBuildTriggerRequest")
	proto.RegisterType((*BuildOptions)(nil), "google.devtools.cloudbuild.v1.BuildOptions")
	proto.RegisterEnum("google.devtools.cloudbuild.v1.Build_Status", Build_Status_name, Build_Status_value)
	proto.RegisterEnum("google.devtools.cloudbuild.v1.Hash_HashType", Hash_HashType_name, Hash_HashType_value)
	proto.RegisterEnum("google.devtools.cloudbuild.v1.BuildOptions_VerifyOption", BuildOptions_VerifyOption_name, BuildOptions_VerifyOption_value)
	proto.RegisterEnum("google.devtools.cloudbuild.v1.BuildOptions_MachineType", BuildOptions_MachineType_name, BuildOptions_MachineType_value)
	proto.RegisterEnum("google.devtools.cloudbuild.v1.BuildOptions_SubstitutionOption", BuildOptions_SubstitutionOption_name, BuildOptions_SubstitutionOption_value)
	proto.RegisterEnum("google.devtools.cloudbuild.v1.BuildOptions_LogStreamingOption", BuildOptions_LogStreamingOption_name, BuildOptions_LogStreamingOption_value)
}

func init() {
	proto.RegisterFile("google/devtools/cloudbuild/v1/cloudbuild.proto", fileDescriptorCloudbuild)
}

var fileDescriptorCloudbuild = []byte{
	// 2438 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x59, 0xdb, 0x6f, 0xdb, 0xd6,
	0x19, 0x37, 0x25, 0x59, 0x97, 0x4f, 0xbe, 0x30, 0xa7, 0xa9, 0x43, 0x2b, 0x4d, 0xe3, 0x31, 0x6d,
	0xe7, 0x26, 0xad, 0x14, 0x3b, 0x4b, 0xe3, 0xba, 0x69, 0x62, 0x5b, 0x96, 0x2f, 0x88, 0x2d, 0x67,
	0x94, 0x94, 0x60, 0x37, 0x70, 0x94, 0x78, 0x2c, 0x73, 0xa6, 0x48, 0x8e, 0x3c, 0xd2, 0xea, 0x04,
	0xc1, 0xb6, 0x02, 0xdb, 0xeb, 0x06, 0x0c, 0x7b, 0x18, 0xf6, 0xb0, 0xcb, 0xf3, 0x30, 0x0c, 0xdb,
	0xc3, 0x80, 0x01, 0x7d, 0xde, 0x1f, 0xb0, 0x3f, 0x61, 0xfb, 0x43, 0x86, 0x73, 0xa1, 0x44, 0x49,
	0xc9, 0x28, 0x35, 0xeb, 0x4b, 0xc2, 0xf3, 0x9d, 0xf3, 0x7d, 0xe7, 0xbb, 0x7f, 0xbf, 0x63, 0x41,
	0xb1, 0xed, 0xba, 0x6d, 0x1b, 0x97, 0x4c, 0xdc, 0x23, 0xae, 0x6b, 0x07, 0xa5, 0x96, 0xed, 0x76,
	0xcd, 0x66, 0xd7, 0xb2, 0xcd, 0x52, 0x6f, 0x2d, 0xb2, 0x2a, 0x7a, 0xbe, 0x4b, 0x5c, 0x74, 0x8d,
	0x9f, 0x2f, 0x86, 0xe7, 0x8b, 0x91, 0x13, 0xbd, 0xb5, 0xc2, 0x5b, 0x42, 0x9c, 0xe1, 0x59, 0x25,
	0xc3, 0x71, 0x5c, 0x62, 0x10, 0xcb, 0x75, 0x02, 0xce, 0x5c, 0x50, 0xc5, 0x2e, 0xe3, 0x29, 0x19,
	0x5d, 0xd3, 0x22, 0xfc, 0x5f, 0xdd, 0x76, 0xdb, 0xe2, 0xcc, 0x0d, 0x71, 0xc6, 0x76, 0x9d, 0xb6,
	0xdf, 0x75, 0x1c, 0xcb, 0x69, 0x97, 0x5c, 0x0f, 0xfb, 0x43, 0x82, 0xde, 0x16, 0x87, 0xd8, 0xaa,
	0xd9, 0x3d, 0x2d, 0x99, 0x5d, 0x7e, 0x40, 0xec, 0x5f, 0x1d, 0xdd, 0xc7, 0x1d, 0x8f, 0x5c, 0x88,
	0xcd, 0xeb, 0xa3, 0x9b, 0xc4, 0xea, 0xe0, 0x80, 0x18, 0x1d, 0x8f, 0x1f, 0x50, 0x77, 0xe0, 0x92,
	0x86, 0x89, 0x7f, 0xb1, 0x43, 0xad, 0xd2, 0xf0, 0x0f, 0xbb, 0x38, 0x20, 0xe8, 0x1a, 0x80, 0xe7,
	0xbb, 0x3f, 0xc0, 0x2d, 0xa2, 0x5b, 0xa6, 0x22, 0xad, 0x48, 0xab, 0x39, 0x2d, 0x27, 0x28, 0x87,
	0x26, 0x5a, 0x80, 0x84, 0x65, 0x2a, 0x09, 0x46, 0x4e, 0x58, 0xa6, 0xfa, 0x1b, 0x09, 0x96, 0xb4,
	0xae, 0xc3, 0x44, 0xd4, 0x7d, 0xab, 0xdd, 0xc6, 0xfe, 0x84, 0x92, 0xae, 0x01, 0x10, 0xce, 0xa0,
	0xf7, 0x25, 0xe6, 0x04, 0xe5, 0xd0, 0x44, 0xdb, 0x90, 0x0e, 0xdc, 0xae, 0xdf, 0xc2, 0x4a, 0x72,
	0x45, 0x5a, 0xcd, 0xaf, 0xbf, 0x5f, 0xfc, 0x9f, 0x11, 0x29, 0x6a, 0xd8, 0x73, 0x6b, 0x8c, 0x41,
	0x13, 0x8c, 0xaa, 0x0e, 0xf3, 0x35, 0xe2, 0xfa, 0x46, 0x1b, 0xf3, 0x0d, 0xb4, 0x04, 0xe9, 0x66,
	0xb7, 0x75, 0x8e, 0x89, 0xd0, 0x46, 0xac, 0x28, 0xdd, 0x6d, 0x52, 0xb5, 0x84, 0x1a, 0x62, 0x85,
	0xde, 0x06, 0x68, 0x63, 0x47, 0xc4, 0x84, 0xe9, 0x91, 0xd4, 0x22, 0x14, 0xf5, 0x9f, 0x12, 0xc0,
	0xe0, 0xde, 0x38, 0x83, 0xaf, 0x42, 0xce, 0xc7, 0x9e, 0xab, 0x3b, 0x46, 0x07, 0x8b, 0x8b, 0xb2,
	0x94, 0x50, 0x35, 0x3a, 0x18, 0x7d, 0x0d, 0xf2, 0x4d, 0xdf, 0x70, 0x5a, 0x67, 0x7c, 0x9b, 0xde,
	0x95, 0x3b, 0x98, 0xd1, 0x80, 0x13, 0xd9, 0x91, 0xab, 0x90, 0x25, 0x46, 0x9b, 0xef, 0xa7, 0xc4,
	0x7e, 0x86, 0x18, 0x6d, 0xb6, 0x79, 0x1d, 0xa0, 0xe5, 0x76, 0x3a, 0x16, 0xd1, 0x83, 0x33, 0x43,
	0x99, 0x15, 0xdb, 0x39, 0x4e, 0xab, 0x9d, 0x19, 0x48, 0x86, 0xa4, 0x69, 0xf9, 0x4a, 0x86, 0xdd,
	0x4b, 0x3f, 0x77, 0x00, 0xb2, 0x3e, 0xee, 0x59, 0x01, 0xb5, 0xe4, 0xef, 0x12, 0xa4, 0x85, 0x15,
	0x0d, 0x58, 0x08, 0xb8, 0xd7, 0x74, 0x11, 0x80, 0x04, 0x0b, 0xc0, 0x07, 0x31, 0x01, 0x18, 0x72,
	0xf5, 0xc1, 0x8c, 0x36, 0x1f, 0x0c, 0xf9, 0xfe, 0x08, 0xf2, 0xcc, 0xfa, 0x2f, 0x19, 0x54, 0xea,
	0x0b, 0xbf, 0xbf, 0xda, 0xc9, 0x86, 0xd9, 0xa1, 0x6e, 0x00, 0xd0, 0xe4, 0x23, 0x87, 0x1d, 0xa3,
	0x8d, 0x11, 0x82, 0x14, 0xf3, 0x0f, 0x77, 0x3e, 0xfb, 0xa6, 0xd1, 0x35, 0xad, 0x36, 0x0e, 0x08,
	0xf7, 0xaa, 0x26, 0x56, 0xea, 0xe7, 0x09, 0xc8, 0xb1, 0xbc, 0xad, 0x11, 0xec, 0xbd, 0x94, 0x53,
	0x86, 0x24, 0x76, 0x7a, 0x4a, 0x62, 0x25, 0x49, 0x7d, 0x86, 0x9d, 0x1e, 0x3d, 0x65, 0xf8, 0xed,
	0x40, 0x49, 0x32, 0x12, 0xfb, 0x0e, 0x3d, 0x9b, 0xea, 0x7b, 0x56, 0x14, 0xc9, 0x6c, 0x58, 0x24,
	0x68, 0x19, 0xb2, 0x3f, 0x32, 0x2c, 0xa2, 0x9f, 0xba, 0xbe, 0x92, 0x66, 0x9c, 0x19, 0xba, 0xde,
	0x73, 0x7d, 0x9a, 0x62, 0xd8, 0x21, 0xfe, 0x85, 0xe7, 0x5a, 0x0e, 0x11, 0xd1, 0x89, 0x50, 0x68,
	0x4e, 0x05, 0xb8, 0xe5, 0x63, 0xa2, 0x53, 0x4d, 0xb2, 0x8c, 0x39, 0xc7, 0x29, 0x15, 0xa7, 0x87,
	0x1e, 0x42, 0xa6, 0xe7, 0xda, 0xdd, 0x0e, 0x0e, 0x94, 0xdc, 0x4a, 0x72, 0x35, 0xbf, 0xfe, 0x6e,
	0x8c, 0x47, 0x9f, 0xb0, 0xd3, 0x5a, 0xc8, 0xa5, 0xde, 0x86, 0x34, 0x27, 0xbd, 0xd4, 0x01, 0x08,
	0x52, 0x9e, 0x41, 0xce, 0x44, 0xb6, 0xb2, 0x6f, 0xf5, 0x33, 0xc8, 0x68, 0x38, 0xe8, 0xda, 0x24,
	0xa0, 0x35, 0x6a, 0x51, 0xb7, 0x07, 0xcc, 0x45, 0xf1, 0xe1, 0x1c, 0x04, 0x4a, 0x13, 0x8c, 0xe8,
	0x26, 0x5c, 0x62, 0xdb, 0x7a, 0x40, 0xb0, 0xa7, 0x0b, 0x69, 0xdc, 0xbb, 0x8b, 0xcd, 0x30, 0x38,
	0x8c, 0x25, 0x50, 0xff, 0x9d, 0x83, 0x59, 0x16, 0x30, 0xe1, 0x60, 0xa9, 0xef, 0xe0, 0xe1, 0xca,
	0x93, 0x47, 0x2b, 0xaf, 0x0c, 0xe9, 0x80, 0x18, 0xa4, 0x1b, 0x30, 0x43, 0x16, 0xd6, 0x6f, 0x4d,
	0xa0, 0xa7, 0x59, 0xac, 0x31, 0x16, 0x4d, 0xb0, 0xa2, 0x1b, 0x30, 0xcf, 0xbf, 0x74, 0x13, 0x13,
	0xc3, 0xb2, 0x15, 0x85, 0x5d, 0x33, 0xc7, 0x89, 0xbb, 0x8c, 0x86, 0x3e, 0x1d, 0xe9, 0x5a, 0x71,
	0xe1, 0x18, 0xee, 0x58, 0xe8, 0x01, 0xcc, 0x52, 0x3f, 0x04, 0x4a, 0x9e, 0xf9, 0x73, 0x75, 0x12,
	0x3d, 0xa9, 0x83, 0x34, 0xce, 0x86, 0xb6, 0x20, 0xe3, 0xf3, 0xd8, 0x28, 0xc0, 0xee, 0x7f, 0x2f,
	0xb6, 0xc0, 0xd8, 0x69, 0x2d, 0x64, 0x43, 0x9f, 0x40, 0xbe, 0xe5, 0x63, 0x83, 0x60, 0x9d, 0x4e,
	0x0b, 0x25, 0xcd, 0xa4, 0x14, 0x42, 0x29, 0xe1, 0x28, 0x29, 0xd6, 0xc3, 0x51, 0xa2, 0x01, 0x3f,
	0x4e, 0x09, 0xe8, 0x63, 0x80, 0x80, 0x18, 0x3e, 0xe1, 0xbc, 0x99, 0x58, 0xde, 0x1c, 0x3b, 0xcd,
	0x58, 0x3f, 0x81, 0xfc, 0xa9, 0xe5, 0x58, 0xc1, 0x19, 0xe7, 0xcd, 0xc6, 0xdf, 0xcb, 0x8f, 0x33,
	0xe6, 0x3b, 0x90, 0xa1, 0x5c, 0x6e, 0x97, 0x28, 0x73, 0x8c, 0x71, 0x79, 0x8c, 0x71, 0x57, 0x0c,
	0x4e, 0x2d, 0x3c, 0x49, 0xdb, 0x82, 0x48, 0xb7, 0x79, 0x96, 0x6e, 0x61, 0x46, 0x5e, 0x87, 0xbc,
	0xed, 0xb6, 0x03, 0x5d, 0x4c, 0x8a, 0x37, 0x78, 0x49, 0x52, 0xd2, 0x0e, 0x9f, 0x16, 0xdf, 0x85,
	0x4b, 0x3c, 0x5c, 0xba, 0xe7, 0xbb, 0x3d, 0xec, 0x18, 0x4e, 0x0b, 0x2b, 0x6f, 0xb2, 0x7b, 0x4b,
	0x13, 0x85, 0xfb, 0x71, 0x9f, 0x4d, 0x93, 0x83, 0x11, 0x0a, 0x5a, 0x05, 0x99, 0x17, 0x44, 0x64,
	0x38, 0x2e, 0x31, 0x1d, 0x16, 0x9a, 0x91, 0x21, 0x7b, 0x68, 0xa2, 0x0a, 0x64, 0x5c, 0x8f, 0xa1,
	0x05, 0xe5, 0x0a, 0xbb, 0x7d, 0xa2, 0xb4, 0x3e, 0xe1, 0x2c, 0x5a, 0xc8, 0x8b, 0xae, 0x40, 0xc6,
	0x76, 0xdb, 0x7a, 0xd7, 0xb7, 0x95, 0x65, 0xde, 0x1f, 0x6d, 0xb7, 0xdd, 0xf0, 0x6d, 0xf4, 0x3d,
	0x98, 0x0f, 0xba, 0xcd, 0x80, 0x58, 0xa4, 0xcb, 0x6f, 0xb9, 0xc6, 0x92, 0xf2, 0xde, 0x64, 0xc5,
	0x13, 0xe5, 0xac, 0xd0, 0x7e, 0xa6, 0x0d, 0x4b, 0xa3, 0xbd, 0x85, 0x18, 0xed, 0x40, 0xb9, 0xce,
	0x5b, 0x29, 0xfd, 0xa6, 0xed, 0x8c, 0xf7, 0xb6, 0x40, 0x59, 0x99, 0xa8, 0x9d, 0xd5, 0xd8, 0x69,
	0x2d, 0xe4, 0x2a, 0x6c, 0x01, 0x1a, 0xbf, 0x99, 0x76, 0xe8, 0x73, 0x7c, 0x21, 0xfa, 0x05, 0xfd,
	0x44, 0x97, 0x61, 0xb6, 0x67, 0xd8, 0xdd, 0x70, 0x0e, 0xf3, 0xc5, 0x66, 0x62, 0x43, 0x52, 0x7f,
	0x0c, 0x69, 0x5e, 0xf8, 0x08, 0xc1, 0x42, 0xad, 0xbe, 0x5d, 0x6f, 0xd4, 0xf4, 0x46, 0xf5, 0x51,
	0xf5, 0xe4, 0x69, 0x55, 0x9e, 0x41, 0x00, 0xe9, 0x6f, 0x36, 0x2a, 0x8d, 0xca, 0xae, 0x2c, 0xa1,
	0x3c, 0x64, 0x9e, 0x9e, 0x68, 0x8f, 0x0e, 0xab, 0xfb, 0x72, 0x82, 0x2e, 0x6a, 0x8d, 0x72, 0xb9,
	0x52, 0xab, 0xc9, 0x49, 0xba, 0xd8, 0xdb, 0x3e, 0x3c, 0x6a, 0x68, 0x15, 0x39, 0x45, 0xc5, 0x1c,
	0x56, 0xeb, 0x15, 0xad, 0xba, 0x7d, 0xa4, 0x57, 0x34, 0xed, 0x44, 0x93, 0x67, 0xe9, 0x81, 0xfa,
	0xe1, 0x71, 0xe5, 0xa4, 0x51, 0x97, 0xd3, 0x68, 0x1e, 0x72, 0xe5, 0xed, 0x6a, 0xb9, 0x72, 0x74,
	0x54, 0xd9, 0x95, 0x33, 0x6a, 0x1d, 0x96, 0x44, 0xa0, 0x04, 0xcc, 0x38, 0xc6, 0xc4, 0x30, 0x0d,
	0x62, 0xa0, 0x4d, 0x98, 0x65, 0x86, 0x33, 0x43, 0xf2, 0xeb, 0xef, 0x4c, 0x12, 0x08, 0x8d, 0xb3,
	0xa8, 0x7f, 0x48, 0x82, 0x3c, 0x9a, 0x7d, 0xc8, 0x84, 0x2b, 0x3e, 0x0e, 0x5c, 0xbb, 0x87, 0x69,
	0xff, 0x1d, 0x9a, 0xf9, 0xc9, 0xe9, 0x67, 0xbe, 0xf6, 0x66, 0x28, 0x6c, 0x18, 0x75, 0x7d, 0x07,
	0x2e, 0xf7, 0x6f, 0x89, 0x42, 0x80, 0xf4, 0xb4, 0xb8, 0x0e, 0x85, 0x62, 0x22, 0x98, 0xeb, 0xfb,
	0xb4, 0x6f, 0xd8, 0x58, 0x3f, 0x33, 0x82, 0x33, 0x1c, 0x28, 0x29, 0x96, 0x35, 0x0f, 0xa7, 0x2c,
	0xc3, 0xe2, 0x9e, 0x65, 0xe3, 0x03, 0x26, 0x81, 0xa7, 0x2a, 0x9c, 0xf6, 0x09, 0x85, 0x33, 0x58,
	0x1c, 0xd9, 0x7e, 0x49, 0x3e, 0x3d, 0x8c, 0xe6, 0x53, 0xbc, 0x51, 0x03, 0x81, 0xd1, 0xd4, 0xab,
	0x02, 0x0c, 0x36, 0xd0, 0x16, 0xe4, 0xfa, 0x96, 0x29, 0x12, 0xb3, 0xeb, 0x46, 0x8c, 0x58, 0xca,
	0xa9, 0x65, 0x43, 0xdd, 0xd5, 0x9f, 0x48, 0x90, 0xa2, 0x1f, 0x68, 0x0b, 0x52, 0xe4, 0xc2, 0xe3,
	0xa3, 0x7d, 0x21, 0x36, 0xa8, 0x94, 0x85, 0xfd, 0x53, 0xbf, 0xf0, 0xb0, 0xc6, 0x38, 0x87, 0xeb,
	0x65, 0x4e, 0x28, 0xad, 0xae, 0x40, 0x36, 0x3c, 0x87, 0xb2, 0x90, 0xaa, 0x9e, 0x54, 0x2b, 0xbc,
	0x46, 0x6a, 0x07, 0xdb, 0xeb, 0x77, 0x3f, 0x92, 0x25, 0xf5, 0x0b, 0x8a, 0x2b, 0x59, 0x6d, 0xa2,
	0x15, 0x98, 0x3b, 0xef, 0x04, 0xfa, 0x39, 0xbe, 0xd0, 0x23, 0x38, 0x03, 0xce, 0x3b, 0xc1, 0x23,
	0x7c, 0xc1, 0x30, 0x6c, 0x6d, 0x08, 0xeb, 0x24, 0x99, 0xc9, 0xdf, 0x98, 0xa8, 0x01, 0x88, 0xff,
	0x2a, 0x4e, 0x8f, 0xc7, 0x6f, 0x80, 0x90, 0x0a, 0xf7, 0x61, 0x61, 0x78, 0x33, 0xae, 0x1b, 0xcc,
	0x45, 0x43, 0xe2, 0x02, 0x2a, 0xb3, 0xf9, 0x36, 0xcd, 0x1b, 0xa9, 0x5f, 0xa7, 0x89, 0xe9, 0xeb,
	0x74, 0x0b, 0x16, 0xf7, 0x31, 0x79, 0x9d, 0x17, 0xd9, 0xcf, 0x25, 0xb8, 0x74, 0x64, 0x05, 0x5c,
	0x46, 0x30, 0xa1, 0x90, 0xab, 0x90, 0xf3, 0x58, 0xf5, 0x5b, 0xcf, 0xb8, 0x17, 0x66, 0xb5, 0x2c,
	0x25, 0xd4, 0xac, 0x67, 0xfc, 0x5d, 0x43, 0x37, 0x89, 0x7b, 0x8e, 0x1d, 0x01, 0xa2, 0xd9, 0xf1,
	0x3a, 0x25, 0xd0, 0x41, 0x7a, 0x6a, 0xd9, 0x04, 0xfb, 0x6c, 0x6a, 0xe7, 0x34, 0xb1, 0x52, 0x9f,
	0x01, 0x8a, 0xea, 0x11, 0x78, 0xae, 0x13, 0x60, 0x74, 0x9f, 0xbe, 0xc1, 0x28, 0x45, 0xe4, 0xf4,
	0x64, 0xde, 0x11, 0x3c, 0xe8, 0x3d, 0x58, 0x74, 0xf0, 0x67, 0x44, 0x8f, 0xe8, 0xc3, 0x2d, 0x9f,
	0xa7, 0xe4, 0xc7, 0xa1, 0x4e, 0x6a, 0x19, 0x50, 0x99, 0x56, 0xb6, 0xfd, 0x3a, 0x9e, 0xfc, 0x59,
	0x0a, 0xe6, 0xa2, 0x0f, 0xdb, 0x31, 0xd8, 0xb9, 0x02, 0x79, 0x13, 0x07, 0x2d, 0xdf, 0x62, 0xa3,
	0x94, 0x41, 0xae, 0x9c, 0x16, 0x25, 0xa1, 0x3a, 0xc8, 0xe1, 0x1c, 0x27, 0xb8, 0xe3, 0xd9, 0x06,
	0x09, 0x71, 0xd1, 0x14, 0x7d, 0x6f, 0x51, 0x88, 0xa8, 0x0b, 0x09, 0xe8, 0x7e, 0x98, 0x60, 0xa9,
	0xc9, 0x13, 0xec, 0x60, 0x46, 0xa4, 0x18, 0x7a, 0x0b, 0x58, 0x8b, 0x60, 0x45, 0x98, 0x15, 0x0f,
	0xc5, 0x3e, 0x65, 0x14, 0x00, 0xce, 0x4e, 0x05, 0x00, 0x0b, 0x90, 0x35, 0xad, 0xc0, 0x68, 0xda,
	0xd8, 0x54, 0x72, 0x2b, 0xd2, 0x6a, 0x56, 0xeb, 0xaf, 0x91, 0x39, 0x0a, 0x27, 0x38, 0xc6, 0x7d,
	0x30, 0x89, 0xf2, 0x22, 0x00, 0xf1, 0xa8, 0xe2, 0xf5, 0x01, 0xc0, 0x8e, 0x0c, 0x0b, 0x02, 0x80,
	0x09, 0x77, 0xab, 0x3f, 0x95, 0x60, 0x39, 0xd2, 0x05, 0xa6, 0xfb, 0x33, 0x47, 0x05, 0x32, 0x22,
	0x7c, 0xa2, 0x1d, 0xdc, 0x9a, 0xc2, 0x60, 0x2d, 0xe4, 0x55, 0x9f, 0xc0, 0x52, 0xd8, 0x17, 0xfe,
	0x9f, 0x7f, 0x66, 0x51, 0x3f, 0x06, 0xa5, 0x5f, 0xa4, 0x42, 0xf0, 0x84, 0x3d, 0x43, 0x35, 0x61,
	0xf9, 0x25, 0xac, 0xa2, 0xcc, 0xf7, 0x21, 0x2b, 0x2e, 0x09, 0x0b, 0x7d, 0x2a, 0xbb, 0xfb, 0xcc,
	0xea, 0xb7, 0x60, 0x79, 0x17, 0xdb, 0xf8, 0x4b, 0xf9, 0x3e, 0xc6, 0xf6, 0xdf, 0x4b, 0xb0, 0xdc,
	0xf0, 0x4c, 0xe3, 0x2b, 0x90, 0x1d, 0x0d, 0x7b, 0xf2, 0x35, 0xc2, 0xfe, 0x8f, 0xb4, 0x68, 0x41,
	0x02, 0xb6, 0xa3, 0x26, 0x2c, 0x8d, 0x3d, 0x3e, 0x06, 0x10, 0x61, 0xda, 0xe1, 0x7e, 0x79, 0xf4,
	0xf9, 0xc1, 0xe0, 0x82, 0x47, 0x61, 0x21, 0x73, 0x02, 0x36, 0xf5, 0x1e, 0xf6, 0xad, 0xd3, 0x0b,
	0x9d, 0xbf, 0x16, 0xc4, 0xfb, 0x79, 0x63, 0x8a, 0x87, 0x46, 0xf1, 0x09, 0x13, 0xc0, 0x57, 0x14,
	0x22, 0x0a, 0xc1, 0x51, 0x32, 0xfa, 0x36, 0xcc, 0x75, 0x8c, 0xd6, 0x99, 0xe5, 0x60, 0x9d, 0x01,
	0x95, 0x24, 0xbb, 0xe6, 0xde, 0x34, 0xd7, 0x1c, 0x73, 0x7e, 0x66, 0x56, 0xbe, 0x33, 0x58, 0x50,
	0xdc, 0x61, 0x5a, 0xc1, 0x39, 0x1b, 0x6d, 0x7a, 0xbb, 0xc9, 0x60, 0x67, 0x52, 0x03, 0x4a, 0xa3,
	0xd3, 0x6d, 0xbf, 0x89, 0x5c, 0x78, 0x23, 0xda, 0x44, 0x42, 0x5b, 0x53, 0x4c, 0x89, 0x07, 0xd3,
	0x28, 0x11, 0x6d, 0x3d, 0xc2, 0x62, 0x14, 0x8c, 0xd1, 0x90, 0x07, 0x97, 0xe9, 0x93, 0x2b, 0x20,
	0x3e, 0x36, 0x3a, 0x96, 0xd3, 0x0e, 0x6f, 0x9c, 0x9d, 0xfe, 0xc6, 0x23, 0xb7, 0x5d, 0x0b, 0xc5,
	0x84, 0x37, 0xda, 0x63, 0x34, 0xb5, 0x08, 0x73, 0x43, 0x0e, 0x97, 0x61, 0xae, 0x7a, 0x52, 0xd7,
	0x9f, 0x54, 0xb4, 0xc3, 0xbd, 0xc3, 0xca, 0xae, 0x3c, 0x83, 0xe6, 0x20, 0xdb, 0x5f, 0x49, 0x6a,
	0x19, 0xf2, 0x11, 0x87, 0xa2, 0x45, 0xc8, 0x37, 0xaa, 0xb5, 0xc7, 0x95, 0x72, 0x78, 0x9a, 0xf2,
	0xaf, 0xe9, 0x07, 0x87, 0xfb, 0x07, 0xe5, 0xc7, 0x0d, 0x7d, 0x43, 0x96, 0xd0, 0x25, 0x98, 0x8f,
	0x50, 0xee, 0xac, 0xcb, 0x09, 0xf5, 0xee, 0x70, 0x2f, 0x16, 0x57, 0x2f, 0x00, 0x1c, 0x37, 0x6a,
	0x75, 0xfd, 0x78, 0xbb, 0x5e, 0x3e, 0x90, 0x67, 0xa8, 0xec, 0xed, 0xa3, 0xa3, 0x93, 0xa7, 0xfa,
	0xd1, 0xc9, 0x49, 0xad, 0x22, 0x4b, 0xea, 0x3e, 0xa0, 0x71, 0xab, 0xf8, 0x6b, 0x4c, 0xab, 0x6c,
	0x1f, 0xeb, 0xbb, 0x95, 0xbd, 0xed, 0xc6, 0x51, 0x5d, 0x9e, 0xa1, 0x2f, 0x27, 0x41, 0x3b, 0xa9,
	0xca, 0x12, 0x95, 0x1c, 0x2e, 0xf7, 0xf6, 0xe4, 0xc4, 0xfa, 0xdf, 0x16, 0x00, 0xca, 0xd4, 0x75,
	0xfc, 0x8f, 0x46, 0xbf, 0x94, 0x20, 0x1f, 0x69, 0xe3, 0x68, 0x2d, 0xc6, 0xcf, 0xe3, 0xc0, 0xaf,
	0x70, 0x2d, 0x64, 0x89, 0xfc, 0xd5, 0xbe, 0xd8, 0x7f, 0xa8, 0xa9, 0xa5, 0xcf, 0xff, 0xf5, 0x9f,
	0x5f, 0x25, 0xde, 0x57, 0x57, 0x4a, 0xbd, 0xb5, 0x92, 0x68, 0x15, 0x41, 0xe9, 0xf9, 0xa0, 0x8d,
	0xbc, 0x28, 0x71, 0x1c, 0xb3, 0x29, 0x46, 0xf1, 0x2f, 0x24, 0xc8, 0x86, 0x6d, 0x1d, 0x15, 0x63,
	0xf4, 0x19, 0xc1, 0x85, 0x85, 0x89, 0xc6, 0xbe, 0xfa, 0x21, 0xd3, 0xe9, 0xeb, 0xe8, 0xdd, 0x38,
	0x9d, 0x4a, 0xcf, 0x2d, 0xf3, 0x05, 0xfa, 0xad, 0x04, 0x30, 0x40, 0x6d, 0xe8, 0x76, 0xcc, 0x1d,
	0x63, 0x40, 0xb3, 0xb0, 0x36, 0x05, 0x07, 0x9f, 0x15, 0xea, 0x2a, 0x53, 0x51, 0x45, 0xb1, 0x6e,
	0x43, 0xbf, 0xa3, 0x21, 0x1c, 0xe0, 0xba, 0xf8, 0x10, 0x8e, 0x61, 0xc0, 0x09, 0xbd, 0x76, 0x8f,
	0xa9, 0xb4, 0xa6, 0x7e, 0x30, 0x91, 0xd7, 0x36, 0x5b, 0xec, 0x9e, 0x4d, 0xe9, 0x26, 0xfa, 0x8b,
	0x34, 0xf4, 0x62, 0x08, 0x91, 0xe3, 0xc6, 0xe4, 0xb9, 0x36, 0x3c, 0x86, 0x0a, 0xd3, 0xcc, 0x0d,
	0xf5, 0x0e, 0x53, 0xfb, 0x43, 0x55, 0x7d, 0xb5, 0xda, 0xe1, 0x60, 0xdd, 0x0c, 0x67, 0x0c, 0xfa,
	0xb3, 0x34, 0x78, 0x73, 0x84, 0xfa, 0xde, 0x9d, 0x30, 0x17, 0x5f, 0x47, 0x59, 0xe1, 0x63, 0x54,
	0x8a, 0x57, 0xb6, 0xf4, 0x7c, 0x30, 0x6b, 0x5f, 0xa0, 0xbf, 0x46, 0x5f, 0x38, 0x21, 0xf2, 0x40,
	0xf7, 0x26, 0x4d, 0xbc, 0x11, 0x98, 0x53, 0xd8, 0x98, 0x9e, 0x51, 0x24, 0xee, 0x4d, 0x66, 0xc1,
	0x3b, 0x68, 0x02, 0x77, 0xd3, 0xd4, 0x45, 0xe3, 0x40, 0x26, 0x36, 0x31, 0x5e, 0x89, 0x7d, 0x0a,
	0x4b, 0x63, 0x98, 0xbc, 0xd2, 0xf1, 0xc8, 0x45, 0xe8, 0xd6, 0x9b, 0x53, 0xbb, 0xf5, 0x0b, 0x09,
	0xd0, 0x38, 0x1c, 0x8a, 0xd5, 0xf0, 0x95, 0x08, 0x6a, 0xba, 0x6c, 0xd8, 0x62, 0x6a, 0x6f, 0xae,
	0x4f, 0xab, 0xf6, 0x20, 0x8f, 0xff, 0x24, 0xc1, 0xe2, 0xc8, 0x4f, 0x91, 0xb1, 0x79, 0xfc, 0xf2,
	0x9f, 0x2e, 0xe3, 0xfa, 0x7c, 0x99, 0xe9, 0xfa, 0xa9, 0x7a, 0x67, 0x5a, 0x5d, 0xfd, 0xae, 0xb3,
	0x19, 0xfe, 0xad, 0xff, 0xd7, 0xec, 0xc7, 0xc3, 0xf0, 0xe7, 0xd7, 0xd8, 0x4e, 0x3b, 0xf6, 0x4b,
	0x6d, 0x9c, 0x92, 0x1f, 0x31, 0x25, 0x6f, 0xab, 0xb7, 0x26, 0x6b, 0x61, 0x3e, 0x95, 0xbf, 0x29,
	0xdd, 0xdc, 0x51, 0x41, 0x69, 0xb9, 0x9d, 0x50, 0xf6, 0x90, 0x12, 0x8f, 0xa5, 0x3f, 0x26, 0x92,
	0xfb, 0xe5, 0x9d, 0x66, 0x9a, 0xe5, 0xdc, 0x9d, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x0d, 0x67,
	0xf3, 0x05, 0x56, 0x1f, 0x00, 0x00,
}
