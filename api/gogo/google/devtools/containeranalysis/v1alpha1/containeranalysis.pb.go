// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: google/devtools/containeranalysis/v1alpha1/containeranalysis.proto

package google_devtools_containeranalysis_v1alpha1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "go.pedge.io/pb/gogo/google/api"
import _ "go.pedge.io/pb/gogo/google/iam/v1"
import _ "go.pedge.io/pb/gogo/google/iam/v1"
import google_longrunning "go.pedge.io/pb/gogo/google/longrunning"
import _ "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/types"
import google_protobuf4 "go.pedge.io/pb/gogo/google/protobuf"
import google_protobuf1 "github.com/gogo/protobuf/types"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This must be 1:1 with members of our oneofs, it can be used for filtering
// Note and Occurrence on their kind.
type Note_Kind int32

const (
	// Unknown
	Note_KIND_UNSPECIFIED Note_Kind = 0
	// The note and occurrence represent a package vulnerability.
	Note_PACKAGE_VULNERABILITY Note_Kind = 2
	// The note and occurrence assert build provenance.
	Note_BUILD_DETAILS Note_Kind = 3
	// This represents an image basis relationship.
	Note_IMAGE_BASIS Note_Kind = 4
	// This represents a package installed via a package manager.
	Note_PACKAGE_MANAGER Note_Kind = 5
	// The note and occurrence track deployment events.
	Note_DEPLOYABLE Note_Kind = 6
	// The note and occurrence track the initial discovery status of a resource.
	Note_DISCOVERY Note_Kind = 7
)

var Note_Kind_name = map[int32]string{
	0: "KIND_UNSPECIFIED",
	2: "PACKAGE_VULNERABILITY",
	3: "BUILD_DETAILS",
	4: "IMAGE_BASIS",
	5: "PACKAGE_MANAGER",
	6: "DEPLOYABLE",
	7: "DISCOVERY",
}
var Note_Kind_value = map[string]int32{
	"KIND_UNSPECIFIED":      0,
	"PACKAGE_VULNERABILITY": 2,
	"BUILD_DETAILS":         3,
	"IMAGE_BASIS":           4,
	"PACKAGE_MANAGER":       5,
	"DEPLOYABLE":            6,
	"DISCOVERY":             7,
}

func (x Note_Kind) String() string {
	return proto.EnumName(Note_Kind_name, int32(x))
}
func (Note_Kind) EnumDescriptor() ([]byte, []int) { return fileDescriptorContaineranalysis, []int{1, 0} }

// Types of platforms.
type Deployable_Deployment_Platform int32

const (
	// Unknown
	Deployable_Deployment_PLATFORM_UNSPECIFIED Deployable_Deployment_Platform = 0
	// Google Container Engine
	Deployable_Deployment_GKE Deployable_Deployment_Platform = 1
	// Google App Engine: Flexible Environment
	Deployable_Deployment_FLEX Deployable_Deployment_Platform = 2
	// Custom user-defined platform
	Deployable_Deployment_CUSTOM Deployable_Deployment_Platform = 3
)

var Deployable_Deployment_Platform_name = map[int32]string{
	0: "PLATFORM_UNSPECIFIED",
	1: "GKE",
	2: "FLEX",
	3: "CUSTOM",
}
var Deployable_Deployment_Platform_value = map[string]int32{
	"PLATFORM_UNSPECIFIED": 0,
	"GKE":    1,
	"FLEX":   2,
	"CUSTOM": 3,
}

func (x Deployable_Deployment_Platform) String() string {
	return proto.EnumName(Deployable_Deployment_Platform_name, int32(x))
}
func (Deployable_Deployment_Platform) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorContaineranalysis, []int{2, 0, 0}
}

// Public key formats
type BuildSignature_KeyType int32

const (
	// `KeyType` is not set.
	BuildSignature_KEY_TYPE_UNSPECIFIED BuildSignature_KeyType = 0
	// `PGP ASCII Armored` public key.
	BuildSignature_PGP_ASCII_ARMORED BuildSignature_KeyType = 1
	// `PKIX PEM` public key.
	BuildSignature_PKIX_PEM BuildSignature_KeyType = 2
)

var BuildSignature_KeyType_name = map[int32]string{
	0: "KEY_TYPE_UNSPECIFIED",
	1: "PGP_ASCII_ARMORED",
	2: "PKIX_PEM",
}
var BuildSignature_KeyType_value = map[string]int32{
	"KEY_TYPE_UNSPECIFIED": 0,
	"PGP_ASCII_ARMORED":    1,
	"PKIX_PEM":             2,
}

func (x BuildSignature_KeyType) String() string {
	return proto.EnumName(BuildSignature_KeyType_name, int32(x))
}
func (BuildSignature_KeyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorContaineranalysis, []int{5, 0}
}

// `Occurrence` includes information about analysis occurrences for an image.
type Occurrence struct {
	// Output only. The name of the `Occurrence` in the form
	// "projects/{project_id}/occurrences/{OCCURRENCE_ID}"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The unique URL of the image or the container for which the `Occurrence`
	// applies. For example, https://gcr.io/project/image@sha256:foo This field
	// can be used as a filter in list requests.
	ResourceUrl string `protobuf:"bytes,2,opt,name=resource_url,json=resourceUrl,proto3" json:"resource_url,omitempty"`
	// An analysis note associated with this image, in the form
	// "providers/{provider_id}/notes/{NOTE_ID}"
	// This field can be used as a filter in list requests.
	NoteName string `protobuf:"bytes,3,opt,name=note_name,json=noteName,proto3" json:"note_name,omitempty"`
	// Output only. This explicitly denotes which of the `Occurrence` details are
	// specified. This field can be used as a filter in list requests.
	Kind Note_Kind `protobuf:"varint,6,opt,name=kind,proto3,enum=google.devtools.containeranalysis.v1alpha1.Note_Kind" json:"kind,omitempty"`
	// Describes the details of the vulnerability `Note` found in this resource.
	//
	// Types that are valid to be assigned to Details:
	//	*Occurrence_VulnerabilityDetails
	//	*Occurrence_BuildDetails
	//	*Occurrence_DerivedImage
	//	*Occurrence_Installation
	//	*Occurrence_Deployment
	//	*Occurrence_Discovered
	Details isOccurrence_Details `protobuf_oneof:"details"`
	// A description of actions that can be taken to remedy the `Note`
	Remediation string `protobuf:"bytes,5,opt,name=remediation,proto3" json:"remediation,omitempty"`
	// Output only. The time this `Occurrence` was created.
	CreateTime *google_protobuf1.Timestamp `protobuf:"bytes,9,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	// Output only. The time this `Occurrence` was last updated.
	UpdateTime *google_protobuf1.Timestamp `protobuf:"bytes,10,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
}

func (m *Occurrence) Reset()                    { *m = Occurrence{} }
func (m *Occurrence) String() string            { return proto.CompactTextString(m) }
func (*Occurrence) ProtoMessage()               {}
func (*Occurrence) Descriptor() ([]byte, []int) { return fileDescriptorContaineranalysis, []int{0} }

type isOccurrence_Details interface {
	isOccurrence_Details()
}

type Occurrence_VulnerabilityDetails struct {
	VulnerabilityDetails *VulnerabilityType_VulnerabilityDetails `protobuf:"bytes,8,opt,name=vulnerability_details,json=vulnerabilityDetails,oneof"`
}
type Occurrence_BuildDetails struct {
	BuildDetails *BuildDetails `protobuf:"bytes,7,opt,name=build_details,json=buildDetails,oneof"`
}
type Occurrence_DerivedImage struct {
	DerivedImage *DockerImage_Derived `protobuf:"bytes,11,opt,name=derived_image,json=derivedImage,oneof"`
}
type Occurrence_Installation struct {
	Installation *PackageManager_Installation `protobuf:"bytes,12,opt,name=installation,oneof"`
}
type Occurrence_Deployment struct {
	Deployment *Deployable_Deployment `protobuf:"bytes,14,opt,name=deployment,oneof"`
}
type Occurrence_Discovered struct {
	Discovered *Discovery_Discovered `protobuf:"bytes,15,opt,name=discovered,oneof"`
}

func (*Occurrence_VulnerabilityDetails) isOccurrence_Details() {}
func (*Occurrence_BuildDetails) isOccurrence_Details()         {}
func (*Occurrence_DerivedImage) isOccurrence_Details()         {}
func (*Occurrence_Installation) isOccurrence_Details()         {}
func (*Occurrence_Deployment) isOccurrence_Details()           {}
func (*Occurrence_Discovered) isOccurrence_Details()           {}

func (m *Occurrence) GetDetails() isOccurrence_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *Occurrence) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Occurrence) GetResourceUrl() string {
	if m != nil {
		return m.ResourceUrl
	}
	return ""
}

func (m *Occurrence) GetNoteName() string {
	if m != nil {
		return m.NoteName
	}
	return ""
}

func (m *Occurrence) GetKind() Note_Kind {
	if m != nil {
		return m.Kind
	}
	return Note_KIND_UNSPECIFIED
}

func (m *Occurrence) GetVulnerabilityDetails() *VulnerabilityType_VulnerabilityDetails {
	if x, ok := m.GetDetails().(*Occurrence_VulnerabilityDetails); ok {
		return x.VulnerabilityDetails
	}
	return nil
}

func (m *Occurrence) GetBuildDetails() *BuildDetails {
	if x, ok := m.GetDetails().(*Occurrence_BuildDetails); ok {
		return x.BuildDetails
	}
	return nil
}

func (m *Occurrence) GetDerivedImage() *DockerImage_Derived {
	if x, ok := m.GetDetails().(*Occurrence_DerivedImage); ok {
		return x.DerivedImage
	}
	return nil
}

func (m *Occurrence) GetInstallation() *PackageManager_Installation {
	if x, ok := m.GetDetails().(*Occurrence_Installation); ok {
		return x.Installation
	}
	return nil
}

func (m *Occurrence) GetDeployment() *Deployable_Deployment {
	if x, ok := m.GetDetails().(*Occurrence_Deployment); ok {
		return x.Deployment
	}
	return nil
}

func (m *Occurrence) GetDiscovered() *Discovery_Discovered {
	if x, ok := m.GetDetails().(*Occurrence_Discovered); ok {
		return x.Discovered
	}
	return nil
}

func (m *Occurrence) GetRemediation() string {
	if m != nil {
		return m.Remediation
	}
	return ""
}

func (m *Occurrence) GetCreateTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *Occurrence) GetUpdateTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Occurrence) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Occurrence_OneofMarshaler, _Occurrence_OneofUnmarshaler, _Occurrence_OneofSizer, []interface{}{
		(*Occurrence_VulnerabilityDetails)(nil),
		(*Occurrence_BuildDetails)(nil),
		(*Occurrence_DerivedImage)(nil),
		(*Occurrence_Installation)(nil),
		(*Occurrence_Deployment)(nil),
		(*Occurrence_Discovered)(nil),
	}
}

func _Occurrence_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Occurrence)
	// details
	switch x := m.Details.(type) {
	case *Occurrence_VulnerabilityDetails:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VulnerabilityDetails); err != nil {
			return err
		}
	case *Occurrence_BuildDetails:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BuildDetails); err != nil {
			return err
		}
	case *Occurrence_DerivedImage:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DerivedImage); err != nil {
			return err
		}
	case *Occurrence_Installation:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Installation); err != nil {
			return err
		}
	case *Occurrence_Deployment:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Deployment); err != nil {
			return err
		}
	case *Occurrence_Discovered:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Discovered); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Occurrence.Details has unexpected type %T", x)
	}
	return nil
}

func _Occurrence_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Occurrence)
	switch tag {
	case 8: // details.vulnerability_details
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VulnerabilityType_VulnerabilityDetails)
		err := b.DecodeMessage(msg)
		m.Details = &Occurrence_VulnerabilityDetails{msg}
		return true, err
	case 7: // details.build_details
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BuildDetails)
		err := b.DecodeMessage(msg)
		m.Details = &Occurrence_BuildDetails{msg}
		return true, err
	case 11: // details.derived_image
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DockerImage_Derived)
		err := b.DecodeMessage(msg)
		m.Details = &Occurrence_DerivedImage{msg}
		return true, err
	case 12: // details.installation
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PackageManager_Installation)
		err := b.DecodeMessage(msg)
		m.Details = &Occurrence_Installation{msg}
		return true, err
	case 14: // details.deployment
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Deployable_Deployment)
		err := b.DecodeMessage(msg)
		m.Details = &Occurrence_Deployment{msg}
		return true, err
	case 15: // details.discovered
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Discovery_Discovered)
		err := b.DecodeMessage(msg)
		m.Details = &Occurrence_Discovered{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Occurrence_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Occurrence)
	// details
	switch x := m.Details.(type) {
	case *Occurrence_VulnerabilityDetails:
		s := proto.Size(x.VulnerabilityDetails)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Occurrence_BuildDetails:
		s := proto.Size(x.BuildDetails)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Occurrence_DerivedImage:
		s := proto.Size(x.DerivedImage)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Occurrence_Installation:
		s := proto.Size(x.Installation)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Occurrence_Deployment:
		s := proto.Size(x.Deployment)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Occurrence_Discovered:
		s := proto.Size(x.Discovered)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Provides a detailed description of a `Note`.
type Note struct {
	// The name of the note in the form
	// "providers/{provider_id}/notes/{NOTE_ID}"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// A one sentence description of this `Note`.
	ShortDescription string `protobuf:"bytes,3,opt,name=short_description,json=shortDescription,proto3" json:"short_description,omitempty"`
	// A detailed description of this `Note`.
	LongDescription string `protobuf:"bytes,4,opt,name=long_description,json=longDescription,proto3" json:"long_description,omitempty"`
	// Output only. This explicitly denotes which kind of note is specified. This
	// field can be used as a filter in list requests.
	Kind Note_Kind `protobuf:"varint,9,opt,name=kind,proto3,enum=google.devtools.containeranalysis.v1alpha1.Note_Kind" json:"kind,omitempty"`
	// The type of note.
	//
	// Types that are valid to be assigned to NoteType:
	//	*Note_VulnerabilityType
	//	*Note_BuildType
	//	*Note_BaseImage
	//	*Note_Package
	//	*Note_Deployable
	//	*Note_Discovery
	NoteType isNote_NoteType `protobuf_oneof:"note_type"`
	// URLs associated with this note
	RelatedUrl []*Note_RelatedUrl `protobuf:"bytes,7,rep,name=related_url,json=relatedUrl" json:"related_url,omitempty"`
	// Time of expiration for this note, null if note does not expire.
	ExpirationTime *google_protobuf1.Timestamp `protobuf:"bytes,10,opt,name=expiration_time,json=expirationTime" json:"expiration_time,omitempty"`
	// Output only. The time this note was created. This field can be used as a
	// filter in list requests.
	CreateTime *google_protobuf1.Timestamp `protobuf:"bytes,11,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	// Output only. The time this note was last updated. This field can be used as
	// a filter in list requests.
	UpdateTime *google_protobuf1.Timestamp `protobuf:"bytes,12,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
}

func (m *Note) Reset()                    { *m = Note{} }
func (m *Note) String() string            { return proto.CompactTextString(m) }
func (*Note) ProtoMessage()               {}
func (*Note) Descriptor() ([]byte, []int) { return fileDescriptorContaineranalysis, []int{1} }

type isNote_NoteType interface {
	isNote_NoteType()
}

type Note_VulnerabilityType struct {
	VulnerabilityType *VulnerabilityType `protobuf:"bytes,6,opt,name=vulnerability_type,json=vulnerabilityType,oneof"`
}
type Note_BuildType struct {
	BuildType *BuildType `protobuf:"bytes,8,opt,name=build_type,json=buildType,oneof"`
}
type Note_BaseImage struct {
	BaseImage *DockerImage_Basis `protobuf:"bytes,13,opt,name=base_image,json=baseImage,oneof"`
}
type Note_Package struct {
	Package *PackageManager_Package `protobuf:"bytes,14,opt,name=package,oneof"`
}
type Note_Deployable struct {
	Deployable *Deployable `protobuf:"bytes,17,opt,name=deployable,oneof"`
}
type Note_Discovery struct {
	Discovery *Discovery `protobuf:"bytes,18,opt,name=discovery,oneof"`
}

func (*Note_VulnerabilityType) isNote_NoteType() {}
func (*Note_BuildType) isNote_NoteType()         {}
func (*Note_BaseImage) isNote_NoteType()         {}
func (*Note_Package) isNote_NoteType()           {}
func (*Note_Deployable) isNote_NoteType()        {}
func (*Note_Discovery) isNote_NoteType()         {}

func (m *Note) GetNoteType() isNote_NoteType {
	if m != nil {
		return m.NoteType
	}
	return nil
}

func (m *Note) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Note) GetShortDescription() string {
	if m != nil {
		return m.ShortDescription
	}
	return ""
}

func (m *Note) GetLongDescription() string {
	if m != nil {
		return m.LongDescription
	}
	return ""
}

func (m *Note) GetKind() Note_Kind {
	if m != nil {
		return m.Kind
	}
	return Note_KIND_UNSPECIFIED
}

func (m *Note) GetVulnerabilityType() *VulnerabilityType {
	if x, ok := m.GetNoteType().(*Note_VulnerabilityType); ok {
		return x.VulnerabilityType
	}
	return nil
}

func (m *Note) GetBuildType() *BuildType {
	if x, ok := m.GetNoteType().(*Note_BuildType); ok {
		return x.BuildType
	}
	return nil
}

func (m *Note) GetBaseImage() *DockerImage_Basis {
	if x, ok := m.GetNoteType().(*Note_BaseImage); ok {
		return x.BaseImage
	}
	return nil
}

func (m *Note) GetPackage() *PackageManager_Package {
	if x, ok := m.GetNoteType().(*Note_Package); ok {
		return x.Package
	}
	return nil
}

func (m *Note) GetDeployable() *Deployable {
	if x, ok := m.GetNoteType().(*Note_Deployable); ok {
		return x.Deployable
	}
	return nil
}

func (m *Note) GetDiscovery() *Discovery {
	if x, ok := m.GetNoteType().(*Note_Discovery); ok {
		return x.Discovery
	}
	return nil
}

func (m *Note) GetRelatedUrl() []*Note_RelatedUrl {
	if m != nil {
		return m.RelatedUrl
	}
	return nil
}

func (m *Note) GetExpirationTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.ExpirationTime
	}
	return nil
}

func (m *Note) GetCreateTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *Note) GetUpdateTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Note) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Note_OneofMarshaler, _Note_OneofUnmarshaler, _Note_OneofSizer, []interface{}{
		(*Note_VulnerabilityType)(nil),
		(*Note_BuildType)(nil),
		(*Note_BaseImage)(nil),
		(*Note_Package)(nil),
		(*Note_Deployable)(nil),
		(*Note_Discovery)(nil),
	}
}

func _Note_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Note)
	// note_type
	switch x := m.NoteType.(type) {
	case *Note_VulnerabilityType:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VulnerabilityType); err != nil {
			return err
		}
	case *Note_BuildType:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BuildType); err != nil {
			return err
		}
	case *Note_BaseImage:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BaseImage); err != nil {
			return err
		}
	case *Note_Package:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Package); err != nil {
			return err
		}
	case *Note_Deployable:
		_ = b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Deployable); err != nil {
			return err
		}
	case *Note_Discovery:
		_ = b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Discovery); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Note.NoteType has unexpected type %T", x)
	}
	return nil
}

func _Note_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Note)
	switch tag {
	case 6: // note_type.vulnerability_type
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VulnerabilityType)
		err := b.DecodeMessage(msg)
		m.NoteType = &Note_VulnerabilityType{msg}
		return true, err
	case 8: // note_type.build_type
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BuildType)
		err := b.DecodeMessage(msg)
		m.NoteType = &Note_BuildType{msg}
		return true, err
	case 13: // note_type.base_image
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DockerImage_Basis)
		err := b.DecodeMessage(msg)
		m.NoteType = &Note_BaseImage{msg}
		return true, err
	case 14: // note_type.package
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PackageManager_Package)
		err := b.DecodeMessage(msg)
		m.NoteType = &Note_Package{msg}
		return true, err
	case 17: // note_type.deployable
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Deployable)
		err := b.DecodeMessage(msg)
		m.NoteType = &Note_Deployable{msg}
		return true, err
	case 18: // note_type.discovery
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Discovery)
		err := b.DecodeMessage(msg)
		m.NoteType = &Note_Discovery{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Note_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Note)
	// note_type
	switch x := m.NoteType.(type) {
	case *Note_VulnerabilityType:
		s := proto.Size(x.VulnerabilityType)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Note_BuildType:
		s := proto.Size(x.BuildType)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Note_BaseImage:
		s := proto.Size(x.BaseImage)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Note_Package:
		s := proto.Size(x.Package)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Note_Deployable:
		s := proto.Size(x.Deployable)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Note_Discovery:
		s := proto.Size(x.Discovery)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Metadata for any related URL information
type Note_RelatedUrl struct {
	// Specific URL to associate with the note
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Label to describe usage of the URL
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (m *Note_RelatedUrl) Reset()         { *m = Note_RelatedUrl{} }
func (m *Note_RelatedUrl) String() string { return proto.CompactTextString(m) }
func (*Note_RelatedUrl) ProtoMessage()    {}
func (*Note_RelatedUrl) Descriptor() ([]byte, []int) {
	return fileDescriptorContaineranalysis, []int{1, 0}
}

func (m *Note_RelatedUrl) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Note_RelatedUrl) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

// An artifact that can be deployed in some runtime.
type Deployable struct {
	// Resource URI for the artifact being deployed.
	ResourceUri []string `protobuf:"bytes,1,rep,name=resource_uri,json=resourceUri" json:"resource_uri,omitempty"`
}

func (m *Deployable) Reset()                    { *m = Deployable{} }
func (m *Deployable) String() string            { return proto.CompactTextString(m) }
func (*Deployable) ProtoMessage()               {}
func (*Deployable) Descriptor() ([]byte, []int) { return fileDescriptorContaineranalysis, []int{2} }

func (m *Deployable) GetResourceUri() []string {
	if m != nil {
		return m.ResourceUri
	}
	return nil
}

// The period during which some deployable was active in a runtime.
type Deployable_Deployment struct {
	// Identity of the user that triggered this deployment.
	UserEmail string `protobuf:"bytes,1,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	// Beginning of the lifetime of this deployment.
	DeployTime *google_protobuf1.Timestamp `protobuf:"bytes,2,opt,name=deploy_time,json=deployTime" json:"deploy_time,omitempty"`
	// End of the lifetime of this deployment.
	UndeployTime *google_protobuf1.Timestamp `protobuf:"bytes,3,opt,name=undeploy_time,json=undeployTime" json:"undeploy_time,omitempty"`
	// Configuration used to create this deployment.
	Config string `protobuf:"bytes,8,opt,name=config,proto3" json:"config,omitempty"`
	// Address of the runtime element hosting this deployment.
	Address string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	// Output only. Resource URI for the artifact being deployed taken from the
	// deployable field with the same name.
	ResourceUri []string `protobuf:"bytes,6,rep,name=resource_uri,json=resourceUri" json:"resource_uri,omitempty"`
	// Platform hosting this deployment.
	Platform Deployable_Deployment_Platform `protobuf:"varint,7,opt,name=platform,proto3,enum=google.devtools.containeranalysis.v1alpha1.Deployable_Deployment_Platform" json:"platform,omitempty"`
}

func (m *Deployable_Deployment) Reset()         { *m = Deployable_Deployment{} }
func (m *Deployable_Deployment) String() string { return proto.CompactTextString(m) }
func (*Deployable_Deployment) ProtoMessage()    {}
func (*Deployable_Deployment) Descriptor() ([]byte, []int) {
	return fileDescriptorContaineranalysis, []int{2, 0}
}

func (m *Deployable_Deployment) GetUserEmail() string {
	if m != nil {
		return m.UserEmail
	}
	return ""
}

func (m *Deployable_Deployment) GetDeployTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.DeployTime
	}
	return nil
}

func (m *Deployable_Deployment) GetUndeployTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.UndeployTime
	}
	return nil
}

func (m *Deployable_Deployment) GetConfig() string {
	if m != nil {
		return m.Config
	}
	return ""
}

func (m *Deployable_Deployment) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Deployable_Deployment) GetResourceUri() []string {
	if m != nil {
		return m.ResourceUri
	}
	return nil
}

func (m *Deployable_Deployment) GetPlatform() Deployable_Deployment_Platform {
	if m != nil {
		return m.Platform
	}
	return Deployable_Deployment_PLATFORM_UNSPECIFIED
}

// A note that indicates a type of analysis a provider would perform. This note
// exists in a provider's project. A `Discovery` occurrence is created in a
// consumer's project at the start of analysis. The occurrence's operation will
// indicate the status of the analysis. Absence of an occurrence linked to this
// note for a resource indicates that analysis hasn't started.
type Discovery struct {
	// The kind of analysis that is handled by this discovery.
	AnalysisKind Note_Kind `protobuf:"varint,1,opt,name=analysis_kind,json=analysisKind,proto3,enum=google.devtools.containeranalysis.v1alpha1.Note_Kind" json:"analysis_kind,omitempty"`
}

func (m *Discovery) Reset()                    { *m = Discovery{} }
func (m *Discovery) String() string            { return proto.CompactTextString(m) }
func (*Discovery) ProtoMessage()               {}
func (*Discovery) Descriptor() ([]byte, []int) { return fileDescriptorContaineranalysis, []int{3} }

func (m *Discovery) GetAnalysisKind() Note_Kind {
	if m != nil {
		return m.AnalysisKind
	}
	return Note_KIND_UNSPECIFIED
}

// Provides information about the scan status of a discovered resource.
type Discovery_Discovered struct {
	// Output only. An operation that indicates the status of the current scan.
	Operation *google_longrunning.Operation `protobuf:"bytes,1,opt,name=operation" json:"operation,omitempty"`
}

func (m *Discovery_Discovered) Reset()         { *m = Discovery_Discovered{} }
func (m *Discovery_Discovered) String() string { return proto.CompactTextString(m) }
func (*Discovery_Discovered) ProtoMessage()    {}
func (*Discovery_Discovered) Descriptor() ([]byte, []int) {
	return fileDescriptorContaineranalysis, []int{3, 0}
}

func (m *Discovery_Discovered) GetOperation() *google_longrunning.Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

// Note holding the version of the provider's builder and the signature of
// the provenance message in linked BuildDetails.
type BuildType struct {
	// Version of the builder which produced this Note.
	BuilderVersion string `protobuf:"bytes,1,opt,name=builder_version,json=builderVersion,proto3" json:"builder_version,omitempty"`
	// Signature of the build in Occurrences pointing to the Note containing this
	// `BuilderDetails`.
	Signature *BuildSignature `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
}

func (m *BuildType) Reset()                    { *m = BuildType{} }
func (m *BuildType) String() string            { return proto.CompactTextString(m) }
func (*BuildType) ProtoMessage()               {}
func (*BuildType) Descriptor() ([]byte, []int) { return fileDescriptorContaineranalysis, []int{4} }

func (m *BuildType) GetBuilderVersion() string {
	if m != nil {
		return m.BuilderVersion
	}
	return ""
}

func (m *BuildType) GetSignature() *BuildSignature {
	if m != nil {
		return m.Signature
	}
	return nil
}

// Message encapsulating the signature of the verified build.
type BuildSignature struct {
	// Public key of the builder which can be used to verify that the related
	// findings are valid and unchanged. If `key_type` is empty, this defaults
	// to PEM encoded public keys.
	//
	// This field may be empty if `key_id` references an external key.
	//
	// For Cloud Container Builder based signatures, this is a PEM encoded public
	// key. To verify the Cloud Container Builder signature, place the contents of
	// this field into a file (public.pem). The signature field is base64-decoded
	// into its binary representation in signature.bin, and the provenance bytes
	// from `BuildDetails` are base64-decoded into a binary representation in
	// signed.bin. OpenSSL can then verify the signature:
	// `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
	PublicKey string `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// Signature of the related `BuildProvenance`, encoded in a base64 string.
	Signature string `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// An Id for the key used to sign. This could be either an Id for the key
	// stored in `public_key` (such as the Id or fingerprint for a PGP key, or the
	// CN for a cert), or a reference to an external key (such as a reference to a
	// key in Cloud Key Management Service).
	KeyId string `protobuf:"bytes,3,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// The type of the key, either stored in `public_key` or referenced in
	// `key_id`
	KeyType BuildSignature_KeyType `protobuf:"varint,4,opt,name=key_type,json=keyType,proto3,enum=google.devtools.containeranalysis.v1alpha1.BuildSignature_KeyType" json:"key_type,omitempty"`
}

func (m *BuildSignature) Reset()                    { *m = BuildSignature{} }
func (m *BuildSignature) String() string            { return proto.CompactTextString(m) }
func (*BuildSignature) ProtoMessage()               {}
func (*BuildSignature) Descriptor() ([]byte, []int) { return fileDescriptorContaineranalysis, []int{5} }

func (m *BuildSignature) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *BuildSignature) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *BuildSignature) GetKeyId() string {
	if m != nil {
		return m.KeyId
	}
	return ""
}

func (m *BuildSignature) GetKeyType() BuildSignature_KeyType {
	if m != nil {
		return m.KeyType
	}
	return BuildSignature_KEY_TYPE_UNSPECIFIED
}

// Message encapsulating build provenance details.
type BuildDetails struct {
	// The actual provenance
	Provenance *BuildProvenance `protobuf:"bytes,1,opt,name=provenance" json:"provenance,omitempty"`
	// Serialized JSON representation of the provenance, used in generating the
	// `BuildSignature` in the corresponding Result. After verifying the
	// signature, `provenance_bytes` can be unmarshalled and compared to the
	// provenance to confirm that it is unchanged. A base64-encoded string
	// representation of the provenance bytes is used for the signature in order
	// to interoperate with openssl which expects this format for signature
	// verification.
	//
	// The serialized form is captured both to avoid ambiguity in how the
	// provenance is marshalled to json as well to prevent incompatibilities with
	// future changes.
	ProvenanceBytes string `protobuf:"bytes,2,opt,name=provenance_bytes,json=provenanceBytes,proto3" json:"provenance_bytes,omitempty"`
}

func (m *BuildDetails) Reset()                    { *m = BuildDetails{} }
func (m *BuildDetails) String() string            { return proto.CompactTextString(m) }
func (*BuildDetails) ProtoMessage()               {}
func (*BuildDetails) Descriptor() ([]byte, []int) { return fileDescriptorContaineranalysis, []int{6} }

func (m *BuildDetails) GetProvenance() *BuildProvenance {
	if m != nil {
		return m.Provenance
	}
	return nil
}

func (m *BuildDetails) GetProvenanceBytes() string {
	if m != nil {
		return m.ProvenanceBytes
	}
	return ""
}

// Request to get a Occurrence.
type GetOccurrenceRequest struct {
	// The name of the occurrence of the form
	// "projects/{project_id}/occurrences/{OCCURRENCE_ID}"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *GetOccurrenceRequest) Reset()         { *m = GetOccurrenceRequest{} }
func (m *GetOccurrenceRequest) String() string { return proto.CompactTextString(m) }
func (*GetOccurrenceRequest) ProtoMessage()    {}
func (*GetOccurrenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorContaineranalysis, []int{7}
}

func (m *GetOccurrenceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Request to list occurrences.
type ListOccurrencesRequest struct {
	// The name field contains the project Id. For example:
	// "projects/{project_id}
	// @Deprecated
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// This contains the project Id for example: projects/{project_id}.
	Parent string `protobuf:"bytes,5,opt,name=parent,proto3" json:"parent,omitempty"`
	// The filter expression.
	Filter string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	// Number of occurrences to return in the list.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token to provide to skip to a particular spot in the list.
	PageToken string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (m *ListOccurrencesRequest) Reset()         { *m = ListOccurrencesRequest{} }
func (m *ListOccurrencesRequest) String() string { return proto.CompactTextString(m) }
func (*ListOccurrencesRequest) ProtoMessage()    {}
func (*ListOccurrencesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorContaineranalysis, []int{8}
}

func (m *ListOccurrencesRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ListOccurrencesRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *ListOccurrencesRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *ListOccurrencesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListOccurrencesRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

// Response including listed active occurrences.
type ListOccurrencesResponse struct {
	// The occurrences requested.
	Occurrences []*Occurrence `protobuf:"bytes,1,rep,name=occurrences" json:"occurrences,omitempty"`
	// The next pagination token in the list response. It should be used as
	// `page_token` for the following request. An empty value means no more
	// results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (m *ListOccurrencesResponse) Reset()         { *m = ListOccurrencesResponse{} }
func (m *ListOccurrencesResponse) String() string { return proto.CompactTextString(m) }
func (*ListOccurrencesResponse) ProtoMessage()    {}
func (*ListOccurrencesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorContaineranalysis, []int{9}
}

func (m *ListOccurrencesResponse) GetOccurrences() []*Occurrence {
	if m != nil {
		return m.Occurrences
	}
	return nil
}

func (m *ListOccurrencesResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

// Request to delete a occurrence
type DeleteOccurrenceRequest struct {
	// The name of the occurrence in the form of
	// "projects/{project_id}/occurrences/{OCCURRENCE_ID}"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *DeleteOccurrenceRequest) Reset()         { *m = DeleteOccurrenceRequest{} }
func (m *DeleteOccurrenceRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteOccurrenceRequest) ProtoMessage()    {}
func (*DeleteOccurrenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorContaineranalysis, []int{10}
}

func (m *DeleteOccurrenceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Request to insert a new occurrence.
type CreateOccurrenceRequest struct {
	// The name of the project.  Should be of the form "projects/{project_id}".
	// @Deprecated
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// This field contains the project Id for example: "projects/{project_id}"
	Parent string `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`
	// The occurrence to be inserted
	Occurrence *Occurrence `protobuf:"bytes,2,opt,name=occurrence" json:"occurrence,omitempty"`
}

func (m *CreateOccurrenceRequest) Reset()         { *m = CreateOccurrenceRequest{} }
func (m *CreateOccurrenceRequest) String() string { return proto.CompactTextString(m) }
func (*CreateOccurrenceRequest) ProtoMessage()    {}
func (*CreateOccurrenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorContaineranalysis, []int{11}
}

func (m *CreateOccurrenceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateOccurrenceRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *CreateOccurrenceRequest) GetOccurrence() *Occurrence {
	if m != nil {
		return m.Occurrence
	}
	return nil
}

// Request to update an existing occurrence
type UpdateOccurrenceRequest struct {
	// The name of the occurrence.
	// Should be of the form "projects/{project_id}/occurrences/{OCCURRENCE_ID}".
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The updated occurrence.
	Occurrence *Occurrence `protobuf:"bytes,2,opt,name=occurrence" json:"occurrence,omitempty"`
	// The fields to update.
	UpdateMask *google_protobuf4.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask" json:"update_mask,omitempty"`
}

func (m *UpdateOccurrenceRequest) Reset()         { *m = UpdateOccurrenceRequest{} }
func (m *UpdateOccurrenceRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateOccurrenceRequest) ProtoMessage()    {}
func (*UpdateOccurrenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorContaineranalysis, []int{12}
}

func (m *UpdateOccurrenceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateOccurrenceRequest) GetOccurrence() *Occurrence {
	if m != nil {
		return m.Occurrence
	}
	return nil
}

func (m *UpdateOccurrenceRequest) GetUpdateMask() *google_protobuf4.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

// Request to get a Note.
type GetNoteRequest struct {
	// The name of the note in the form of
	// "providers/{provider_id}/notes/{NOTE_ID}"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *GetNoteRequest) Reset()                    { *m = GetNoteRequest{} }
func (m *GetNoteRequest) String() string            { return proto.CompactTextString(m) }
func (*GetNoteRequest) ProtoMessage()               {}
func (*GetNoteRequest) Descriptor() ([]byte, []int) { return fileDescriptorContaineranalysis, []int{13} }

func (m *GetNoteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Request to get the note to which this occurrence is attached.
type GetOccurrenceNoteRequest struct {
	// The name of the occurrence in the form
	// "projects/{project_id}/occurrences/{OCCURRENCE_ID}"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *GetOccurrenceNoteRequest) Reset()         { *m = GetOccurrenceNoteRequest{} }
func (m *GetOccurrenceNoteRequest) String() string { return proto.CompactTextString(m) }
func (*GetOccurrenceNoteRequest) ProtoMessage()    {}
func (*GetOccurrenceNoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorContaineranalysis, []int{14}
}

func (m *GetOccurrenceNoteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Request to list notes.
type ListNotesRequest struct {
	// The name field will contain the project Id for example:
	// "providers/{provider_id}
	// @Deprecated
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// This field contains the project Id for example:
	// "project/{project_id}
	Parent string `protobuf:"bytes,5,opt,name=parent,proto3" json:"parent,omitempty"`
	// The filter expression.
	Filter string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	// Number of notes to return in the list.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token to provide to skip to a particular spot in the list.
	PageToken string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (m *ListNotesRequest) Reset()         { *m = ListNotesRequest{} }
func (m *ListNotesRequest) String() string { return proto.CompactTextString(m) }
func (*ListNotesRequest) ProtoMessage()    {}
func (*ListNotesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorContaineranalysis, []int{15}
}

func (m *ListNotesRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ListNotesRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *ListNotesRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *ListNotesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListNotesRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

// Response including listed notes.
type ListNotesResponse struct {
	// The occurrences requested
	Notes []*Note `protobuf:"bytes,1,rep,name=notes" json:"notes,omitempty"`
	// The next pagination token in the list response. It should be used as
	// page_token for the following request. An empty value means no more result.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (m *ListNotesResponse) Reset()         { *m = ListNotesResponse{} }
func (m *ListNotesResponse) String() string { return proto.CompactTextString(m) }
func (*ListNotesResponse) ProtoMessage()    {}
func (*ListNotesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorContaineranalysis, []int{16}
}

func (m *ListNotesResponse) GetNotes() []*Note {
	if m != nil {
		return m.Notes
	}
	return nil
}

func (m *ListNotesResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

// Request to delete a note
type DeleteNoteRequest struct {
	// The name of the note in the form of
	// "providers/{provider_id}/notes/{NOTE_ID}"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *DeleteNoteRequest) Reset()         { *m = DeleteNoteRequest{} }
func (m *DeleteNoteRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteNoteRequest) ProtoMessage()    {}
func (*DeleteNoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorContaineranalysis, []int{17}
}

func (m *DeleteNoteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Request to insert a new note
type CreateNoteRequest struct {
	// The name of the project.
	// Should be of the form "providers/{provider_id}".
	// @Deprecated
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// This field contains the project Id for example:
	// "project/{project_id}
	Parent string `protobuf:"bytes,4,opt,name=parent,proto3" json:"parent,omitempty"`
	// The ID to use for this note.
	NoteId string `protobuf:"bytes,2,opt,name=note_id,json=noteId,proto3" json:"note_id,omitempty"`
	// The Note to be inserted
	Note *Note `protobuf:"bytes,3,opt,name=note" json:"note,omitempty"`
}

func (m *CreateNoteRequest) Reset()         { *m = CreateNoteRequest{} }
func (m *CreateNoteRequest) String() string { return proto.CompactTextString(m) }
func (*CreateNoteRequest) ProtoMessage()    {}
func (*CreateNoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorContaineranalysis, []int{18}
}

func (m *CreateNoteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateNoteRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *CreateNoteRequest) GetNoteId() string {
	if m != nil {
		return m.NoteId
	}
	return ""
}

func (m *CreateNoteRequest) GetNote() *Note {
	if m != nil {
		return m.Note
	}
	return nil
}

// Request to update an existing note
type UpdateNoteRequest struct {
	// The name of the note.
	// Should be of the form "projects/{provider_id}/notes/{note_id}".
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The updated note.
	Note *Note `protobuf:"bytes,2,opt,name=note" json:"note,omitempty"`
	// The fields to update.
	UpdateMask *google_protobuf4.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask" json:"update_mask,omitempty"`
}

func (m *UpdateNoteRequest) Reset()         { *m = UpdateNoteRequest{} }
func (m *UpdateNoteRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateNoteRequest) ProtoMessage()    {}
func (*UpdateNoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorContaineranalysis, []int{19}
}

func (m *UpdateNoteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateNoteRequest) GetNote() *Note {
	if m != nil {
		return m.Note
	}
	return nil
}

func (m *UpdateNoteRequest) GetUpdateMask() *google_protobuf4.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

// Request to list occurrences.
type ListNoteOccurrencesRequest struct {
	// The name field will contain the note name for example:
	//   "provider/{provider_id}/notes/{note_id}"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The filter expression.
	Filter string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	// Number of notes to return in the list.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token to provide to skip to a particular spot in the list.
	PageToken string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (m *ListNoteOccurrencesRequest) Reset()         { *m = ListNoteOccurrencesRequest{} }
func (m *ListNoteOccurrencesRequest) String() string { return proto.CompactTextString(m) }
func (*ListNoteOccurrencesRequest) ProtoMessage()    {}
func (*ListNoteOccurrencesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorContaineranalysis, []int{20}
}

func (m *ListNoteOccurrencesRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ListNoteOccurrencesRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *ListNoteOccurrencesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListNoteOccurrencesRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

// Response including listed occurrences for a note.
type ListNoteOccurrencesResponse struct {
	// The occurrences attached to the specified note.
	Occurrences []*Occurrence `protobuf:"bytes,1,rep,name=occurrences" json:"occurrences,omitempty"`
	// Token to receive the next page of notes.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (m *ListNoteOccurrencesResponse) Reset()         { *m = ListNoteOccurrencesResponse{} }
func (m *ListNoteOccurrencesResponse) String() string { return proto.CompactTextString(m) }
func (*ListNoteOccurrencesResponse) ProtoMessage()    {}
func (*ListNoteOccurrencesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorContaineranalysis, []int{21}
}

func (m *ListNoteOccurrencesResponse) GetOccurrences() []*Occurrence {
	if m != nil {
		return m.Occurrences
	}
	return nil
}

func (m *ListNoteOccurrencesResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

// Metadata for all operations used and required for all operations
// that created by Container Analysis Providers
type OperationMetadata struct {
	// Output only. The time this operation was created.
	CreateTime *google_protobuf1.Timestamp `protobuf:"bytes,1,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	// Output only. The time that this operation was marked completed or failed.
	EndTime *google_protobuf1.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
}

func (m *OperationMetadata) Reset()         { *m = OperationMetadata{} }
func (m *OperationMetadata) String() string { return proto.CompactTextString(m) }
func (*OperationMetadata) ProtoMessage()    {}
func (*OperationMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptorContaineranalysis, []int{22}
}

func (m *OperationMetadata) GetCreateTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *OperationMetadata) GetEndTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

// Request to get the vulnz summary for some set of vulnerability Occurrences.
type GetVulnzOccurrencesSummaryRequest struct {
	// This contains the project Id for example: projects/{project_id}
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The filter expression.
	Filter string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (m *GetVulnzOccurrencesSummaryRequest) Reset()         { *m = GetVulnzOccurrencesSummaryRequest{} }
func (m *GetVulnzOccurrencesSummaryRequest) String() string { return proto.CompactTextString(m) }
func (*GetVulnzOccurrencesSummaryRequest) ProtoMessage()    {}
func (*GetVulnzOccurrencesSummaryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorContaineranalysis, []int{23}
}

func (m *GetVulnzOccurrencesSummaryRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *GetVulnzOccurrencesSummaryRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

// A summary of how many vulnz occurrences there are per severity type.
// counts by groups, or if we should have different summary messages
// like this.
type GetVulnzOccurrencesSummaryResponse struct {
	// A map of how many occurrences were found for each severity.
	Counts []*GetVulnzOccurrencesSummaryResponse_SeverityCount `protobuf:"bytes,1,rep,name=counts" json:"counts,omitempty"`
}

func (m *GetVulnzOccurrencesSummaryResponse) Reset()         { *m = GetVulnzOccurrencesSummaryResponse{} }
func (m *GetVulnzOccurrencesSummaryResponse) String() string { return proto.CompactTextString(m) }
func (*GetVulnzOccurrencesSummaryResponse) ProtoMessage()    {}
func (*GetVulnzOccurrencesSummaryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorContaineranalysis, []int{24}
}

func (m *GetVulnzOccurrencesSummaryResponse) GetCounts() []*GetVulnzOccurrencesSummaryResponse_SeverityCount {
	if m != nil {
		return m.Counts
	}
	return nil
}

// The number of occurrences created for a specific severity.
type GetVulnzOccurrencesSummaryResponse_SeverityCount struct {
	// The severity of the occurrences.
	Severity VulnerabilityType_Severity `protobuf:"varint,1,opt,name=severity,proto3,enum=google.devtools.containeranalysis.v1alpha1.VulnerabilityType_Severity" json:"severity,omitempty"`
	// The number of occurrences with the severity.
	Count int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *GetVulnzOccurrencesSummaryResponse_SeverityCount) Reset() {
	*m = GetVulnzOccurrencesSummaryResponse_SeverityCount{}
}
func (m *GetVulnzOccurrencesSummaryResponse_SeverityCount) String() string {
	return proto.CompactTextString(m)
}
func (*GetVulnzOccurrencesSummaryResponse_SeverityCount) ProtoMessage() {}
func (*GetVulnzOccurrencesSummaryResponse_SeverityCount) Descriptor() ([]byte, []int) {
	return fileDescriptorContaineranalysis, []int{24, 0}
}

func (m *GetVulnzOccurrencesSummaryResponse_SeverityCount) GetSeverity() VulnerabilityType_Severity {
	if m != nil {
		return m.Severity
	}
	return VulnerabilityType_SEVERITY_UNSPECIFIED
}

func (m *GetVulnzOccurrencesSummaryResponse_SeverityCount) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*Occurrence)(nil), "google.devtools.containeranalysis.v1alpha1.Occurrence")
	proto.RegisterType((*Note)(nil), "google.devtools.containeranalysis.v1alpha1.Note")
	proto.RegisterType((*Note_RelatedUrl)(nil), "google.devtools.containeranalysis.v1alpha1.Note.RelatedUrl")
	proto.RegisterType((*Deployable)(nil), "google.devtools.containeranalysis.v1alpha1.Deployable")
	proto.RegisterType((*Deployable_Deployment)(nil), "google.devtools.containeranalysis.v1alpha1.Deployable.Deployment")
	proto.RegisterType((*Discovery)(nil), "google.devtools.containeranalysis.v1alpha1.Discovery")
	proto.RegisterType((*Discovery_Discovered)(nil), "google.devtools.containeranalysis.v1alpha1.Discovery.Discovered")
	proto.RegisterType((*BuildType)(nil), "google.devtools.containeranalysis.v1alpha1.BuildType")
	proto.RegisterType((*BuildSignature)(nil), "google.devtools.containeranalysis.v1alpha1.BuildSignature")
	proto.RegisterType((*BuildDetails)(nil), "google.devtools.containeranalysis.v1alpha1.BuildDetails")
	proto.RegisterType((*GetOccurrenceRequest)(nil), "google.devtools.containeranalysis.v1alpha1.GetOccurrenceRequest")
	proto.RegisterType((*ListOccurrencesRequest)(nil), "google.devtools.containeranalysis.v1alpha1.ListOccurrencesRequest")
	proto.RegisterType((*ListOccurrencesResponse)(nil), "google.devtools.containeranalysis.v1alpha1.ListOccurrencesResponse")
	proto.RegisterType((*DeleteOccurrenceRequest)(nil), "google.devtools.containeranalysis.v1alpha1.DeleteOccurrenceRequest")
	proto.RegisterType((*CreateOccurrenceRequest)(nil), "google.devtools.containeranalysis.v1alpha1.CreateOccurrenceRequest")
	proto.RegisterType((*UpdateOccurrenceRequest)(nil), "google.devtools.containeranalysis.v1alpha1.UpdateOccurrenceRequest")
	proto.RegisterType((*GetNoteRequest)(nil), "google.devtools.containeranalysis.v1alpha1.GetNoteRequest")
	proto.RegisterType((*GetOccurrenceNoteRequest)(nil), "google.devtools.containeranalysis.v1alpha1.GetOccurrenceNoteRequest")
	proto.RegisterType((*ListNotesRequest)(nil), "google.devtools.containeranalysis.v1alpha1.ListNotesRequest")
	proto.RegisterType((*ListNotesResponse)(nil), "google.devtools.containeranalysis.v1alpha1.ListNotesResponse")
	proto.RegisterType((*DeleteNoteRequest)(nil), "google.devtools.containeranalysis.v1alpha1.DeleteNoteRequest")
	proto.RegisterType((*CreateNoteRequest)(nil), "google.devtools.containeranalysis.v1alpha1.CreateNoteRequest")
	proto.RegisterType((*UpdateNoteRequest)(nil), "google.devtools.containeranalysis.v1alpha1.UpdateNoteRequest")
	proto.RegisterType((*ListNoteOccurrencesRequest)(nil), "google.devtools.containeranalysis.v1alpha1.ListNoteOccurrencesRequest")
	proto.RegisterType((*ListNoteOccurrencesResponse)(nil), "google.devtools.containeranalysis.v1alpha1.ListNoteOccurrencesResponse")
	proto.RegisterType((*OperationMetadata)(nil), "google.devtools.containeranalysis.v1alpha1.OperationMetadata")
	proto.RegisterType((*GetVulnzOccurrencesSummaryRequest)(nil), "google.devtools.containeranalysis.v1alpha1.GetVulnzOccurrencesSummaryRequest")
	proto.RegisterType((*GetVulnzOccurrencesSummaryResponse)(nil), "google.devtools.containeranalysis.v1alpha1.GetVulnzOccurrencesSummaryResponse")
	proto.RegisterType((*GetVulnzOccurrencesSummaryResponse_SeverityCount)(nil), "google.devtools.containeranalysis.v1alpha1.GetVulnzOccurrencesSummaryResponse.SeverityCount")
	proto.RegisterEnum("google.devtools.containeranalysis.v1alpha1.Note_Kind", Note_Kind_name, Note_Kind_value)
	proto.RegisterEnum("google.devtools.containeranalysis.v1alpha1.Deployable_Deployment_Platform", Deployable_Deployment_Platform_name, Deployable_Deployment_Platform_value)
	proto.RegisterEnum("google.devtools.containeranalysis.v1alpha1.BuildSignature_KeyType", BuildSignature_KeyType_name, BuildSignature_KeyType_value)
}

func init() {
	proto.RegisterFile("google/devtools/containeranalysis/v1alpha1/containeranalysis.proto", fileDescriptorContaineranalysis)
}

var fileDescriptorContaineranalysis = []byte{
	// 2402 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5a, 0xdd, 0x6f, 0x23, 0x57,
	0x15, 0xdf, 0x1b, 0x27, 0x71, 0x7c, 0x9c, 0x0f, 0xfb, 0x76, 0x77, 0xe3, 0x7a, 0x5b, 0x48, 0xa7,
	0x94, 0xee, 0x66, 0xc1, 0x26, 0xa1, 0x4b, 0x21, 0xdb, 0xd5, 0xd6, 0x5f, 0xf1, 0x9a, 0x7c, 0x59,
	0xe3, 0x24, 0xda, 0x85, 0xd2, 0xd1, 0xb5, 0xe7, 0x26, 0x1d, 0x32, 0x9e, 0x31, 0x33, 0x63, 0xab,
	0x5e, 0xd4, 0x17, 0x40, 0x42, 0x45, 0xe2, 0x43, 0x20, 0x21, 0x24, 0x04, 0x48, 0x15, 0x42, 0x02,
	0x5e, 0x2a, 0x24, 0xde, 0x78, 0x42, 0xbc, 0xc2, 0x0b, 0xcf, 0xa8, 0x2f, 0x3c, 0xf0, 0xc6, 0xbf,
	0x50, 0xdd, 0x3b, 0xf7, 0xda, 0xe3, 0x8f, 0x24, 0x9e, 0x78, 0x2b, 0xf5, 0xa9, 0xbe, 0xe7, 0x9e,
	0xfb, 0x3b, 0xe7, 0x9e, 0x7b, 0x3e, 0x7e, 0x93, 0x2e, 0xe4, 0x4f, 0x6d, 0xfb, 0xd4, 0xa4, 0x59,
	0x9d, 0x76, 0x3c, 0xdb, 0x36, 0xdd, 0x6c, 0xc3, 0xb6, 0x3c, 0x62, 0x58, 0xd4, 0x21, 0x16, 0x31,
	0xbb, 0xae, 0xe1, 0x66, 0x3b, 0x1b, 0xc4, 0x6c, 0xbd, 0x43, 0x36, 0x46, 0xb7, 0x32, 0x2d, 0xc7,
	0xf6, 0x6c, 0xbc, 0xee, 0x63, 0x64, 0x24, 0x46, 0x66, 0x54, 0x51, 0x62, 0xa4, 0x5f, 0x10, 0xf6,
	0x48, 0xcb, 0xc8, 0x12, 0xcb, 0xb2, 0x3d, 0xe2, 0x19, 0xb6, 0x25, 0x90, 0xd2, 0x61, 0xbc, 0xa9,
	0x1b, 0xa6, 0xa9, 0xd9, 0x27, 0x5a, 0x93, 0x78, 0xd4, 0x31, 0x88, 0x29, 0x31, 0xde, 0x08, 0x81,
	0x61, 0x34, 0xc9, 0x29, 0xd5, 0xea, 0xa4, 0x77, 0x97, 0xf4, 0x76, 0x88, 0xd3, 0x2d, 0xd2, 0x38,
	0x63, 0xe7, 0x3b, 0x6d, 0x93, 0xed, 0xd7, 0x0d, 0xd3, 0xf0, 0xba, 0x02, 0xe7, 0x7e, 0x18, 0x1c,
	0xc7, 0xee, 0x50, 0x8b, 0x58, 0x0d, 0x2a, 0x0e, 0x7f, 0x46, 0x1c, 0x36, 0x48, 0x33, 0xdb, 0xd9,
	0x60, 0xff, 0xd1, 0x5a, 0xb6, 0x69, 0x34, 0x24, 0x78, 0x7a, 0x70, 0x7f, 0x60, 0xef, 0x65, 0xb1,
	0x67, 0xda, 0xd6, 0xa9, 0xd3, 0xb6, 0x2c, 0xc3, 0x3a, 0xcd, 0xda, 0x2d, 0xea, 0x0c, 0xc4, 0xf9,
	0x79, 0xa1, 0xc4, 0x57, 0xf5, 0xf6, 0x49, 0x96, 0x58, 0xf2, 0xfc, 0xad, 0xe1, 0x2d, 0xda, 0x6c,
	0xf5, 0x6e, 0xb5, 0x36, 0xbc, 0x79, 0x62, 0x50, 0x53, 0xd7, 0x9a, 0xc4, 0x3d, 0x13, 0x1a, 0x9f,
	0x1d, 0xd6, 0xf0, 0x8c, 0x26, 0x75, 0x3d, 0xd2, 0x6c, 0xf9, 0x0a, 0xca, 0x47, 0x51, 0x80, 0x83,
	0x46, 0xa3, 0xed, 0x38, 0xd4, 0x6a, 0x50, 0x8c, 0x61, 0xd6, 0x22, 0x4d, 0x9a, 0x42, 0x6b, 0xe8,
	0x76, 0x4c, 0xe5, 0xbf, 0xf1, 0x4b, 0xb0, 0xe8, 0x50, 0xd7, 0x6e, 0x3b, 0x0d, 0xaa, 0xb5, 0x1d,
	0x33, 0x35, 0xc3, 0xf7, 0xe2, 0x52, 0x76, 0xe4, 0x98, 0xf8, 0x16, 0xc4, 0x2c, 0xdb, 0xa3, 0x1a,
	0x3f, 0x1b, 0xe1, 0xfb, 0x0b, 0x4c, 0xb0, 0xcf, 0xce, 0x57, 0x60, 0xf6, 0xcc, 0xb0, 0xf4, 0xd4,
	0xfc, 0x1a, 0xba, 0xbd, 0xbc, 0x79, 0x2f, 0x33, 0x79, 0x7a, 0x66, 0xf6, 0x6d, 0x8f, 0x66, 0x76,
	0x0c, 0x4b, 0x57, 0x39, 0x04, 0x7e, 0x1f, 0xc1, 0x8d, 0x81, 0xe7, 0xd5, 0x74, 0xea, 0x11, 0xc3,
	0x74, 0x53, 0x0b, 0x6b, 0xe8, 0x76, 0x7c, 0x53, 0x0d, 0x03, 0x7e, 0x1c, 0x04, 0x3a, 0xec, 0xb6,
	0xe8, 0xa0, 0xa4, 0xe8, 0x23, 0x3f, 0xba, 0xa6, 0x5e, 0xef, 0x8c, 0x91, 0x63, 0x0d, 0x96, 0xea,
	0x6d, 0xc3, 0xd4, 0x7b, 0x2e, 0x44, 0xb9, 0x0b, 0x5f, 0x0d, 0xe3, 0x42, 0x9e, 0x01, 0xf4, 0x0d,
	0x2d, 0xd6, 0x03, 0x6b, 0x7c, 0x02, 0x4b, 0x3a, 0x75, 0x8c, 0x0e, 0xd5, 0x35, 0x5e, 0x18, 0xa9,
	0x38, 0x37, 0xf0, 0x30, 0x8c, 0x81, 0xa2, 0xdd, 0x38, 0xa3, 0x4e, 0x85, 0x1d, 0xcf, 0x14, 0x7d,
	0x30, 0x66, 0x47, 0xe0, 0x72, 0x39, 0x6e, 0xc2, 0xa2, 0x61, 0xb9, 0x1e, 0x31, 0x4d, 0x9e, 0x94,
	0xa9, 0x45, 0x6e, 0xa6, 0x1c, 0xc6, 0x4c, 0xd5, 0x2f, 0xbd, 0x3d, 0x62, 0x91, 0x53, 0xea, 0x64,
	0x2a, 0x01, 0x38, 0x66, 0x2e, 0x08, 0x8f, 0x1b, 0x00, 0x3a, 0x6d, 0x99, 0x76, 0xb7, 0x49, 0x2d,
	0x2f, 0xb5, 0xcc, 0x8d, 0xe5, 0x42, 0xdd, 0x89, 0x9f, 0x26, 0x75, 0x93, 0x8a, 0x9f, 0x0c, 0xe8,
	0xd1, 0x35, 0x35, 0x00, 0x8b, 0xeb, 0x00, 0xba, 0xe1, 0x36, 0xec, 0x0e, 0x75, 0xa8, 0x9e, 0x5a,
	0xe1, 0x46, 0xde, 0x0c, 0x65, 0x44, 0x9c, 0xee, 0xf6, 0x7e, 0xf1, 0xc8, 0x05, 0x50, 0xf1, 0x1a,
	0xc4, 0x1d, 0xda, 0xa4, 0xba, 0xe1, 0x87, 0x6d, 0x4e, 0x96, 0x45, 0x4f, 0x84, 0xef, 0x43, 0xbc,
	0xe1, 0x50, 0xe2, 0x51, 0x8d, 0x95, 0x5d, 0x2a, 0xc6, 0xdd, 0x48, 0x4b, 0x37, 0x64, 0x4d, 0x66,
	0x0e, 0x65, 0x4d, 0xaa, 0xe0, 0xab, 0x33, 0x01, 0x3b, 0xdc, 0x6e, 0xe9, 0xbd, 0xc3, 0x70, 0xf9,
	0x61, 0x5f, 0x9d, 0x09, 0xf2, 0x31, 0x88, 0x8a, 0xb4, 0x54, 0xfe, 0x17, 0x83, 0x59, 0x56, 0x47,
	0x63, 0x6b, 0xfb, 0x2e, 0x24, 0xdd, 0x77, 0x6c, 0xc7, 0xd3, 0x74, 0xea, 0x36, 0x1c, 0xa3, 0xc5,
	0x6f, 0xe2, 0x17, 0x70, 0x82, 0x6f, 0x14, 0xfb, 0x72, 0x7c, 0x07, 0x12, 0xac, 0x8d, 0x0d, 0xe8,
	0xce, 0x72, 0xdd, 0x15, 0x26, 0x0f, 0xaa, 0xca, 0x9a, 0x8f, 0x4d, 0x5f, 0xf3, 0x16, 0xe0, 0xc1,
	0x92, 0xf7, 0xba, 0x2d, 0xca, 0x9b, 0x49, 0x7c, 0xf3, 0xc1, 0x54, 0xf5, 0xfe, 0xe8, 0x9a, 0x9a,
	0xec, 0x0c, 0x0b, 0xf1, 0x31, 0x80, 0x5f, 0xd7, 0xdc, 0x8e, 0xdf, 0x57, 0xee, 0x85, 0x2e, 0x6a,
	0x81, 0x1f, 0xab, 0xcb, 0x05, 0x7e, 0x1b, 0xa0, 0x4e, 0x5c, 0x2a, 0x6a, 0x79, 0x29, 0xbc, 0xff,
	0xc1, 0x5a, 0xce, 0xb3, 0x19, 0xc9, 0xf1, 0x89, 0x4b, 0xfd, 0x32, 0x7e, 0x1b, 0xa2, 0x62, 0x02,
	0x8a, 0xa2, 0xca, 0x4f, 0x51, 0xc1, 0x62, 0xf9, 0xe8, 0x9a, 0x2a, 0x41, 0xf1, 0x63, 0x59, 0xb7,
	0xac, 0xf2, 0x52, 0x49, 0x6e, 0xe2, 0x2b, 0x57, 0xab, 0xdb, 0x7e, 0xb1, 0xb2, 0x15, 0x3e, 0x82,
	0x98, 0x2c, 0xab, 0x6e, 0x0a, 0x87, 0x0f, 0x78, 0xaf, 0x56, 0x59, 0x40, 0x7a, 0x48, 0xf8, 0x2d,
	0x56, 0x9f, 0x26, 0xf1, 0xa8, 0xce, 0xc7, 0x56, 0x74, 0x2d, 0x72, 0x3b, 0xbe, 0x79, 0x3f, 0x74,
	0x2a, 0xaa, 0x3e, 0xc6, 0x91, 0x63, 0xaa, 0xe0, 0xf4, 0x7e, 0xe3, 0x02, 0xac, 0xd0, 0x77, 0x5b,
	0x86, 0x3f, 0xc8, 0x27, 0x2d, 0xd1, 0xe5, 0xfe, 0x11, 0x59, 0xe3, 0xc1, 0x06, 0x11, 0x9f, 0xa6,
	0x41, 0x2c, 0x86, 0x69, 0x10, 0xe9, 0xd7, 0x00, 0xfa, 0x17, 0xc3, 0x09, 0x88, 0xb0, 0x10, 0xf9,
	0x9d, 0x81, 0xfd, 0xc4, 0xd7, 0x61, 0xce, 0x24, 0x75, 0x2a, 0xa7, 0xbd, 0xbf, 0x50, 0x7e, 0x8a,
	0x60, 0x96, 0x95, 0x26, 0xbe, 0x0e, 0x89, 0x9d, 0xca, 0x7e, 0x51, 0x3b, 0xda, 0xaf, 0x55, 0x4b,
	0x85, 0xca, 0x76, 0xa5, 0x54, 0x4c, 0x5c, 0xc3, 0xcf, 0xc3, 0x8d, 0x6a, 0xae, 0xb0, 0x93, 0x2b,
	0x97, 0xb4, 0xe3, 0xa3, 0xdd, 0xfd, 0x92, 0x9a, 0xcb, 0x57, 0x76, 0x2b, 0x87, 0x4f, 0x12, 0x33,
	0x38, 0x09, 0x4b, 0xf9, 0xa3, 0xca, 0x6e, 0x51, 0x2b, 0x96, 0x0e, 0x73, 0x95, 0xdd, 0x5a, 0x22,
	0x82, 0x57, 0x20, 0x5e, 0xd9, 0x63, 0xba, 0xf9, 0x5c, 0xad, 0x52, 0x4b, 0xcc, 0xe2, 0xe7, 0x60,
	0x45, 0x1e, 0xdf, 0xcb, 0xed, 0xe7, 0xca, 0x25, 0x35, 0x31, 0x87, 0x97, 0x01, 0x8a, 0xa5, 0xea,
	0xee, 0xc1, 0x93, 0x5c, 0x7e, 0xb7, 0x94, 0x98, 0xc7, 0x4b, 0x10, 0x2b, 0x56, 0x6a, 0x85, 0x83,
	0xe3, 0x92, 0xfa, 0x24, 0x11, 0xcd, 0xc7, 0x05, 0xf3, 0x60, 0xc5, 0xaa, 0xfc, 0x27, 0x02, 0xd0,
	0xcf, 0xb2, 0x21, 0xe2, 0x62, 0xa4, 0xd0, 0x5a, 0x64, 0x90, 0xb8, 0x18, 0xe9, 0x3f, 0xf7, 0x4e,
	0xf0, 0xb1, 0xf1, 0x22, 0x40, 0xdb, 0xa5, 0x8e, 0x46, 0x9b, 0xc4, 0x90, 0xe1, 0x88, 0x31, 0x49,
	0x89, 0x09, 0x58, 0xc4, 0xfd, 0xb4, 0xf5, 0x23, 0x3e, 0x73, 0x79, 0xc4, 0x7d, 0x75, 0xfe, 0x5c,
	0x0f, 0x61, 0xa9, 0x6d, 0x05, 0x8f, 0x47, 0x2e, 0x3d, 0xbe, 0x28, 0x0f, 0x70, 0x80, 0x9b, 0x30,
	0xdf, 0xb0, 0xad, 0x13, 0xe3, 0x94, 0x37, 0xa5, 0x98, 0x2a, 0x56, 0x38, 0x05, 0x51, 0xa2, 0xeb,
	0x0e, 0x75, 0x5d, 0x31, 0x83, 0xe4, 0x72, 0x24, 0x00, 0xf3, 0x23, 0x01, 0xc0, 0x27, 0xb0, 0xd0,
	0x32, 0x89, 0x77, 0x62, 0x3b, 0x4d, 0x4e, 0x60, 0x96, 0x37, 0xbf, 0x3e, 0xf5, 0x2c, 0xce, 0x54,
	0x05, 0xa2, 0xda, 0xc3, 0x56, 0x0a, 0xb0, 0x20, 0xa5, 0x38, 0x05, 0xd7, 0xab, 0xbb, 0xb9, 0xc3,
	0xed, 0x03, 0x75, 0x6f, 0x28, 0x81, 0xa2, 0x10, 0x29, 0xef, 0x94, 0x12, 0x08, 0x2f, 0xc0, 0xec,
	0xf6, 0x6e, 0xe9, 0x71, 0x62, 0x06, 0x03, 0xcc, 0x17, 0x8e, 0x6a, 0x87, 0x07, 0x7b, 0x89, 0x88,
	0xf2, 0x17, 0x04, 0xb1, 0x5e, 0xb1, 0xe3, 0x6f, 0xc0, 0x92, 0x74, 0x48, 0xe3, 0xc3, 0x06, 0x4d,
	0x33, 0x6c, 0x16, 0xe5, 0x26, 0x5b, 0xa5, 0x2b, 0x00, 0xfd, 0xb9, 0x8f, 0xef, 0x43, 0xac, 0xc7,
	0xd9, 0xb9, 0x95, 0xf8, 0xe6, 0x8b, 0xd2, 0x4a, 0x80, 0xd8, 0x67, 0x0e, 0xa4, 0x92, 0xda, 0xd7,
	0x57, 0x7e, 0x82, 0x20, 0xd6, 0x1b, 0x09, 0xf8, 0x55, 0x58, 0xe1, 0x23, 0x81, 0x3a, 0x5a, 0x87,
	0x3a, 0xae, 0x04, 0x8c, 0xa9, 0xcb, 0x42, 0x7c, 0xec, 0x4b, 0xf1, 0x63, 0x88, 0xb9, 0xc6, 0xa9,
	0x45, 0xbc, 0xb6, 0x23, 0x33, 0x6d, 0x2b, 0xf4, 0x14, 0xaa, 0x49, 0x04, 0xb5, 0x0f, 0xa6, 0xfc,
	0x78, 0x06, 0x96, 0x07, 0x77, 0x59, 0xde, 0xb7, 0xda, 0x75, 0xd3, 0x68, 0x68, 0x67, 0xb4, 0x2b,
	0xf3, 0xde, 0x97, 0xec, 0xd0, 0x2e, 0x7e, 0x61, 0xd8, 0x97, 0x58, 0x00, 0x0f, 0xdf, 0x80, 0xf9,
	0x33, 0xda, 0xd5, 0x0c, 0x5d, 0x10, 0x87, 0xb9, 0x33, 0xda, 0xad, 0xe8, 0xf8, 0x5b, 0xb0, 0xc0,
	0xc4, 0x7c, 0x8a, 0xce, 0xf2, 0x97, 0xc9, 0x5f, 0xdd, 0xff, 0xcc, 0x0e, 0xe5, 0xd3, 0x59, 0x8d,
	0x9e, 0xf9, 0x3f, 0x94, 0x47, 0x10, 0x15, 0x32, 0x96, 0x4f, 0x3b, 0xa5, 0x27, 0xda, 0xe1, 0x93,
	0x6a, 0x69, 0x28, 0x9f, 0x6e, 0x40, 0xb2, 0x5a, 0xae, 0x6a, 0xb9, 0x5a, 0xa1, 0x52, 0xd1, 0x72,
	0xea, 0xde, 0x81, 0x5a, 0x2a, 0x26, 0x10, 0x5e, 0x84, 0x85, 0xea, 0x4e, 0xe5, 0xb1, 0x56, 0x2d,
	0xed, 0x25, 0x66, 0x94, 0x5f, 0x22, 0x58, 0x0c, 0x12, 0x71, 0xfc, 0x4d, 0x80, 0xfe, 0x37, 0xa0,
	0x78, 0xef, 0xfb, 0xa1, 0x7d, 0xaf, 0xf6, 0x20, 0xd4, 0x00, 0x1c, 0x23, 0x51, 0xfd, 0x95, 0x56,
	0xef, 0x7a, 0xd4, 0x15, 0x21, 0x5d, 0xe9, 0xcb, 0xf3, 0x4c, 0xac, 0xac, 0xc3, 0xf5, 0x32, 0xf5,
	0xfa, 0x5f, 0x67, 0x2a, 0xfd, 0x4e, 0x9b, 0xba, 0xde, 0x38, 0x22, 0xa7, 0xfc, 0x0a, 0xc1, 0xcd,
	0x5d, 0xc3, 0x0d, 0x68, 0xbb, 0x17, 0xa8, 0xb3, 0x5e, 0xd2, 0x22, 0x0e, 0x23, 0xe0, 0x7e, 0xcb,
	0x10, 0x2b, 0x26, 0x3f, 0x31, 0x4c, 0x8f, 0x3a, 0xc2, 0x27, 0xb1, 0x62, 0x1f, 0x78, 0x2d, 0xf6,
	0x6d, 0xed, 0x1a, 0x4f, 0xfd, 0xc6, 0x35, 0xa7, 0x2e, 0x30, 0x41, 0xcd, 0x78, 0xea, 0x67, 0x0f,
	0xdb, 0xf4, 0xec, 0x33, 0x2a, 0x19, 0x21, 0x57, 0x3f, 0x64, 0x02, 0xe5, 0xd7, 0x08, 0x56, 0x47,
	0x5c, 0x73, 0x5b, 0xb6, 0xe5, 0x32, 0x52, 0x11, 0xb7, 0xfb, 0x62, 0xde, 0xa1, 0x43, 0xb2, 0x8a,
	0x40, 0x78, 0x82, 0x50, 0xf8, 0xf3, 0xb0, 0x62, 0xd1, 0x77, 0x3d, 0x2d, 0xe0, 0x99, 0x7f, 0xa5,
	0x25, 0x26, 0xae, 0xf6, 0xbc, 0xfb, 0x22, 0xac, 0x16, 0xa9, 0x49, 0x3d, 0x3a, 0x59, 0x9c, 0x7f,
	0x83, 0x60, 0xb5, 0xc0, 0x67, 0xf0, 0x44, 0xfa, 0x81, 0x40, 0x47, 0x06, 0x02, 0x7d, 0x0c, 0xd0,
	0xf7, 0x56, 0xd4, 0xf7, 0x55, 0xef, 0x1d, 0x40, 0x52, 0xfe, 0x8e, 0x60, 0xf5, 0x88, 0x8f, 0xf9,
	0xc9, 0xfc, 0xfb, 0x84, 0xfc, 0x08, 0x90, 0x93, 0x26, 0x71, 0xcf, 0xce, 0x9d, 0x75, 0xdb, 0x06,
	0x35, 0xf5, 0x3d, 0xe2, 0x9e, 0x49, 0x72, 0xc2, 0x7e, 0x2b, 0x9f, 0x83, 0xe5, 0x32, 0xf5, 0x58,
	0x6f, 0xbe, 0xe8, 0x29, 0x32, 0x90, 0x1a, 0x28, 0x8f, 0xcb, 0xf4, 0x7f, 0x8e, 0x20, 0xc1, 0xf2,
	0x90, 0xe9, 0x7d, 0x6a, 0x8a, 0xe3, 0xfb, 0x08, 0x92, 0x01, 0xa7, 0x44, 0x59, 0x6c, 0xc3, 0x1c,
	0x63, 0x35, 0xb2, 0x20, 0xbe, 0x14, 0x76, 0xa4, 0xa9, 0xfe, 0xf1, 0x89, 0x8b, 0xe0, 0x55, 0x48,
	0xfa, 0x45, 0x70, 0x59, 0x0c, 0x7f, 0x8b, 0x20, 0xe9, 0xa7, 0xff, 0x25, 0x9a, 0x81, 0x20, 0xce,
	0x0e, 0x04, 0x71, 0x15, 0xa2, 0x9c, 0xb0, 0x19, 0xba, 0x8c, 0x22, 0x5b, 0x56, 0x74, 0x5c, 0x84,
	0x59, 0xf6, 0x4b, 0xa4, 0x4a, 0xf8, 0x2b, 0xf3, 0xd3, 0xca, 0x9f, 0x10, 0x24, 0xfd, 0xfc, 0xbf,
	0xcc, 0x41, 0x69, 0x6f, 0x66, 0x1a, 0x7b, 0xd3, 0xe5, 0xf9, 0x0f, 0x10, 0xa4, 0xe5, 0xe3, 0x4f,
	0xde, 0xb8, 0x9f, 0x79, 0x0e, 0xfe, 0x0e, 0xc1, 0xad, 0xb1, 0x6e, 0x7c, 0x6a, 0x9a, 0xf4, 0x0f,
	0x11, 0x24, 0x7b, 0xe4, 0x6a, 0x8f, 0x7a, 0x44, 0x27, 0x1e, 0x19, 0xfe, 0x7a, 0x42, 0xa1, 0xbe,
	0x9e, 0xee, 0xc1, 0x02, 0xb5, 0xf4, 0x49, 0x89, 0x7c, 0x94, 0x5a, 0x3a, 0x5b, 0x29, 0x35, 0x78,
	0xa9, 0x4c, 0xbd, 0xe3, 0xb6, 0x69, 0x3d, 0x0d, 0x84, 0xaa, 0xd6, 0x6e, 0x36, 0x89, 0xd3, 0x95,
	0x0f, 0xd7, 0xcf, 0x7d, 0x34, 0x49, 0x03, 0x51, 0xfe, 0x30, 0x03, 0xca, 0x45, 0xa8, 0xe2, 0x1d,
	0x3c, 0xf6, 0x01, 0xd0, 0xb6, 0x3c, 0xf9, 0x04, 0x6f, 0x85, 0x79, 0x82, 0xcb, 0xf1, 0x33, 0x35,
	0xda, 0xa1, 0x8e, 0xe1, 0x75, 0x0b, 0xcc, 0x88, 0x2a, 0x6c, 0xa5, 0xdf, 0x47, 0xb0, 0x34, 0xb0,
	0x83, 0xeb, 0xb0, 0xe0, 0x0a, 0x81, 0xe0, 0xdc, 0xdb, 0xd3, 0xfd, 0xdd, 0x55, 0xc2, 0xab, 0x3d,
	0x5c, 0xf6, 0xfd, 0xc9, 0xed, 0xf3, 0x48, 0x45, 0x54, 0x7f, 0xb1, 0xf9, 0xc7, 0x55, 0x48, 0x16,
	0x24, 0x72, 0x4e, 0x20, 0xe3, 0xbf, 0x21, 0x58, 0x1a, 0x98, 0x04, 0xf8, 0xcd, 0x90, 0x91, 0x19,
	0x99, 0x95, 0xe9, 0x2b, 0xa6, 0xb7, 0xb2, 0xf1, 0xbd, 0x7f, 0xff, 0xf7, 0x17, 0x33, 0x77, 0xf1,
	0x9d, 0xfe, 0xff, 0x4f, 0xf8, 0x2e, 0x2b, 0xdc, 0x07, 0x2d, 0xc7, 0xfe, 0x36, 0x6d, 0x78, 0x6e,
	0x76, 0x3d, 0x1b, 0xa8, 0x80, 0xec, 0xfa, 0x7b, 0xf8, 0x9f, 0x08, 0x56, 0x86, 0xf8, 0x11, 0x0e,
	0x45, 0x95, 0xc7, 0xf3, 0xbe, 0x74, 0x61, 0x2a, 0x0c, 0x3f, 0x27, 0xc6, 0xde, 0xc7, 0xcf, 0xe6,
	0xc0, 0x8d, 0xde, 0x0b, 0x5e, 0x09, 0x7f, 0x80, 0x20, 0x31, 0x4c, 0xa9, 0x70, 0x21, 0xdc, 0x57,
	0xe5, 0x58, 0x42, 0x96, 0xbe, 0x39, 0x52, 0xa1, 0xa5, 0x66, 0xcb, 0xeb, 0x4a, 0x27, 0xd7, 0x43,
	0x04, 0xfd, 0x5f, 0x08, 0x12, 0xc3, 0x3c, 0x2e, 0x9c, 0x93, 0xe7, 0xb0, 0xc0, 0x2b, 0x67, 0xce,
	0x03, 0x7e, 0x89, 0xd7, 0x95, 0xc9, 0x23, 0xbd, 0x15, 0x24, 0x5c, 0xec, 0x42, 0xc3, 0xc4, 0x2f,
	0xdc, 0x85, 0xce, 0xa1, 0x8d, 0xd3, 0x5e, 0x68, 0x73, 0xf2, 0x57, 0x19, 0xb8, 0xd0, 0x3f, 0x10,
	0x24, 0x47, 0xf8, 0x1d, 0x2e, 0x5e, 0xb9, 0xb2, 0x03, 0x7c, 0x20, 0x1d, 0x7a, 0xda, 0x2b, 0xaf,
	0xf3, 0xcb, 0x6c, 0xe0, 0xec, 0xc4, 0x97, 0xc9, 0xfa, 0x14, 0xec, 0xf7, 0x08, 0xa2, 0x82, 0xcc,
	0xe2, 0xad, 0x90, 0xce, 0x4f, 0xe7, 0xf2, 0x5d, 0xee, 0xf2, 0x2b, 0xf8, 0xe5, 0x0b, 0x5c, 0xe6,
	0x3e, 0xb2, 0x7a, 0xf8, 0x2b, 0x82, 0x58, 0x8f, 0x87, 0xe2, 0x37, 0xc2, 0xb6, 0x8e, 0x20, 0xa7,
	0x4e, 0x3f, 0xb8, 0xe2, 0x69, 0xd1, 0x72, 0xc6, 0xf9, 0x3d, 0xa6, 0x10, 0xfc, 0xf0, 0xfe, 0x0c,
	0x01, 0xf4, 0xa9, 0x2b, 0x7e, 0x10, 0xbe, 0xcd, 0x04, 0x83, 0x7c, 0x5e, 0x83, 0x11, 0x2e, 0xad,
	0x4f, 0x14, 0xca, 0x0f, 0x11, 0x40, 0x9f, 0x23, 0x87, 0x73, 0x69, 0x84, 0x5b, 0x5f, 0xe1, 0xdd,
	0x45, 0x37, 0x54, 0x26, 0x89, 0xdf, 0x96, 0xcf, 0x62, 0x99, 0xcb, 0x7d, 0xd6, 0x1c, 0xce, 0xe5,
	0x11, 0xb6, 0x7d, 0x75, 0x97, 0x37, 0x27, 0x89, 0xaf, 0x70, 0xf9, 0x23, 0x04, 0xcf, 0x8d, 0x21,
	0xad, 0x78, 0xfb, 0x2a, 0xc9, 0x37, 0x66, 0x7a, 0x96, 0xa7, 0xc6, 0x11, 0xe9, 0x3c, 0x49, 0xe7,
	0x90, 0x77, 0x1b, 0x98, 0xa3, 0xff, 0x47, 0x90, 0x3e, 0x9f, 0xb5, 0xe1, 0xbd, 0x67, 0xc5, 0xfe,
	0xfc, 0xfb, 0xee, 0x3f, 0x5b, 0x32, 0xa9, 0x6c, 0xf2, 0x6b, 0x7f, 0x01, 0xaf, 0x5f, 0x9c, 0x85,
	0x1d, 0x06, 0xe3, 0x8a, 0x2b, 0xfd, 0x08, 0xc1, 0x62, 0x8d, 0x7a, 0x15, 0xd2, 0xac, 0xf2, 0x7f,
	0x43, 0x81, 0x15, 0xe9, 0x94, 0x41, 0x9a, 0x99, 0xce, 0x46, 0x26, 0xb8, 0x29, 0x1d, 0xbf, 0x31,
	0xa4, 0xe3, 0xef, 0x2a, 0x0f, 0xb9, 0xfd, 0xaf, 0x29, 0xaf, 0x05, 0xec, 0xcb, 0x3f, 0x7c, 0x8f,
	0x4d, 0x2b, 0x37, 0x80, 0xbd, 0x85, 0xd6, 0xb9, 0x33, 0xe5, 0x8b, 0x9c, 0x29, 0x7f, 0x82, 0xce,
	0x9c, 0x0e, 0x39, 0xf3, 0x21, 0x02, 0x7c, 0x48, 0x5d, 0x2e, 0xa4, 0x4e, 0xd3, 0x70, 0x5d, 0xc3,
	0xb6, 0x5c, 0x7c, 0x7b, 0xc8, 0xdc, 0xa8, 0x8a, 0x74, 0xec, 0xce, 0x04, 0x9a, 0xe2, 0xe5, 0x4a,
	0xdc, 0xd9, 0x87, 0xca, 0xd6, 0xa4, 0xce, 0x7a, 0x23, 0x58, 0x5b, 0x68, 0x3d, 0x9f, 0x85, 0x57,
	0x1a, 0x76, 0x53, 0x9a, 0x3d, 0x3f, 0x99, 0xaa, 0xe8, 0x83, 0x99, 0x48, 0xb9, 0x90, 0xab, 0xcf,
	0xf3, 0xa6, 0xfb, 0xe5, 0x8f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x6e, 0x15, 0x36, 0xe2, 0x04, 0x25,
	0x00, 0x00,
}
