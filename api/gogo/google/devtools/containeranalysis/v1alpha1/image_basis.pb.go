// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: google/devtools/containeranalysis/v1alpha1/image_basis.proto

package google_devtools_containeranalysis_v1alpha1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "go.pedge.io/pb/gogo/google/api"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Instructions from dockerfile
type DockerImage_Layer_Directive int32

const (
	// Default value for unsupported/missing directive
	DockerImage_Layer_DIRECTIVE_UNSPECIFIED DockerImage_Layer_Directive = 0
	// https://docs.docker.com/reference/builder/#maintainer
	DockerImage_Layer_MAINTAINER DockerImage_Layer_Directive = 1
	// https://docs.docker.com/reference/builder/#run
	DockerImage_Layer_RUN DockerImage_Layer_Directive = 2
	// https://docs.docker.com/reference/builder/#cmd
	DockerImage_Layer_CMD DockerImage_Layer_Directive = 3
	// https://docs.docker.com/reference/builder/#label
	DockerImage_Layer_LABEL DockerImage_Layer_Directive = 4
	// https://docs.docker.com/reference/builder/#expose
	DockerImage_Layer_EXPOSE DockerImage_Layer_Directive = 5
	// https://docs.docker.com/reference/builder/#env
	DockerImage_Layer_ENV DockerImage_Layer_Directive = 6
	// https://docs.docker.com/reference/builder/#add
	DockerImage_Layer_ADD DockerImage_Layer_Directive = 7
	// https://docs.docker.com/reference/builder/#copy
	DockerImage_Layer_COPY DockerImage_Layer_Directive = 8
	// https://docs.docker.com/reference/builder/#entrypoint
	DockerImage_Layer_ENTRYPOINT DockerImage_Layer_Directive = 9
	// https://docs.docker.com/reference/builder/#volume
	DockerImage_Layer_VOLUME DockerImage_Layer_Directive = 10
	// https://docs.docker.com/reference/builder/#user
	DockerImage_Layer_USER DockerImage_Layer_Directive = 11
	// https://docs.docker.com/reference/builder/#workdir
	DockerImage_Layer_WORKDIR DockerImage_Layer_Directive = 12
	// https://docs.docker.com/reference/builder/#arg
	DockerImage_Layer_ARG DockerImage_Layer_Directive = 13
	// https://docs.docker.com/reference/builder/#onbuild
	DockerImage_Layer_ONBUILD DockerImage_Layer_Directive = 14
	// https://docs.docker.com/reference/builder/#stopsignal
	DockerImage_Layer_STOPSIGNAL DockerImage_Layer_Directive = 15
	// https://docs.docker.com/reference/builder/#healthcheck
	DockerImage_Layer_HEALTHCHECK DockerImage_Layer_Directive = 16
	// https://docs.docker.com/reference/builder/#shell
	DockerImage_Layer_SHELL DockerImage_Layer_Directive = 17
)

var DockerImage_Layer_Directive_name = map[int32]string{
	0:  "DIRECTIVE_UNSPECIFIED",
	1:  "MAINTAINER",
	2:  "RUN",
	3:  "CMD",
	4:  "LABEL",
	5:  "EXPOSE",
	6:  "ENV",
	7:  "ADD",
	8:  "COPY",
	9:  "ENTRYPOINT",
	10: "VOLUME",
	11: "USER",
	12: "WORKDIR",
	13: "ARG",
	14: "ONBUILD",
	15: "STOPSIGNAL",
	16: "HEALTHCHECK",
	17: "SHELL",
}
var DockerImage_Layer_Directive_value = map[string]int32{
	"DIRECTIVE_UNSPECIFIED": 0,
	"MAINTAINER":            1,
	"RUN":                   2,
	"CMD":                   3,
	"LABEL":                 4,
	"EXPOSE":                5,
	"ENV":                   6,
	"ADD":                   7,
	"COPY":                  8,
	"ENTRYPOINT":            9,
	"VOLUME":                10,
	"USER":                  11,
	"WORKDIR":               12,
	"ARG":                   13,
	"ONBUILD":               14,
	"STOPSIGNAL":            15,
	"HEALTHCHECK":           16,
	"SHELL":                 17,
}

func (x DockerImage_Layer_Directive) String() string {
	return proto.EnumName(DockerImage_Layer_Directive_name, int32(x))
}
func (DockerImage_Layer_Directive) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorImageBasis, []int{0, 0, 0}
}

// DockerImage holds types defining base image notes
// and derived image occurrences.
type DockerImage struct {
}

func (m *DockerImage) Reset()                    { *m = DockerImage{} }
func (m *DockerImage) String() string            { return proto.CompactTextString(m) }
func (*DockerImage) ProtoMessage()               {}
func (*DockerImage) Descriptor() ([]byte, []int) { return fileDescriptorImageBasis, []int{0} }

// Layer holds metadata specific to a layer of a Docker image.
type DockerImage_Layer struct {
	// The recovered Dockerfile directive used to construct this layer.
	Directive DockerImage_Layer_Directive `protobuf:"varint,1,opt,name=directive,proto3,enum=google.devtools.containeranalysis.v1alpha1.DockerImage_Layer_Directive" json:"directive,omitempty"`
	// The recovered arguments to the Dockerfile directive.
	Arguments string `protobuf:"bytes,2,opt,name=arguments,proto3" json:"arguments,omitempty"`
}

func (m *DockerImage_Layer) Reset()                    { *m = DockerImage_Layer{} }
func (m *DockerImage_Layer) String() string            { return proto.CompactTextString(m) }
func (*DockerImage_Layer) ProtoMessage()               {}
func (*DockerImage_Layer) Descriptor() ([]byte, []int) { return fileDescriptorImageBasis, []int{0, 0} }

func (m *DockerImage_Layer) GetDirective() DockerImage_Layer_Directive {
	if m != nil {
		return m.Directive
	}
	return DockerImage_Layer_DIRECTIVE_UNSPECIFIED
}

func (m *DockerImage_Layer) GetArguments() string {
	if m != nil {
		return m.Arguments
	}
	return ""
}

// A set of properties that uniquely identify a given Docker image.
type DockerImage_Fingerprint struct {
	// The layer-id of the final layer in the Docker image's v1
	// representation.
	// This field can be used as a filter in list requests.
	V1Name string `protobuf:"bytes,1,opt,name=v1_name,json=v1Name,proto3" json:"v1_name,omitempty"`
	// The ordered list of v2 blobs that represent a given image.
	V2Blob []string `protobuf:"bytes,2,rep,name=v2_blob,json=v2Blob" json:"v2_blob,omitempty"`
	// Output only. The name of the image's v2 blobs computed via:
	//   [bottom] := v2_blob[bottom]
	//   [N] := sha256(v2_blob[N] + " " + v2_name[N+1])
	// Only the name of the final blob is kept.
	// This field can be used as a filter in list requests.
	V2Name string `protobuf:"bytes,3,opt,name=v2_name,json=v2Name,proto3" json:"v2_name,omitempty"`
}

func (m *DockerImage_Fingerprint) Reset()         { *m = DockerImage_Fingerprint{} }
func (m *DockerImage_Fingerprint) String() string { return proto.CompactTextString(m) }
func (*DockerImage_Fingerprint) ProtoMessage()    {}
func (*DockerImage_Fingerprint) Descriptor() ([]byte, []int) {
	return fileDescriptorImageBasis, []int{0, 1}
}

func (m *DockerImage_Fingerprint) GetV1Name() string {
	if m != nil {
		return m.V1Name
	}
	return ""
}

func (m *DockerImage_Fingerprint) GetV2Blob() []string {
	if m != nil {
		return m.V2Blob
	}
	return nil
}

func (m *DockerImage_Fingerprint) GetV2Name() string {
	if m != nil {
		return m.V2Name
	}
	return ""
}

// Basis describes the base image portion (Note) of the DockerImage
// relationship.  Linked occurrences are derived from this or an
// equivalent image via:
//   FROM <Basis.resource_url>
// Or an equivalent reference, e.g. a tag of the resource_url.
type DockerImage_Basis struct {
	// The resource_url for the resource representing the basis of
	// associated occurrence images.
	ResourceUrl string `protobuf:"bytes,1,opt,name=resource_url,json=resourceUrl,proto3" json:"resource_url,omitempty"`
	// The fingerprint of the base image
	Fingerprint *DockerImage_Fingerprint `protobuf:"bytes,2,opt,name=fingerprint" json:"fingerprint,omitempty"`
}

func (m *DockerImage_Basis) Reset()                    { *m = DockerImage_Basis{} }
func (m *DockerImage_Basis) String() string            { return proto.CompactTextString(m) }
func (*DockerImage_Basis) ProtoMessage()               {}
func (*DockerImage_Basis) Descriptor() ([]byte, []int) { return fileDescriptorImageBasis, []int{0, 2} }

func (m *DockerImage_Basis) GetResourceUrl() string {
	if m != nil {
		return m.ResourceUrl
	}
	return ""
}

func (m *DockerImage_Basis) GetFingerprint() *DockerImage_Fingerprint {
	if m != nil {
		return m.Fingerprint
	}
	return nil
}

// Derived describes the derived image portion (Occurrence) of the
// DockerImage relationship.  This image would be produced from a Dockerfile
// with FROM <DockerImage.Basis in attached Note>.
type DockerImage_Derived struct {
	// The fingerprint of the derived image
	Fingerprint *DockerImage_Fingerprint `protobuf:"bytes,1,opt,name=fingerprint" json:"fingerprint,omitempty"`
	// Output only. The number of layers by which this image differs from
	// the associated image basis.
	Distance uint32 `protobuf:"varint,2,opt,name=distance,proto3" json:"distance,omitempty"`
	// This contains layer-specific metadata, if populated it
	// has length "distance" and is ordered with [distance] being the
	// layer immediately following the base image and [1]
	// being the final layer.
	LayerInfo []*DockerImage_Layer `protobuf:"bytes,3,rep,name=layer_info,json=layerInfo" json:"layer_info,omitempty"`
	// Output only.This contains the base image url for the derived image
	// Occurrence
	BaseResourceUrl string `protobuf:"bytes,4,opt,name=base_resource_url,json=baseResourceUrl,proto3" json:"base_resource_url,omitempty"`
}

func (m *DockerImage_Derived) Reset()                    { *m = DockerImage_Derived{} }
func (m *DockerImage_Derived) String() string            { return proto.CompactTextString(m) }
func (*DockerImage_Derived) ProtoMessage()               {}
func (*DockerImage_Derived) Descriptor() ([]byte, []int) { return fileDescriptorImageBasis, []int{0, 3} }

func (m *DockerImage_Derived) GetFingerprint() *DockerImage_Fingerprint {
	if m != nil {
		return m.Fingerprint
	}
	return nil
}

func (m *DockerImage_Derived) GetDistance() uint32 {
	if m != nil {
		return m.Distance
	}
	return 0
}

func (m *DockerImage_Derived) GetLayerInfo() []*DockerImage_Layer {
	if m != nil {
		return m.LayerInfo
	}
	return nil
}

func (m *DockerImage_Derived) GetBaseResourceUrl() string {
	if m != nil {
		return m.BaseResourceUrl
	}
	return ""
}

func init() {
	proto.RegisterType((*DockerImage)(nil), "google.devtools.containeranalysis.v1alpha1.DockerImage")
	proto.RegisterType((*DockerImage_Layer)(nil), "google.devtools.containeranalysis.v1alpha1.DockerImage.Layer")
	proto.RegisterType((*DockerImage_Fingerprint)(nil), "google.devtools.containeranalysis.v1alpha1.DockerImage.Fingerprint")
	proto.RegisterType((*DockerImage_Basis)(nil), "google.devtools.containeranalysis.v1alpha1.DockerImage.Basis")
	proto.RegisterType((*DockerImage_Derived)(nil), "google.devtools.containeranalysis.v1alpha1.DockerImage.Derived")
	proto.RegisterEnum("google.devtools.containeranalysis.v1alpha1.DockerImage_Layer_Directive", DockerImage_Layer_Directive_name, DockerImage_Layer_Directive_value)
}

func init() {
	proto.RegisterFile("google/devtools/containeranalysis/v1alpha1/image_basis.proto", fileDescriptorImageBasis)
}

var fileDescriptorImageBasis = []byte{
	// 595 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x93, 0xdf, 0x6e, 0xda, 0x30,
	0x14, 0xc6, 0x17, 0x52, 0xa0, 0x39, 0xe9, 0x1f, 0xd7, 0xd2, 0x34, 0x86, 0x7a, 0xc1, 0x2a, 0x4d,
	0xaa, 0x7a, 0x11, 0x04, 0xbb, 0xdd, 0x2e, 0x42, 0xe2, 0x42, 0xd4, 0x34, 0x41, 0x06, 0xba, 0x56,
	0x9a, 0x14, 0x19, 0x70, 0x59, 0xb4, 0x10, 0x23, 0x27, 0x45, 0xea, 0x63, 0xec, 0xa6, 0x0f, 0xb0,
	0x27, 0xdc, 0x1b, 0x6c, 0x72, 0x0a, 0x85, 0x6d, 0x9a, 0x34, 0x6d, 0xda, 0x9d, 0x73, 0xbe, 0x7c,
	0xbf, 0xcf, 0x3e, 0x3e, 0x86, 0xb7, 0x33, 0x21, 0x66, 0x09, 0x6f, 0x4e, 0xf9, 0x32, 0x17, 0x22,
	0xc9, 0x9a, 0x13, 0x91, 0xe6, 0x2c, 0x4e, 0xb9, 0x64, 0x29, 0x4b, 0xee, 0xb3, 0x38, 0x6b, 0x2e,
	0x5b, 0x2c, 0x59, 0x7c, 0x64, 0xad, 0x66, 0x3c, 0x67, 0x33, 0x1e, 0x8d, 0x59, 0x16, 0x67, 0xd6,
	0x42, 0x8a, 0x5c, 0xe0, 0xb3, 0x47, 0xb7, 0xb5, 0x76, 0x5b, 0xbf, 0xb8, 0xad, 0xb5, 0xbb, 0x7e,
	0xbc, 0x4a, 0x62, 0x8b, 0xb8, 0xc9, 0xd2, 0x54, 0xe4, 0x2c, 0x8f, 0x45, 0xba, 0x22, 0x9d, 0x3c,
	0x54, 0xc1, 0x74, 0xc5, 0xe4, 0x13, 0x97, 0x9e, 0x4a, 0xa9, 0x7f, 0x2b, 0x41, 0xd9, 0x67, 0xf7,
	0x5c, 0x62, 0x0e, 0xc6, 0x34, 0x96, 0x7c, 0x92, 0xc7, 0x4b, 0x5e, 0xd3, 0x1a, 0xda, 0xe9, 0x41,
	0xbb, 0x6b, 0xfd, 0x79, 0xae, 0xb5, 0x45, 0xb5, 0x0a, 0xa2, 0xe5, 0xae, 0x71, 0x74, 0x43, 0xc6,
	0xc7, 0x60, 0x30, 0x39, 0xbb, 0x9b, 0xf3, 0x34, 0xcf, 0x6a, 0xa5, 0x86, 0x76, 0x6a, 0xd0, 0x4d,
	0xe1, 0xe4, 0xab, 0x06, 0xc6, 0x93, 0x0d, 0xbf, 0x84, 0xe7, 0xae, 0x47, 0x89, 0x33, 0xf4, 0xae,
	0x48, 0x34, 0x0a, 0x06, 0x7d, 0xe2, 0x78, 0xe7, 0x1e, 0x71, 0xd1, 0x33, 0x7c, 0x00, 0x70, 0x69,
	0x7b, 0xc1, 0xd0, 0xf6, 0x02, 0x42, 0x91, 0x86, 0xab, 0xa0, 0xd3, 0x51, 0x80, 0x4a, 0x6a, 0xe1,
	0x5c, 0xba, 0x48, 0xc7, 0x06, 0x94, 0x7d, 0xbb, 0x43, 0x7c, 0xb4, 0x83, 0x01, 0x2a, 0xe4, 0xba,
	0x1f, 0x0e, 0x08, 0x2a, 0x2b, 0x9d, 0x04, 0x57, 0xa8, 0xa2, 0x16, 0xb6, 0xeb, 0xa2, 0x2a, 0xde,
	0x85, 0x1d, 0x27, 0xec, 0xdf, 0xa0, 0x5d, 0x05, 0x25, 0xc1, 0x90, 0xde, 0xf4, 0x43, 0x2f, 0x18,
	0x22, 0x43, 0xf9, 0xae, 0x42, 0x7f, 0x74, 0x49, 0x10, 0xa8, 0xbf, 0x46, 0x03, 0x42, 0x91, 0x89,
	0x4d, 0xa8, 0xbe, 0x0f, 0xe9, 0x85, 0xeb, 0x51, 0xb4, 0x57, 0x50, 0x68, 0x17, 0xed, 0xab, 0x6a,
	0x18, 0x74, 0x46, 0x9e, 0xef, 0xa2, 0x03, 0x05, 0x1a, 0x0c, 0xc3, 0xfe, 0xc0, 0xeb, 0x06, 0xb6,
	0x8f, 0x0e, 0xf1, 0x21, 0x98, 0x3d, 0x62, 0xfb, 0xc3, 0x9e, 0xd3, 0x23, 0xce, 0x05, 0x42, 0x6a,
	0x73, 0x83, 0x1e, 0xf1, 0x7d, 0x74, 0x54, 0xbf, 0x06, 0xf3, 0x3c, 0x4e, 0x67, 0x5c, 0x2e, 0x64,
	0x9c, 0xe6, 0xf8, 0x05, 0x54, 0x97, 0xad, 0x28, 0x65, 0xf3, 0xc7, 0x4b, 0x30, 0x68, 0x65, 0xd9,
	0x0a, 0xd8, 0x9c, 0x17, 0x42, 0x3b, 0x1a, 0x27, 0x62, 0x5c, 0x2b, 0x35, 0xf4, 0x42, 0x68, 0x77,
	0x12, 0x31, 0x5e, 0x09, 0x85, 0x43, 0x5f, 0x39, 0xda, 0xca, 0x51, 0xff, 0xac, 0x41, 0xb9, 0xa3,
	0xa6, 0x08, 0xbf, 0x82, 0x3d, 0xc9, 0x33, 0x71, 0x27, 0x27, 0x3c, 0xba, 0x93, 0xc9, 0x8a, 0x6c,
	0xae, 0x6b, 0x23, 0x99, 0x60, 0x0e, 0xe6, 0xed, 0x66, 0x1b, 0xc5, 0xcd, 0x98, 0x6d, 0xe7, 0x6f,
	0x07, 0x60, 0xeb, 0x44, 0x74, 0x9b, 0x5b, 0x7f, 0x28, 0x41, 0xd5, 0xe5, 0x32, 0x5e, 0xf2, 0xe9,
	0xcf, 0x91, 0xda, 0xff, 0x89, 0xc4, 0x75, 0xd8, 0x9d, 0xc6, 0x59, 0xce, 0xd2, 0x09, 0x2f, 0x8e,
	0xb5, 0x4f, 0x9f, 0xbe, 0xf1, 0x07, 0x80, 0x44, 0xcd, 0x6a, 0x14, 0xa7, 0xb7, 0xa2, 0xa6, 0x37,
	0xf4, 0x53, 0xb3, 0xfd, 0xee, 0x9f, 0xa6, 0x9e, 0x1a, 0x05, 0xd0, 0x4b, 0x6f, 0x05, 0x3e, 0x83,
	0xa3, 0x31, 0xcb, 0x78, 0xf4, 0x43, 0xef, 0x77, 0x8a, 0xde, 0x1f, 0x2a, 0x81, 0x6e, 0xfa, 0xdf,
	0x69, 0xc2, 0xeb, 0x89, 0x98, 0xaf, 0xa3, 0x7f, 0x9f, 0xd8, 0xd7, 0xbe, 0x94, 0xf4, 0xae, 0x63,
	0x8f, 0x2b, 0xc5, 0x83, 0x7e, 0xf3, 0x3d, 0x00, 0x00, 0xff, 0xff, 0x31, 0xc1, 0x8c, 0x19, 0x5a,
	0x04, 0x00, 0x00,
}
